{
  "oauthAuthorizations": [
    {
      "name": "List your grants",
      "enabledForApps": false,
      "method": "GET",
      "path": "/applications/grants",
      "params": [
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://developer.github.com/v3/oauth_authorizations/#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `[\"repo\", \"user\"]`.",
      "idName": "list-grants",
      "documentationUrl": "https://developer.github.com/v3/oauth_authorizations/#list-your-grants"
    },
    {
      "name": "Get a single grant",
      "enabledForApps": false,
      "method": "GET",
      "path": "/applications/grants/:grant_id",
      "params": [
        {
          "name": "grant_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-grant",
      "documentationUrl": "https://developer.github.com/v3/oauth_authorizations/#get-a-single-grant"
    },
    {
      "name": "Delete a grant",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/applications/grants/:grant_id",
      "params": [
        {
          "name": "grant_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).",
      "idName": "delete-grant",
      "documentationUrl": "https://developer.github.com/v3/oauth_authorizations/#delete-a-grant"
    },
    {
      "name": "List your authorizations",
      "enabledForApps": false,
      "method": "GET",
      "path": "/authorizations",
      "params": [
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-authorizations",
      "documentationUrl": "https://developer.github.com/v3/oauth_authorizations/#list-your-authorizations"
    },
    {
      "name": "Get a single authorization",
      "enabledForApps": false,
      "method": "GET",
      "path": "/authorizations/:authorization_id",
      "params": [
        {
          "name": "authorization_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-authorization",
      "documentationUrl": "https://developer.github.com/v3/oauth_authorizations/#get-a-single-authorization"
    },
    {
      "name": "Create a new authorization",
      "enabledForApps": false,
      "method": "POST",
      "path": "/authorizations",
      "params": [
        {
          "name": "scopes",
          "type": "string[]",
          "description": "A list of scopes that this authorization is in.",
          "required": false,
          "location": "body"
        },
        {
          "name": "note",
          "type": "string",
          "description": "A note to remind you what the OAuth token is for. Tokens not associated with a specific OAuth application (i.e. personal access tokens) must have a unique note.",
          "required": true,
          "location": "body"
        },
        {
          "name": "note_url",
          "type": "string",
          "description": "A URL to remind you what app the OAuth token is for.",
          "required": false,
          "location": "body"
        },
        {
          "name": "client_id",
          "type": "string",
          "description": "The 20 character OAuth app client key for which to create the token.",
          "required": false,
          "location": "body"
        },
        {
          "name": "client_secret",
          "type": "string",
          "description": "The 40 character OAuth app client secret for which to create the token.",
          "required": false,
          "location": "body"
        },
        {
          "name": "fingerprint",
          "type": "string",
          "description": "A unique string to distinguish an authorization from others created for the same client ID and user.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "If you need a small number of personal access tokens, implementing the [web flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/) can be cumbersome. Instead, tokens can be created using the OAuth Authorizations API using [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication). To create personal access tokens for a particular OAuth application, you must provide its client ID and secret, found on the OAuth application settings page, linked from your [OAuth applications listing on GitHub](https://github.com/settings/developers).\n\nIf your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.\n\nYou can also create OAuth tokens through the web UI via the [personal access tokens settings](https://github.com/settings/tokens). Read more about these tokens on the [GitHub Help site](https://help.github.com/articles/creating-an-access-token-for-command-line-use).\n\nOrganizations that enforce SAML SSO require personal access tokens to be whitelisted. Read more about whitelisting tokens on the [GitHub Help site](https://help.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).",
      "idName": "create-authorization",
      "documentationUrl": "https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization"
    },
    {
      "name": "Get-or-create an authorization for a specific app",
      "enabledForApps": false,
      "method": "PUT",
      "path": "/authorizations/clients/:client_id",
      "params": [
        {
          "name": "client_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "client_secret",
          "type": "string",
          "description": "The 40 character OAuth app client secret associated with the client ID specified in the URL.",
          "required": true,
          "location": "body"
        },
        {
          "name": "scopes",
          "type": "string[]",
          "description": "A list of scopes that this authorization is in.",
          "required": false,
          "location": "body"
        },
        {
          "name": "note",
          "type": "string",
          "description": "A note to remind you what the OAuth token is for.",
          "required": false,
          "location": "body"
        },
        {
          "name": "note_url",
          "type": "string",
          "description": "A URL to remind you what app the OAuth token is for.",
          "required": false,
          "location": "body"
        },
        {
          "name": "fingerprint",
          "type": "string",
          "description": "A unique string to distinguish an authorization from others created for the same client and user. If provided, this API is functionally equivalent to [Get-or-create an authorization for a specific app and fingerprint](https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint).",
          "required": false,
          "location": "body"
        }
      ],
      "description": "This method will create a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.",
      "idName": "get-or-create-authorization-for-app",
      "documentationUrl": "https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app"
    },
    {
      "name": "Get-or-create an authorization for a specific app and fingerprint",
      "enabledForApps": false,
      "method": "PUT",
      "path": "/authorizations/clients/:client_id/:fingerprint",
      "params": [
        {
          "name": "client_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "fingerprint",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "client_secret",
          "type": "string",
          "description": "The 40 character OAuth app client secret associated with the client ID specified in the URL.",
          "required": true,
          "location": "body"
        },
        {
          "name": "scopes",
          "type": "string[]",
          "description": "A list of scopes that this authorization is in.",
          "required": false,
          "location": "body"
        },
        {
          "name": "note",
          "type": "string",
          "description": "A note to remind you what the OAuth token is for.",
          "required": false,
          "location": "body"
        },
        {
          "name": "note_url",
          "type": "string",
          "description": "A URL to remind you what app the OAuth token is for.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.",
      "idName": "get-or-create-authorization-for-app-fingerprint",
      "documentationUrl": "https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint"
    },
    {
      "name": "Update an existing authorization",
      "enabledForApps": false,
      "method": "PATCH",
      "path": "/authorizations/:authorization_id",
      "params": [
        {
          "name": "authorization_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "scopes",
          "type": "string[]",
          "description": "Replaces the authorization scopes with these.",
          "required": false,
          "location": "body"
        },
        {
          "name": "add_scopes",
          "type": "string[]",
          "description": "A list of scopes to add to this authorization.",
          "required": false,
          "location": "body"
        },
        {
          "name": "remove_scopes",
          "type": "string[]",
          "description": "A list of scopes to remove from this authorization.",
          "required": false,
          "location": "body"
        },
        {
          "name": "note",
          "type": "string",
          "description": "A note to remind you what the OAuth token is for. Tokens not associated with a specific OAuth application (i.e. personal access tokens) must have a unique note.",
          "required": false,
          "location": "body"
        },
        {
          "name": "note_url",
          "type": "string",
          "description": "A URL to remind you what app the OAuth token is for.",
          "required": false,
          "location": "body"
        },
        {
          "name": "fingerprint",
          "type": "string",
          "description": "A unique string to distinguish an authorization from others created for the same client ID and user.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "You can only send one of these scope keys at a time.",
      "idName": "update-authorization",
      "documentationUrl": "https://developer.github.com/v3/oauth_authorizations/#update-an-existing-authorization"
    },
    {
      "name": "Delete an authorization",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/authorizations/:authorization_id",
      "params": [
        {
          "name": "authorization_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "delete-authorization",
      "documentationUrl": "https://developer.github.com/v3/oauth_authorizations/#delete-an-authorization"
    },
    {
      "name": "Check an authorization",
      "enabledForApps": false,
      "method": "GET",
      "path": "/applications/:client_id/tokens/:access_token",
      "params": [
        {
          "name": "client_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "access_token",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "OAuth applications can use a special API method for checking OAuth token validity without running afoul of normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing it, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.",
      "idName": "check-authorization",
      "documentationUrl": "https://developer.github.com/v3/oauth_authorizations/#check-an-authorization"
    },
    {
      "name": "Reset an authorization",
      "enabledForApps": false,
      "method": "POST",
      "path": "/applications/:client_id/tokens/:access_token",
      "params": [
        {
          "name": "client_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "access_token",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "OAuth applications can use this API method to reset a valid OAuth token without end user involvement. Applications must save the \"token\" property in the response, because changes take effect immediately. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing it, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.",
      "idName": "reset-authorization",
      "documentationUrl": "https://developer.github.com/v3/oauth_authorizations/#reset-an-authorization"
    },
    {
      "name": "Revoke an authorization for an application",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/applications/:client_id/tokens/:access_token",
      "params": [
        {
          "name": "client_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "access_token",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) for this method, where the username is the OAuth application `client_id` and the password is its `client_secret`.",
      "idName": "revoke-authorization-for-application",
      "documentationUrl": "https://developer.github.com/v3/oauth_authorizations/#revoke-an-authorization-for-an-application"
    },
    {
      "name": "Revoke a grant for an application",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/applications/:client_id/grants/:access_token",
      "params": [
        {
          "name": "client_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "access_token",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) for this method, where the username is the OAuth application `client_id` and the password is its `client_secret`. You must also provide a valid token as `:token` and the grant for the token's owner will be deleted.\n\nDeleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).",
      "idName": "revoke-grant-for-application",
      "documentationUrl": "https://developer.github.com/v3/oauth_authorizations/#revoke-a-grant-for-an-application"
    }
  ],
  "activity": [
    {
      "name": "List public events",
      "enabledForApps": true,
      "method": "GET",
      "path": "/events",
      "params": [
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-public-events",
      "documentationUrl": "https://developer.github.com/v3/activity/events/#list-public-events"
    },
    {
      "name": "List repository events",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/events",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-repo-events",
      "documentationUrl": "https://developer.github.com/v3/activity/events/#list-repository-events"
    },
    {
      "name": "List public events for a network of repositories",
      "enabledForApps": true,
      "method": "GET",
      "path": "/networks/:owner/:repo/events",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-repos-public-events-for-network",
      "documentationUrl": "https://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories"
    },
    {
      "name": "List public events for an organization",
      "enabledForApps": true,
      "method": "GET",
      "path": "/orgs/:org/events",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-public-events-for-org",
      "documentationUrl": "https://developer.github.com/v3/activity/events/#list-public-events-for-an-organization"
    },
    {
      "name": "List events that a user has received",
      "enabledForApps": true,
      "method": "GET",
      "path": "/users/:username/received_events",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.",
      "idName": "list-events-that-user-has-received",
      "documentationUrl": "https://developer.github.com/v3/activity/events/#list-events-that-a-user-has-received"
    },
    {
      "name": "List public events that a user has received",
      "enabledForApps": true,
      "method": "GET",
      "path": "/users/:username/received_events/public",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-public-events-that-user-has-received",
      "documentationUrl": "https://developer.github.com/v3/activity/events/#list-public-events-that-a-user-has-received"
    },
    {
      "name": "List events performed by a user",
      "enabledForApps": true,
      "method": "GET",
      "path": "/users/:username/events",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.",
      "idName": "list-events-for-user",
      "documentationUrl": "https://developer.github.com/v3/activity/events/#list-events-performed-by-a-user"
    },
    {
      "name": "List public events performed by a user",
      "enabledForApps": true,
      "method": "GET",
      "path": "/users/:username/events/public",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-public-events-for-user",
      "documentationUrl": "https://developer.github.com/v3/activity/events/#list-public-events-performed-by-a-user"
    },
    {
      "name": "List events for an organization",
      "enabledForApps": false,
      "method": "GET",
      "path": "/users/:username/events/orgs/:org",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "This is the user's organization dashboard. You must be authenticated as the user to view this.",
      "idName": "list-events-for-org",
      "documentationUrl": "https://developer.github.com/v3/activity/events/#list-events-for-an-organization"
    },
    {
      "name": "List Feeds",
      "enabledForApps": true,
      "method": "GET",
      "path": "/feeds",
      "params": [],
      "description": "GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:\n\n*   **Timeline**: The GitHub global public timeline\n*   **User**: The public timeline for any user, using [URI template](https://developer.github.com/v3/#hypermedia)\n*   **Current user public**: The public timeline for the authenticated user\n*   **Current user**: The private timeline for the authenticated user\n*   **Current user actor**: The private timeline for activity created by the authenticated user\n*   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.\n\n**Note**: Private feeds are only returned when [authenticating via Basic Auth](https://developer.github.com/v3/#basic-authentication) since current feed URIs use the older, non revocable auth tokens.",
      "idName": "list-feeds",
      "documentationUrl": "https://developer.github.com/v3/activity/feeds/#list-feeds"
    },
    {
      "name": "List your notifications",
      "enabledForApps": false,
      "method": "GET",
      "path": "/notifications",
      "params": [
        {
          "name": "all",
          "type": "boolean",
          "description": "If `true`, show notifications marked as read.",
          "default": false,
          "required": false,
          "location": "query"
        },
        {
          "name": "participating",
          "type": "boolean",
          "description": "If `true`, only shows notifications in which the user is directly participating or mentioned.",
          "default": false,
          "required": false,
          "location": "query"
        },
        {
          "name": "since",
          "type": "string",
          "description": "Only show notifications updated after the given time. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "default": "<current date/time>",
          "required": false,
          "location": "query"
        },
        {
          "name": "before",
          "type": "string",
          "description": "Only show notifications updated before the given time. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "required": false,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List all notifications for the current user, sorted by most recently updated.",
      "idName": "list-notifications",
      "documentationUrl": "https://developer.github.com/v3/activity/notifications/#list-your-notifications"
    },
    {
      "name": "List your notifications in a repository",
      "enabledForApps": false,
      "method": "GET",
      "path": "/repos/:owner/:repo/notifications",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "all",
          "type": "boolean",
          "description": "If `true`, show notifications marked as read.",
          "default": false,
          "required": false,
          "location": "query"
        },
        {
          "name": "participating",
          "type": "boolean",
          "description": "If `true`, only shows notifications in which the user is directly participating or mentioned.",
          "default": false,
          "required": false,
          "location": "query"
        },
        {
          "name": "since",
          "type": "string",
          "description": "Only show notifications updated after the given time. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "default": "<current date/time>",
          "required": false,
          "location": "query"
        },
        {
          "name": "before",
          "type": "string",
          "description": "Only show notifications updated before the given time. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "required": false,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List all notifications for the current user.",
      "idName": "list-notifications-for-repo",
      "documentationUrl": "https://developer.github.com/v3/activity/notifications/#list-your-notifications-in-a-repository"
    },
    {
      "name": "Mark as read",
      "enabledForApps": false,
      "method": "PUT",
      "path": "/notifications",
      "params": [
        {
          "name": "last_read_at",
          "type": "string",
          "description": "Describes the last point that notifications were checked. Anything updated since this time will not be updated. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "default": "<current date/time>",
          "required": false,
          "location": "body"
        }
      ],
      "description": "Marking a notification as \"read\" removes it from the [default view on GitHub](https://github.com/notifications).",
      "idName": "mark-as-read",
      "documentationUrl": "https://developer.github.com/v3/activity/notifications/#mark-as-read"
    },
    {
      "name": "Mark notifications as read in a repository",
      "enabledForApps": false,
      "method": "PUT",
      "path": "/repos/:owner/:repo/notifications",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "last_read_at",
          "type": "string",
          "description": "Describes the last point that notifications were checked. Anything updated since this time will not be updated. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "default": "<current date/time>",
          "required": false,
          "location": "body"
        }
      ],
      "description": "Marking all notifications in a repository as \"read\" removes them from the [default view on GitHub](https://github.com/notifications).",
      "idName": "mark-notifications-as-read-for-repo",
      "documentationUrl": "https://developer.github.com/v3/activity/notifications/#mark-notifications-as-read-in-a-repository"
    },
    {
      "name": "View a single thread",
      "enabledForApps": false,
      "method": "GET",
      "path": "/notifications/threads/:thread_id",
      "params": [
        {
          "name": "thread_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-thread",
      "documentationUrl": "https://developer.github.com/v3/activity/notifications/#view-a-single-thread"
    },
    {
      "name": "Mark a thread as read",
      "enabledForApps": false,
      "method": "PATCH",
      "path": "/notifications/threads/:thread_id",
      "params": [
        {
          "name": "thread_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "mark-thread-as-read",
      "documentationUrl": "https://developer.github.com/v3/activity/notifications/#mark-a-thread-as-read"
    },
    {
      "name": "Get a thread subscription",
      "enabledForApps": false,
      "method": "GET",
      "path": "/notifications/threads/:thread_id/subscription",
      "params": [
        {
          "name": "thread_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "This checks to see if the current user is subscribed to a thread. You can also [get a Repository subscription](https://developer.github.com/v3/activity/watching/#get-a-repository-subscription).\n\nNote that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mention**ed, or manually subscribe to a thread.",
      "idName": "get-thread-subscription",
      "documentationUrl": "https://developer.github.com/v3/activity/notifications/#get-a-thread-subscription"
    },
    {
      "name": "Set a thread subscription",
      "enabledForApps": false,
      "method": "PUT",
      "path": "/notifications/threads/:thread_id/subscription",
      "params": [
        {
          "name": "thread_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "ignored",
          "type": "boolean",
          "description": "Unsubscribes and subscribes you to a conversation. Set `ignored` to `true` to block all notifications from this thread.",
          "default": false,
          "required": false,
          "location": "body"
        }
      ],
      "description": "This lets you subscribe or unsubscribe from a conversation.",
      "idName": "set-thread-subscription",
      "documentationUrl": "https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription"
    },
    {
      "name": "Delete a thread subscription",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/notifications/threads/:thread_id/subscription",
      "params": [
        {
          "name": "thread_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Mutes all future notifications for a conversation until you comment on the thread or get **@mention**ed.",
      "idName": "delete-thread-subscription",
      "documentationUrl": "https://developer.github.com/v3/activity/notifications/#delete-a-thread-subscription"
    },
    {
      "name": "List Stargazers",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/stargazers",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "You can also find out _when_ stars were created by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:",
      "idName": "list-stargazers",
      "documentationUrl": "https://developer.github.com/v3/activity/starring/#list-stargazers"
    },
    {
      "method": "GET",
      "path": "/users/:username/starred",
      "enabledForApps": false,
      "name": "List repositories being starred by a user",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "One of `created` (when the repository was starred) or `updated` (when it was last pushed to).",
          "default": "created",
          "required": false,
          "enum": [
            "created",
            "updated"
          ],
          "location": "query"
        },
        {
          "name": "direction",
          "type": "string",
          "description": "One of `asc` (ascending) or `desc` (descending).",
          "default": "desc",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "You can also find out _when_ stars were created by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:",
      "idName": "list-repos-starred-by-user",
      "documentationUrl": "https://developer.github.com/v3/activity/starring/#list-repositories-being-starred"
    },
    {
      "method": "GET",
      "path": "/user/starred",
      "enabledForApps": false,
      "name": "List repositories being starred by the authenticated user",
      "params": [
        {
          "name": "sort",
          "type": "string",
          "description": "One of `created` (when the repository was starred) or `updated` (when it was last pushed to).",
          "default": "created",
          "required": false,
          "enum": [
            "created",
            "updated"
          ],
          "location": "query"
        },
        {
          "name": "direction",
          "type": "string",
          "description": "One of `asc` (ascending) or `desc` (descending).",
          "default": "desc",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "You can also find out _when_ stars were created by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:",
      "idName": "list-repos-starred-by-user",
      "documentationUrl": "https://developer.github.com/v3/activity/starring/#list-repositories-being-starred"
    },
    {
      "name": "Check if you are starring a repository",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/starred/:owner/:repo",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Requires for the user to be authenticated.",
      "idName": "check-starring-repo",
      "documentationUrl": "https://developer.github.com/v3/activity/starring/#check-if-you-are-starring-a-repository"
    },
    {
      "name": "Star a repository",
      "enabledForApps": false,
      "method": "PUT",
      "path": "/user/starred/:owner/:repo",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Requires for the user to be authenticated.\n\nNote that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
      "idName": "star-repo",
      "documentationUrl": "https://developer.github.com/v3/activity/starring/#star-a-repository"
    },
    {
      "name": "Unstar a repository",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/user/starred/:owner/:repo",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Requires for the user to be authenticated.",
      "idName": "unstar-repo",
      "documentationUrl": "https://developer.github.com/v3/activity/starring/#unstar-a-repository"
    },
    {
      "name": "List watchers",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/subscribers",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-watchers",
      "documentationUrl": "https://developer.github.com/v3/activity/watching/#list-watchers"
    },
    {
      "method": "GET",
      "path": "/users/:username/subscriptions",
      "enabledForApps": false,
      "name": "List repositories being watched by a user",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-repos-watched-by-user",
      "documentationUrl": "https://developer.github.com/v3/activity/watching/#list-repositories-being-watched"
    },
    {
      "method": "GET",
      "path": "/user/subscriptions",
      "enabledForApps": false,
      "name": "List repositories being watched by the authenticated user",
      "params": [
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-repos-watched-by-user",
      "documentationUrl": "https://developer.github.com/v3/activity/watching/#list-repositories-being-watched"
    },
    {
      "name": "Get a Repository Subscription",
      "enabledForApps": false,
      "method": "GET",
      "path": "/repos/:owner/:repo/subscription",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-repo-subscription",
      "documentationUrl": "https://developer.github.com/v3/activity/watching/#get-a-repository-subscription"
    },
    {
      "name": "Set a Repository Subscription",
      "enabledForApps": false,
      "method": "PUT",
      "path": "/repos/:owner/:repo/subscription",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "subscribed",
          "type": "boolean",
          "description": "Determines if notifications should be received from this repository.",
          "required": false,
          "location": "body"
        },
        {
          "name": "ignored",
          "type": "boolean",
          "description": "Determines if all notifications should be blocked from this repository.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](#delete-a-repository-subscription) completely.",
      "idName": "set-repo-subscription",
      "documentationUrl": "https://developer.github.com/v3/activity/watching/#set-a-repository-subscription"
    },
    {
      "name": "Delete a Repository Subscription",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/subscription",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](#set-a-repository-subscription).",
      "idName": "delete-repo-subscription",
      "documentationUrl": "https://developer.github.com/v3/activity/watching/#delete-a-repository-subscription"
    },
    {
      "name": "Check if you are watching a repository (LEGACY)",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/subscriptions/:owner/:repo",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Requires for the user to be authenticated.",
      "idName": "check-watching-repo-legacy",
      "documentationUrl": "https://developer.github.com/v3/activity/watching/#check-if-you-are-watching-a-repository-legacy"
    },
    {
      "name": "Watch a repository (LEGACY)",
      "enabledForApps": false,
      "method": "PUT",
      "path": "/user/subscriptions/:owner/:repo",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Requires the user to be authenticated.\n\nNote that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
      "idName": "watch-repo-legacy",
      "documentationUrl": "https://developer.github.com/v3/activity/watching/#watch-a-repository-legacy"
    },
    {
      "name": "Stop watching a repository (LEGACY)",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/user/subscriptions/:owner/:repo",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Requires for the user to be authenticated.",
      "idName": "stop-watching-repo-legacy",
      "documentationUrl": "https://developer.github.com/v3/activity/watching/#stop-watching-a-repository-legacy"
    }
  ],
  "checks": [
    {
      "name": "Create a check run",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/check-runs",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The name of the check (e.g., \"code-coverage\").",
          "required": true,
          "location": "body"
        },
        {
          "name": "head_branch",
          "type": "string",
          "description": "The name of the branch to perform a check against.",
          "required": true,
          "location": "body"
        },
        {
          "name": "head_sha",
          "type": "string",
          "description": "The SHA of the commit.",
          "required": true,
          "location": "body"
        },
        {
          "name": "details_url",
          "type": "string",
          "description": "The URL of the integrator's site that has the full details of the check.",
          "required": false,
          "location": "body"
        },
        {
          "name": "external_id",
          "type": "string",
          "description": "A reference for the run on the integrator's system.",
          "required": false,
          "location": "body"
        },
        {
          "name": "status",
          "type": "string",
          "description": "The current status. Can be one of `queued`, `in_progress`, or `completed`.",
          "default": "queued",
          "required": false,
          "enum": [
            "queued",
            "in_progress",
            "completed"
          ],
          "location": "body"
        },
        {
          "name": "started_at",
          "type": "string",
          "description": "The time that the check run began in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "required": false,
          "location": "body"
        },
        {
          "name": "conclusion",
          "type": "string",
          "description": "**Required if you provide a `status` of `completed`**. The final conclusion of the check. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, or `action_required`. When the conclusion is `action_required`, additional details should be provided on the site specified by `details_url`.",
          "required": false,
          "enum": [
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "details_url"
          ],
          "location": "body"
        },
        {
          "name": "completed_at",
          "type": "string",
          "description": "**Required if you provide `conclusion`**. The time the check completed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "required": false,
          "location": "body"
        },
        {
          "name": "output",
          "type": "object",
          "description": "Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](#output-object) description.",
          "required": false,
          "location": "body"
        },
        {
          "name": "output.title",
          "type": "string",
          "description": "The title of the check run.",
          "required": true,
          "location": "body"
        },
        {
          "name": "output.summary",
          "type": "string",
          "description": "The summary of the check run. This parameter supports Markdown.",
          "required": true,
          "location": "body"
        },
        {
          "name": "output.text",
          "type": "string",
          "description": "The details of the check run. This parameter supports Markdown.",
          "required": false,
          "location": "body"
        },
        {
          "name": "output.annotations",
          "type": "object[]",
          "description": "Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. For details about annotations in the UI, see \"[About status checks](https://help.github.com/articles/about-status-checks#checks)\". See the [`annotations` object](#annotations-object) description for details about how to use this parameter.",
          "required": false,
          "location": "body"
        },
        {
          "name": "output.annotations[].filename",
          "type": "string",
          "description": "The name of the file to add an annotation to.",
          "required": true,
          "location": "body"
        },
        {
          "name": "output.annotations[].blob_href",
          "type": "string",
          "description": "The file's full blob URL.",
          "required": true,
          "location": "body"
        },
        {
          "name": "output.annotations[].start_line",
          "type": "integer",
          "description": "The start line of the annotation.",
          "required": true,
          "location": "body"
        },
        {
          "name": "output.annotations[].end_line",
          "type": "integer",
          "description": "The end line of the annotation.",
          "required": true,
          "location": "body"
        },
        {
          "name": "output.annotations[].warning_level",
          "type": "string",
          "description": "The warning level of the annotation. Can be one of `notice`, `warning`, or `failure`.",
          "required": true,
          "enum": [
            "notice",
            "warning",
            "failure"
          ],
          "location": "body"
        },
        {
          "name": "output.annotations[].message",
          "type": "string",
          "description": "A short description of the feedback for these lines of code. The maximum size is 64 KB.",
          "required": true,
          "location": "body"
        },
        {
          "name": "output.annotations[].title",
          "type": "string",
          "description": "The title that represents the annotation. The maximum size is 255 characters.",
          "required": false,
          "location": "body"
        },
        {
          "name": "output.annotations[].raw_details",
          "type": "string",
          "description": "Details about this annotation. The maximum size is 64 KB.",
          "required": false,
          "location": "body"
        },
        {
          "name": "output.images",
          "type": "object[]",
          "description": "Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](#images-object) description for details.",
          "required": false,
          "location": "body"
        },
        {
          "name": "output.images[].alt",
          "type": "string",
          "description": "The alternative text for the image.",
          "required": true,
          "location": "body"
        },
        {
          "name": "output.images[].image_url",
          "type": "string",
          "description": "The full URL of the image.",
          "required": true,
          "location": "body"
        },
        {
          "name": "output.images[].caption",
          "type": "string",
          "description": "A short image description.",
          "required": false,
          "location": "body"
        },
        {
          "name": "actions",
          "type": "object",
          "description": "Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](#actions-object) description.",
          "required": false,
          "location": "body"
        },
        {
          "name": "actions.label",
          "type": "string",
          "description": "The text to be displayed on a button in the web UI. The maximum size is 20 characters.",
          "required": true,
          "location": "body"
        },
        {
          "name": "actions.description",
          "type": "string",
          "description": "A short explanation of what this action would do. The maximum size is 40 characters.",
          "required": true,
          "location": "body"
        },
        {
          "name": "actions.identifier",
          "type": "string",
          "description": "A reference for the action on the integrator's system. The maximum size is 20 characters.",
          "required": true,
          "location": "body"
        }
      ],
      "description": "Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.",
      "idName": "create",
      "documentationUrl": "https://developer.github.com/v3/checks/runs/#create-a-check-run"
    },
    {
      "name": "Update a check run",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/repos/:owner/:repo/check-runs/:check_run_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "check_run_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The name of the check (e.g., \"code-coverage\").",
          "required": true,
          "location": "body"
        },
        {
          "name": "details_url",
          "type": "string",
          "description": "The URL of the integrator's site that has the full details of the check.",
          "required": false,
          "location": "body"
        },
        {
          "name": "external_id",
          "type": "string",
          "description": "A reference for the run on the integrator's system.",
          "required": false,
          "location": "body"
        },
        {
          "name": "started_at",
          "type": "string",
          "description": "A timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "required": false,
          "location": "body"
        },
        {
          "name": "status",
          "type": "string",
          "description": "The current status. Can be one of `queued`, `in_progress`, or `completed`.",
          "required": false,
          "enum": [
            "queued",
            "in_progress",
            "completed"
          ],
          "location": "body"
        },
        {
          "name": "conclusion",
          "type": "string",
          "description": "**Required if you provide a `status` of `completed`**. The final conclusion of the check. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, or `action_required`. When the conclusion is `action_required`, additional details should be provided on the site specified by `details_url`.",
          "required": false,
          "enum": [
            "success",
            "failure",
            "neutral",
            "cancelled",
            "timed_out",
            "action_required",
            "details_url"
          ],
          "location": "body"
        },
        {
          "name": "completed_at",
          "type": "string",
          "description": "**Required if you provide `conclusion`**. The time the check completed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "required": false,
          "location": "body"
        },
        {
          "name": "output",
          "type": "object",
          "description": "Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](#output-object-1) description.",
          "required": false,
          "location": "body"
        },
        {
          "name": "output.title",
          "type": "string",
          "description": "**Required**.",
          "required": false,
          "location": "body"
        },
        {
          "name": "output.summary",
          "type": "string",
          "description": "Can contain Markdown.",
          "required": true,
          "location": "body"
        },
        {
          "name": "output.text",
          "type": "string",
          "description": "Can contain Markdown.",
          "required": false,
          "location": "body"
        },
        {
          "name": "output.annotations",
          "type": "object[]",
          "description": "Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. For details about annotations in the UI, see \"[About status checks](https://help.github.com/articles/about-status-checks#checks)\". See the [`annotations` object](#annotations-object-1) description for details.",
          "required": false,
          "location": "body"
        },
        {
          "name": "output.annotations[].filename",
          "type": "string",
          "description": "The name of the file to add an annotation to.",
          "required": true,
          "location": "body"
        },
        {
          "name": "output.annotations[].blob_href",
          "type": "string",
          "description": "The file's full blob URL.",
          "required": true,
          "location": "body"
        },
        {
          "name": "output.annotations[].start_line",
          "type": "integer",
          "description": "The start line of the annotation.",
          "required": true,
          "location": "body"
        },
        {
          "name": "output.annotations[].end_line",
          "type": "integer",
          "description": "The end line of the annotation.",
          "required": true,
          "location": "body"
        },
        {
          "name": "output.annotations[].warning_level",
          "type": "string",
          "description": "The warning level of the annotation. Can be one of `notice`, `warning`, or `failure`.",
          "required": true,
          "enum": [
            "notice",
            "warning",
            "failure"
          ],
          "location": "body"
        },
        {
          "name": "output.annotations[].message",
          "type": "string",
          "description": "A short description of the feedback for these lines of code. The maximum size is 64 KB.",
          "required": true,
          "location": "body"
        },
        {
          "name": "output.annotations[].title",
          "type": "string",
          "description": "The title that represents the annotation. The maximum size is 255 characters.",
          "required": false,
          "location": "body"
        },
        {
          "name": "output.annotations[].raw_details",
          "type": "string",
          "description": "Details about this annotation. The maximum size is 64 KB.",
          "required": false,
          "location": "body"
        },
        {
          "name": "output.images",
          "type": "object[]",
          "description": "Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](#annotations-object-1) description for details.",
          "required": false,
          "location": "body"
        },
        {
          "name": "output.images[].alt",
          "type": "string",
          "description": "The alternative text for the image.",
          "required": true,
          "location": "body"
        },
        {
          "name": "output.images[].image_url",
          "type": "string",
          "description": "The full URL of the image.",
          "required": true,
          "location": "body"
        },
        {
          "name": "output.images[].caption",
          "type": "string",
          "description": "A short image description.",
          "required": false,
          "location": "body"
        },
        {
          "name": "actions",
          "type": "object",
          "description": "Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](#actions-object) description.",
          "required": false,
          "location": "body"
        },
        {
          "name": "actions.label",
          "type": "string",
          "description": "The text to be displayed on a button in the web UI. The maximum size is 20 characters.",
          "required": true,
          "location": "body"
        },
        {
          "name": "actions.description",
          "type": "string",
          "description": "A short explanation of what this action would do. The maximum size is 40 characters.",
          "required": true,
          "location": "body"
        },
        {
          "name": "actions.identifier",
          "type": "string",
          "description": "A reference for the action on the integrator's system. The maximum size is 20 characters.",
          "required": true,
          "location": "body"
        }
      ],
      "description": "Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.",
      "idName": "update",
      "documentationUrl": "https://developer.github.com/v3/checks/runs/#update-a-check-run"
    },
    {
      "name": "List check runs for a specific ref",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/commits/:ref/check-runs",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "ref",
          "type": "string",
          "description": "Can be a SHA, branch name, or tag name.",
          "required": true,
          "location": "url"
        },
        {
          "name": "check_name",
          "type": "string",
          "description": "Returns check runs with the specified `name`.",
          "required": false,
          "location": "query"
        },
        {
          "name": "status",
          "type": "string",
          "description": "Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.",
          "required": false,
          "enum": [
            "queued",
            "in_progress",
            "completed"
          ],
          "location": "query"
        },
        {
          "name": "filter",
          "type": "string",
          "description": "Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.",
          "default": "latest",
          "required": false,
          "enum": [
            "latest",
            "all"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Lists check runs for a SHA, branch name, or tag name. To list check runs, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.",
      "idName": "list-for-ref",
      "documentationUrl": "https://developer.github.com/v3/checks/runs/#list-check-runs-for-a-specific-ref"
    },
    {
      "name": "List check runs in a check suite",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/check-suites/:check_suite_id/check-runs",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "check_suite_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "check_name",
          "type": "string",
          "description": "Returns check runs with the specified `name`.",
          "required": false,
          "location": "query"
        },
        {
          "name": "status",
          "type": "string",
          "description": "Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.",
          "required": false,
          "enum": [
            "queued",
            "in_progress",
            "completed"
          ],
          "location": "query"
        },
        {
          "name": "filter",
          "type": "string",
          "description": "Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.",
          "default": "latest",
          "required": false,
          "enum": [
            "latest",
            "all"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Lists check runs for a check suite using its `id`. To list check runs, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.",
      "idName": "list-for-suite",
      "documentationUrl": "https://developer.github.com/v3/checks/runs/#list-check-runs-in-a-check-suite"
    },
    {
      "name": "Get a single check run",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/check-runs/:check_run_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "check_run_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Gets a single check run using its `id`. To get a check run, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.",
      "idName": "get",
      "documentationUrl": "https://developer.github.com/v3/checks/runs/#get-a-single-check-run"
    },
    {
      "name": "List annotations for a check run",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/check-runs/:check_run_id/annotations",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "check_run_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Lists annotations for a check run using the annotation `id`. To list annotations for a check run, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.",
      "idName": "list-annotations",
      "documentationUrl": "https://developer.github.com/v3/checks/runs/#list-annotations-for-a-check-run"
    },
    {
      "name": "Get a single check suite",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/check-suites/:check_suite_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "check_suite_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Gets a single check suite using its `id`. Your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites.",
      "idName": "get-suite",
      "documentationUrl": "https://developer.github.com/v3/checks/suites/#get-a-single-check-suite"
    },
    {
      "name": "List check suites for a specific ref",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/commits/:ref/check-suites",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "ref",
          "type": "string",
          "description": "The `ref` can be a SHA, branch name, or a tag name.",
          "required": true,
          "location": "url"
        },
        {
          "name": "app_id",
          "type": "integer",
          "description": "Filters check suites by GitHub App `id`.",
          "required": false,
          "location": "query"
        },
        {
          "name": "check_name",
          "type": "string",
          "description": "Filters checks suites by the name of the [check run](https://developer.github.com/v3/checks/runs/).",
          "required": false,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Lists the check suites that were created for a commit `ref`. Your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites.",
      "idName": "list-suites-for-ref",
      "documentationUrl": "https://developer.github.com/v3/checks/suites/#list-check-suites-for-a-specific-ref"
    },
    {
      "name": "Set preferences for check suites on a repository",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/repos/:owner/:repo/check-suites/preferences",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "auto_trigger_checks",
          "type": "object[]",
          "description": "Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [`auto_trigger_checks` object](#auto_trigger_checks-object) description for details.",
          "required": false,
          "location": "body"
        },
        {
          "name": "auto_trigger_checks[].app_id",
          "type": "integer",
          "description": "The `id` of the GitHub App.",
          "required": true,
          "location": "body"
        },
        {
          "name": "auto_trigger_checks[].setting",
          "type": "boolean",
          "description": "Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.",
          "default": true,
          "required": true,
          "location": "body"
        }
      ],
      "description": "Changes the default automatic flow when creating check suites. By default, the CheckSuiteEvent is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://developer.github.com/v3/checks/suites/#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.",
      "idName": "set-prefs-for-suites-on-repo",
      "documentationUrl": "https://developer.github.com/v3/checks/suites/#set-preferences-for-check-suites-on-a-repository"
    },
    {
      "name": "Create a check suite",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/check-suites",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "head_sha",
          "type": "string",
          "description": "The sha of the head commit.",
          "required": true,
          "location": "body"
        },
        {
          "name": "head_branch",
          "type": "string",
          "description": "The name of the head branch where the code changes are implemented.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "By default, check suites are automatically created when you create a [check run](https://developer.github.com/v3/checks/runs/). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using \"[Set preferences for check suites on a repository](https://developer.github.com/v3/checks/suites/#set-preferences-for-check-suites-on-a-repository)\". Your GitHub App must have the `checks:write` permission to create check suites.",
      "idName": "create-suite",
      "documentationUrl": "https://developer.github.com/v3/checks/suites/#create-a-check-suite"
    },
    {
      "name": "Request check suites",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/check-suite-requests",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "head_sha",
          "type": "string",
          "description": "**Required.** The sha of the head commit.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "Triggers GitHub to create a new check suite, without pushing new code to a repository. To request a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.",
      "idName": "request-suites",
      "documentationUrl": "https://developer.github.com/v3/checks/suites/#request-check-suites"
    }
  ],
  "gists": [
    {
      "method": "GET",
      "path": "/users/:username/gists",
      "enabledForApps": false,
      "name": "List public gists for the specified user",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "since",
          "type": "string",
          "description": "A timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.",
          "required": false,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-public-for-user",
      "documentationUrl": "https://developer.github.com/v3/gists/#list-a-users-gists"
    },
    {
      "method": "GET",
      "path": "/gists",
      "enabledForApps": false,
      "name": "List the authenticated user's gists or if called anonymously, this will return all public gists",
      "params": [
        {
          "name": "since",
          "type": "string",
          "description": "A timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.",
          "required": false,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-user-or-if-called-anonymously-will-return-public",
      "documentationUrl": "https://developer.github.com/v3/gists/#list-a-users-gists"
    },
    {
      "name": "List all public gists",
      "enabledForApps": false,
      "method": "GET",
      "path": "/gists/public",
      "params": [
        {
          "name": "since",
          "type": "string",
          "description": "A timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.",
          "required": false,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List all public gists sorted by most recently updated to least recently updated.\n\nNote: With [pagination](https://developer.github.com/v3/#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.",
      "idName": "list-public",
      "documentationUrl": "https://developer.github.com/v3/gists/#list-all-public-gists"
    },
    {
      "name": "List starred gists",
      "enabledForApps": false,
      "method": "GET",
      "path": "/gists/starred",
      "params": [
        {
          "name": "since",
          "type": "string",
          "description": "A timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.",
          "required": false,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List the authenticated user's starred gists:",
      "idName": "list-starred",
      "documentationUrl": "https://developer.github.com/v3/gists/#list-starred-gists"
    },
    {
      "name": "Get a single gist",
      "enabledForApps": false,
      "method": "GET",
      "path": "/gists/:gist_id",
      "params": [
        {
          "name": "gist_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get",
      "documentationUrl": "https://developer.github.com/v3/gists/#get-a-single-gist"
    },
    {
      "name": "Get a specific revision of a gist",
      "enabledForApps": false,
      "method": "GET",
      "path": "/gists/:gist_id/:sha",
      "params": [
        {
          "name": "gist_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "sha",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-revision",
      "documentationUrl": "https://developer.github.com/v3/gists/#get-a-specific-revision-of-a-gist"
    },
    {
      "name": "Create a gist",
      "enabledForApps": false,
      "method": "POST",
      "path": "/gists",
      "params": [
        {
          "name": "files",
          "type": "object",
          "description": "Files that make up this gist.",
          "required": true,
          "location": "body"
        },
        {
          "name": "description",
          "type": "string",
          "description": "A description of the gist.",
          "required": false,
          "location": "body"
        },
        {
          "name": "public",
          "type": "boolean",
          "description": "Indicates whether the gist is public.",
          "default": false,
          "required": false,
          "location": "body"
        }
      ],
      "description": "The keys in the `files` object are the `string` filename, and the value is another `object` with a key of `content`, and a value of the file contents. For example:\n\n**Note:** Don't name your files \"gistfile\" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.",
      "idName": "create",
      "documentationUrl": "https://developer.github.com/v3/gists/#create-a-gist"
    },
    {
      "name": "Edit a gist",
      "enabledForApps": false,
      "method": "PATCH",
      "path": "/gists/:gist_id",
      "params": [
        {
          "name": "gist_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "description",
          "type": "string",
          "description": "A description of the gist.",
          "required": false,
          "location": "body"
        },
        {
          "name": "files",
          "type": "object",
          "description": "Files that make up this gist.",
          "required": false,
          "location": "body"
        },
        {
          "name": "content",
          "type": "string",
          "description": "Updated file contents.",
          "required": false,
          "location": "body"
        },
        {
          "name": "filename",
          "type": "string",
          "description": "New name for this file.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "The keys in the `files` object are the `string` filename. The value is another `object` with a key of `content` (indicating the new contents), or `filename` (indicating the new filename). For example:\n\n**Note**: All files from the previous version of the gist are carried over by default if not included in the object. Deletes can be performed by including the filename with a `null` object.",
      "idName": "edit",
      "documentationUrl": "https://developer.github.com/v3/gists/#edit-a-gist"
    },
    {
      "name": "List gist commits",
      "enabledForApps": false,
      "method": "GET",
      "path": "/gists/:gist_id/commits",
      "params": [
        {
          "name": "gist_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-commits",
      "documentationUrl": "https://developer.github.com/v3/gists/#list-gist-commits"
    },
    {
      "name": "Star a gist",
      "enabledForApps": false,
      "method": "PUT",
      "path": "/gists/:gist_id/star",
      "params": [
        {
          "name": "gist_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
      "idName": "star",
      "documentationUrl": "https://developer.github.com/v3/gists/#star-a-gist"
    },
    {
      "name": "Unstar a gist",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/gists/:gist_id/star",
      "params": [
        {
          "name": "gist_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "unstar",
      "documentationUrl": "https://developer.github.com/v3/gists/#unstar-a-gist"
    },
    {
      "name": "Check if a gist is starred",
      "enabledForApps": false,
      "method": "GET",
      "path": "/gists/:gist_id/star",
      "params": [
        {
          "name": "gist_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "check-is-starred",
      "documentationUrl": "https://developer.github.com/v3/gists/#check-if-a-gist-is-starred"
    },
    {
      "name": "Fork a gist",
      "enabledForApps": false,
      "method": "POST",
      "path": "/gists/:gist_id/forks",
      "params": [
        {
          "name": "gist_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "**Note**: This was previously `/gists/:gist_id/fork`.",
      "idName": "fork",
      "documentationUrl": "https://developer.github.com/v3/gists/#fork-a-gist"
    },
    {
      "name": "List gist forks",
      "enabledForApps": false,
      "method": "GET",
      "path": "/gists/:gist_id/forks",
      "params": [
        {
          "name": "gist_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-forks",
      "documentationUrl": "https://developer.github.com/v3/gists/#list-gist-forks"
    },
    {
      "name": "Delete a gist",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/gists/:gist_id",
      "params": [
        {
          "name": "gist_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "delete",
      "documentationUrl": "https://developer.github.com/v3/gists/#delete-a-gist"
    },
    {
      "name": "List comments on a gist",
      "enabledForApps": false,
      "method": "GET",
      "path": "/gists/:gist_id/comments",
      "params": [
        {
          "name": "gist_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-comments",
      "documentationUrl": "https://developer.github.com/v3/gists/comments/#list-comments-on-a-gist"
    },
    {
      "name": "Get a single comment",
      "enabledForApps": false,
      "method": "GET",
      "path": "/gists/:gist_id/comments/:comment_id",
      "params": [
        {
          "name": "gist_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-comment",
      "documentationUrl": "https://developer.github.com/v3/gists/comments/#get-a-single-comment"
    },
    {
      "name": "Create a comment",
      "enabledForApps": false,
      "method": "POST",
      "path": "/gists/:gist_id/comments",
      "params": [
        {
          "name": "gist_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "body",
          "type": "string",
          "description": "The comment text.",
          "required": true,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "create-comment",
      "documentationUrl": "https://developer.github.com/v3/gists/comments/#create-a-comment"
    },
    {
      "name": "Edit a comment",
      "enabledForApps": false,
      "method": "PATCH",
      "path": "/gists/:gist_id/comments/:comment_id",
      "params": [
        {
          "name": "gist_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "body",
          "type": "string",
          "description": "The comment text.",
          "required": true,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "edit-comment",
      "documentationUrl": "https://developer.github.com/v3/gists/comments/#edit-a-comment"
    },
    {
      "name": "Delete a comment",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/gists/:gist_id/comments/:comment_id",
      "params": [
        {
          "name": "gist_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "delete-comment",
      "documentationUrl": "https://developer.github.com/v3/gists/comments/#delete-a-comment"
    }
  ],
  "git": [
    {
      "name": "Get a blob",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/git/blobs/:file_sha",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "file_sha",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "The `content` in the response will always be Base64 encoded.\n\n_Note_: This API supports blobs up to 100 megabytes in size.",
      "idName": "get-blob",
      "documentationUrl": "https://developer.github.com/v3/git/blobs/#get-a-blob"
    },
    {
      "name": "Create a blob",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/git/blobs",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "content",
          "type": "string",
          "description": "The new blob's content.",
          "required": true,
          "location": "body"
        },
        {
          "name": "encoding",
          "type": "string",
          "description": "The encoding used for `content`. Currently, `\"utf-8\"` and `\"base64\"` are supported.",
          "default": "\"utf-8\"",
          "required": false,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "create-blob",
      "documentationUrl": "https://developer.github.com/v3/git/blobs/#create-a-blob"
    },
    {
      "name": "Get a commit",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/git/commits/:commit_sha",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "commit_sha",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).",
      "idName": "get-commit",
      "documentationUrl": "https://developer.github.com/v3/git/commits/#get-a-commit"
    },
    {
      "name": "Create a commit",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/git/commits",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "message",
          "type": "string",
          "description": "The commit message",
          "required": true,
          "location": "body"
        },
        {
          "name": "tree",
          "type": "string",
          "description": "The SHA of the tree object this commit points to",
          "required": true,
          "location": "body"
        },
        {
          "name": "parents",
          "type": "string[]",
          "description": "The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.",
          "required": true,
          "location": "body"
        },
        {
          "name": "committer",
          "type": "object",
          "description": "object containing information about the committer.",
          "location": "body"
        },
        {
          "name": "author",
          "type": "object",
          "description": "object containing information about the author.",
          "location": "body"
        }
      ],
      "description": "Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).\n\nThe `committer` section is optional and will be filled with the `author` data if omitted. If the `author` section is omitted, it will be filled in with the authenticated user's information and the current date.\n\nBoth the `author` and `committer` parameters have the same keys:\n\n| name  | type   | description                                                                                                             |\n| ----- | ------ | ----------------------------------------------------------------------------------------------------------------------- |\n| name  | string | The name of the author (or committer) of the commit                                                                     |\n| email | string | The email of the author (or committer) of the commit                                                                    |\n| date  | string | Indicates when this commit was authored (or committed). This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. |\n\nYou can also provide an optional string `signature` parameter. This value will be added to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database.\n\n**Note**: To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.\n\nIn this example, the payload that the signature is over would have been:\n\n",
      "idName": "create-commit",
      "documentationUrl": "https://developer.github.com/v3/git/commits/#create-a-commit"
    },
    {
      "name": "Get a Reference",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/git/refs/:ref",
      "description": "Returns a branch or tag reference. Other than the [REST API](https://developer.github.com/v3/git/refs/#get-a-reference) it always returns a single reference. If the REST API returns with an array then the method responds with an error.",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "ref",
          "type": "string",
          "description": "Must be formatted as `heads/branch`, not just `branch`",
          "required": true,
          "location": "url"
        }
      ],
      "isOverride": true,
      "idName": "get-ref",
      "documentationUrl": "https://developer.github.com/v3/git/refs/#get-a-reference"
    },
    {
      "name": "Get all References",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/git/refs/:namespace",
      "description": "This will return an array of all the references on the system, including things like notes and stashes if they exist on the server",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "namespace",
          "type": "string",
          "description": "Filter by sub-namespace (reference prefix). Most commen examples would be `'heads/'` and `'tags/'` to retrieve branches or tags",
          "required": false,
          "location": "url"
        }
      ],
      "isOverride": true,
      "idName": "get-refs",
      "documentationUrl": "https://developer.github.com/v3/git/refs/#get-all-references"
    },
    {
      "name": "Create a reference",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/git/refs",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "ref",
          "type": "string",
          "description": "The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.",
          "required": true,
          "location": "body"
        },
        {
          "name": "sha",
          "type": "string",
          "description": "The SHA1 value for this reference.",
          "required": true,
          "location": "body"
        }
      ],
      "description": "Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.",
      "idName": "create-ref",
      "documentationUrl": "https://developer.github.com/v3/git/refs/#create-a-reference"
    },
    {
      "name": "Update a reference",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/repos/:owner/:repo/git/refs/:ref",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "ref",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "sha",
          "type": "string",
          "description": "The SHA1 value to set this reference to",
          "required": true,
          "location": "body"
        },
        {
          "name": "force",
          "type": "boolean",
          "description": "Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.",
          "default": false,
          "required": false,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "update-ref",
      "documentationUrl": "https://developer.github.com/v3/git/refs/#update-a-reference"
    },
    {
      "name": "Delete a reference",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/git/refs/:ref",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "ref",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Example: Deleting a branch:\n\n```\nDELETE /repos/octocat/Hello-World/git/refs/heads/feature-a\n```\n\nExample: Deleting a tag:\n\n```\nDELETE /repos/octocat/Hello-World/git/refs/tags/v1.0\n```",
      "idName": "delete-ref",
      "documentationUrl": "https://developer.github.com/v3/git/refs/#delete-a-reference"
    },
    {
      "name": "Get a tag",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/git/tags/:tag_sha",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "tag_sha",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-tag",
      "documentationUrl": "https://developer.github.com/v3/git/tags/#get-a-tag"
    },
    {
      "name": "Create a tag object",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/git/tags",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "tag",
          "type": "string",
          "description": "The tag's name. This is typically a version (e.g., \"v0.0.1\").",
          "required": true,
          "location": "body"
        },
        {
          "name": "message",
          "type": "string",
          "description": "The tag message.",
          "required": true,
          "location": "body"
        },
        {
          "name": "object",
          "type": "string",
          "description": "The SHA of the git object this is tagging.",
          "required": true,
          "location": "body"
        },
        {
          "name": "type",
          "type": "string",
          "description": "The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.",
          "required": true,
          "enum": [
            "commit",
            "tree",
            "blob"
          ],
          "location": "body"
        },
        {
          "name": "tagger",
          "type": "object",
          "description": "An object with information about the individual creating the tag.",
          "required": false,
          "location": "body"
        },
        {
          "name": "tagger.name",
          "type": "string",
          "description": "The name of the author of the tag",
          "required": false,
          "location": "body"
        },
        {
          "name": "tagger.email",
          "type": "string",
          "description": "The email of the author of the tag",
          "required": false,
          "location": "body"
        },
        {
          "name": "tagger.date",
          "type": "string",
          "description": "When this object was tagged. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://developer.github.com/v3/git/refs/#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://developer.github.com/v3/git/refs/#create-a-reference) the tag reference - this call would be unnecessary.",
      "idName": "create-tag",
      "documentationUrl": "https://developer.github.com/v3/git/tags/#create-a-tag-object"
    },
    {
      "name": "Get a tree",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/git/trees/:tree_sha",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "tree_sha",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "recursive",
          "type": "integer",
          "description": "",
          "enum": [
            1
          ],
          "location": "query"
        }
      ],
      "description": "If `truncated` in the response is `true`, the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, omit the `recursive` parameter, and fetch one sub-tree at a time. If you need to fetch even more items, you can clone the repository and iterate over the Git data locally.",
      "documentationUrl": "https://developer.github.com/v3/git/trees/#get-a-tree",
      "isOverride": true,
      "idName": "get-tree"
    },
    {
      "name": "Create a tree",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/git/trees",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "tree",
          "type": "object[]",
          "description": "Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure",
          "required": true,
          "location": "body"
        },
        {
          "name": "tree[].path",
          "type": "string",
          "description": "The file referenced in the tree",
          "required": false,
          "location": "body"
        },
        {
          "name": "tree[].mode",
          "type": "string",
          "description": "The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink",
          "required": false,
          "enum": [
            "100644",
            "100755",
            "040000",
            "160000",
            "120000"
          ],
          "location": "body"
        },
        {
          "name": "tree[].type",
          "type": "string",
          "description": "Either `blob`, `tree`, or `commit`",
          "required": false,
          "enum": [
            "blob",
            "tree",
            "commit"
          ],
          "location": "body"
        },
        {
          "name": "tree[].sha",
          "type": "string",
          "description": "The SHA1 checksum ID of the object in the tree",
          "required": false,
          "location": "body"
        },
        {
          "name": "tree[].content",
          "type": "string",
          "description": "The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.",
          "required": false,
          "location": "body"
        },
        {
          "name": "base_tree",
          "type": "string",
          "description": "The SHA1 of the tree you want to update with new data. If you don't set this, the commit will be created on top of everything; however, it will only contain your change, the rest of your files will show up as deleted.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "The tree creation API will take nested entries as well. If both a tree and a nested path modifying that tree are specified, it will overwrite the contents of that tree with the new path contents and write a new tree out.",
      "idName": "create-tree",
      "documentationUrl": "https://developer.github.com/v3/git/trees/#create-a-tree"
    }
  ],
  "apps": [
    {
      "name": "Get a single GitHub App",
      "enabledForApps": true,
      "method": "GET",
      "path": "/apps/:app_slug",
      "params": [
        {
          "name": "app_slug",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "**Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).",
      "idName": "get",
      "documentationUrl": "https://developer.github.com/v3/apps/#get-a-single-github-app"
    },
    {
      "name": "Get the authenticated GitHub App",
      "enabledForApps": true,
      "method": "GET",
      "path": "/app",
      "params": [],
      "description": "Returns the GitHub App associated with the [authentication credentials](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps#authenticating-as-a-github-app) used.",
      "idName": "get",
      "documentationUrl": "https://developer.github.com/v3/apps/#get-the-authenticated-github-app"
    },
    {
      "name": "Find installations",
      "enabledForApps": true,
      "method": "GET",
      "path": "/app/installations",
      "params": [
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "The permissions the installation has are included under the `permissions` key.",
      "idName": "list-installations",
      "documentationUrl": "https://developer.github.com/v3/apps/#find-installations"
    },
    {
      "name": "Get a single installation",
      "enabledForApps": true,
      "method": "GET",
      "path": "/app/installations/:installation_id",
      "params": [
        {
          "name": "installation_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-installation",
      "documentationUrl": "https://developer.github.com/v3/apps/#get-a-single-installation"
    },
    {
      "name": "List installations for user",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/installations",
      "params": [
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Lists installations in a repository that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n\nThe permissions the installation has are included under the `permissions` key.",
      "idName": "list-installations",
      "documentationUrl": "https://developer.github.com/v3/apps/#list-installations-for-user"
    },
    {
      "name": "Create a new installation token",
      "enabledForApps": true,
      "method": "POST",
      "path": "/installations/:installation_id/access_tokens",
      "params": [
        {
          "name": "installation_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Creates an access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token.",
      "idName": "create-installation-token",
      "documentationUrl": "https://developer.github.com/v3/apps/#create-a-new-installation-token"
    },
    {
      "name": "List repositories",
      "enabledForApps": true,
      "method": "GET",
      "path": "/installation/repositories",
      "params": [
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.",
      "idName": "list-repos",
      "documentationUrl": "https://developer.github.com/v3/apps/installations/#list-repositories"
    },
    {
      "name": "List repositories accessible to the user for an installation",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/installations/:installation_id/repositories",
      "params": [
        {
          "name": "installation_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.\n\nThe access the user has to each repository is included in the hash under the `permissions` key.",
      "idName": "list-repos-accessible-to-user-for-installation",
      "documentationUrl": "https://developer.github.com/v3/apps/installations/#list-repositories-accessible-to-the-user-for-an-installation"
    },
    {
      "name": "Add repository to installation",
      "enabledForApps": false,
      "method": "PUT",
      "path": "/user/installations/:installation_id/repositories/:repository_id",
      "params": [
        {
          "name": "installation_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repository_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Add a single repository to an installation.\n\nThe authenticated user must have admin access to the repository.",
      "idName": "add-repo-to-installation",
      "documentationUrl": "https://developer.github.com/v3/apps/installations/#add-repository-to-installation"
    },
    {
      "name": "Remove repository from installation",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/user/installations/:installation_id/repositories/:repository_id",
      "params": [
        {
          "name": "installation_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repository_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Remove a single repository from an installation.\n\nThe authenticated user must have admin access to the repository.",
      "idName": "remove-repo-from-installation",
      "documentationUrl": "https://developer.github.com/v3/apps/installations/#remove-repository-from-installation"
    },
    {
      "name": "List all plans for your Marketplace listing",
      "enabledForApps": false,
      "method": "GET",
      "path": "/marketplace_listing/plans",
      "params": [
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-plans",
      "documentationUrl": "https://developer.github.com/v3/apps/marketplace/#list-all-plans-for-your-marketplace-listing"
    },
    {
      "name": "List all plans for your Marketplace listing (stubbed)",
      "enabledForApps": false,
      "method": "GET",
      "path": "/marketplace_listing/stubbed/plans",
      "params": [
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-plans-stubbed",
      "documentationUrl": "https://developer.github.com/v3/apps/marketplace/#list-all-plans-for-your-marketplace-listing"
    },
    {
      "name": "List all GitHub accounts (user or organization) on a specific plan",
      "enabledForApps": false,
      "method": "GET",
      "path": "/marketplace_listing/plans/:plan_id/accounts",
      "params": [
        {
          "name": "plan_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "Sorts the GitHub accounts by the date they were created or last updated. Can be one of `created` or `updated`.",
          "default": "created",
          "required": false,
          "enum": [
            "created",
            "updated"
          ],
          "location": "query"
        },
        {
          "name": "direction",
          "type": "string",
          "description": "To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Returns any accounts associated with a plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased.",
      "idName": "list-accounts-user-or-org-on-plan",
      "documentationUrl": "https://developer.github.com/v3/apps/marketplace/#list-all-github-accounts-user-or-organization-on-a-specific-plan"
    },
    {
      "name": "List all GitHub accounts (user or organization) on a specific plan (stubbed)",
      "enabledForApps": false,
      "method": "GET",
      "path": "/marketplace_listing/stubbed/plans/:plan_id/accounts",
      "params": [
        {
          "name": "plan_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "Sorts the GitHub accounts by the date they were created or last updated. Can be one of `created` or `updated`.",
          "default": "created",
          "required": false,
          "enum": [
            "created",
            "updated"
          ],
          "location": "query"
        },
        {
          "name": "direction",
          "type": "string",
          "description": "To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Returns any accounts associated with a plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased.",
      "idName": "list-accounts-user-or-org-on-plan-stubbed",
      "documentationUrl": "https://developer.github.com/v3/apps/marketplace/#list-all-github-accounts-user-or-organization-on-a-specific-plan"
    },
    {
      "name": "Check if a GitHub account is associated with any Marketplace listing",
      "enabledForApps": false,
      "method": "GET",
      "path": "/marketplace_listing/accounts/:account_id",
      "params": [
        {
          "name": "account_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Checks whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App.",
      "idName": "check-account-is-associated-with-any",
      "documentationUrl": "https://developer.github.com/v3/apps/marketplace/#check-if-a-github-account-is-associated-with-any-marketplace-listing"
    },
    {
      "name": "Check if a GitHub account is associated with any Marketplace listing (stubbed)",
      "enabledForApps": false,
      "method": "GET",
      "path": "/marketplace_listing/stubbed/accounts/:account_id",
      "params": [
        {
          "name": "account_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Checks whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App.",
      "idName": "check-account-is-associated-with-any-stubbed",
      "documentationUrl": "https://developer.github.com/v3/apps/marketplace/#check-if-a-github-account-is-associated-with-any-marketplace-listing"
    },
    {
      "name": "Get a user's Marketplace purchases",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/marketplace_purchases",
      "params": [
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Returns only active subscriptions. You need to authenticate this call with the user's OAuth token.",
      "idName": "get-user-marketplace-purchases",
      "documentationUrl": "https://developer.github.com/v3/apps/marketplace/#get-a-users-marketplace-purchases"
    },
    {
      "name": "Get a user's Marketplace purchases (stubbed)",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/marketplace_purchases/stubbed",
      "params": [
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Returns only active subscriptions. You need to authenticate this call with the user's OAuth token.",
      "idName": "get-user-marketplace-purchases-stubbed",
      "documentationUrl": "https://developer.github.com/v3/apps/marketplace/#get-a-users-marketplace-purchases"
    }
  ],
  "issues": [
    {
      "method": "GET",
      "path": "/issues",
      "enabledForApps": false,
      "name": "List all issues assigned to the authenticated user across all visible repositories including owned repositories, member repositories, and organization repositories",
      "params": [
        {
          "name": "filter",
          "type": "string",
          "description": "Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation",
          "default": "assigned",
          "required": false,
          "enum": [
            "assigned",
            "created",
            "mentioned",
            "subscribed",
            "all"
          ],
          "location": "query"
        },
        {
          "name": "state",
          "type": "string",
          "description": "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
          "default": "open",
          "required": false,
          "enum": [
            "open",
            "closed",
            "all"
          ],
          "location": "query"
        },
        {
          "name": "labels",
          "type": "string",
          "description": "A list of comma separated label names. Example: `bug,ui,@high`",
          "required": false,
          "location": "query"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "What to sort results by. Can be either `created`, `updated`, `comments`.",
          "default": "created",
          "required": false,
          "enum": [
            "created",
            "updated",
            "comments"
          ],
          "location": "query"
        },
        {
          "name": "direction",
          "type": "string",
          "description": "The direction of the sort. Can be either `asc` or `desc`.",
          "default": "desc",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "since",
          "type": "string",
          "description": "Only issues updated at or after this time are returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "required": false,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.\n\nBe aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.\n\n\n\n**Note:** If a user opened an issue via a GitHub App, the `performed_via_github_app` key contains information on that GitHub App.",
      "idName": "list-assigned-to-user-across-visible-repos-including-owned-repositories-member-repositories-org-repositories",
      "documentationUrl": "https://developer.github.com/v3/issues/#list-issues"
    },
    {
      "method": "GET",
      "path": "/user/issues",
      "enabledForApps": false,
      "name": "List all issues across owned and member repositories assigned to the authenticated user",
      "params": [
        {
          "name": "filter",
          "type": "string",
          "description": "Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation",
          "default": "assigned",
          "required": false,
          "enum": [
            "assigned",
            "created",
            "mentioned",
            "subscribed",
            "all"
          ],
          "location": "query"
        },
        {
          "name": "state",
          "type": "string",
          "description": "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
          "default": "open",
          "required": false,
          "enum": [
            "open",
            "closed",
            "all"
          ],
          "location": "query"
        },
        {
          "name": "labels",
          "type": "string",
          "description": "A list of comma separated label names. Example: `bug,ui,@high`",
          "required": false,
          "location": "query"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "What to sort results by. Can be either `created`, `updated`, `comments`.",
          "default": "created",
          "required": false,
          "enum": [
            "created",
            "updated",
            "comments"
          ],
          "location": "query"
        },
        {
          "name": "direction",
          "type": "string",
          "description": "The direction of the sort. Can be either `asc` or `desc`.",
          "default": "desc",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "since",
          "type": "string",
          "description": "Only issues updated at or after this time are returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "required": false,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.\n\nBe aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.\n\n\n\n**Note:** If a user opened an issue via a GitHub App, the `performed_via_github_app` key contains information on that GitHub App.",
      "idName": "list-across-owned-member-repos-assigned-to-user",
      "documentationUrl": "https://developer.github.com/v3/issues/#list-issues"
    },
    {
      "method": "GET",
      "path": "/orgs/:org/issues",
      "enabledForApps": false,
      "name": "List all issues for a given organization assigned to the authenticated user",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "filter",
          "type": "string",
          "description": "Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation",
          "default": "assigned",
          "required": false,
          "enum": [
            "assigned",
            "created",
            "mentioned",
            "subscribed",
            "all"
          ],
          "location": "query"
        },
        {
          "name": "state",
          "type": "string",
          "description": "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
          "default": "open",
          "required": false,
          "enum": [
            "open",
            "closed",
            "all"
          ],
          "location": "query"
        },
        {
          "name": "labels",
          "type": "string",
          "description": "A list of comma separated label names. Example: `bug,ui,@high`",
          "required": false,
          "location": "query"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "What to sort results by. Can be either `created`, `updated`, `comments`.",
          "default": "created",
          "required": false,
          "enum": [
            "created",
            "updated",
            "comments"
          ],
          "location": "query"
        },
        {
          "name": "direction",
          "type": "string",
          "description": "The direction of the sort. Can be either `asc` or `desc`.",
          "default": "desc",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "since",
          "type": "string",
          "description": "Only issues updated at or after this time are returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "required": false,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.\n\nBe aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.\n\n\n\n**Note:** If a user opened an issue via a GitHub App, the `performed_via_github_app` key contains information on that GitHub App.",
      "idName": "list-for-given-org-assigned-to-user",
      "documentationUrl": "https://developer.github.com/v3/issues/#list-issues"
    },
    {
      "name": "List issues for a repository",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/issues",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "milestone",
          "type": "string",
          "description": "If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.",
          "required": false,
          "location": "query"
        },
        {
          "name": "state",
          "type": "string",
          "description": "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
          "default": "open",
          "required": false,
          "enum": [
            "open",
            "closed",
            "all"
          ],
          "location": "query"
        },
        {
          "name": "assignee",
          "type": "string",
          "description": "Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.",
          "required": false,
          "location": "query"
        },
        {
          "name": "creator",
          "type": "string",
          "description": "The user that created the issue.",
          "required": false,
          "location": "query"
        },
        {
          "name": "mentioned",
          "type": "string",
          "description": "A user that's mentioned in the issue.",
          "required": false,
          "location": "query"
        },
        {
          "name": "labels",
          "type": "string",
          "description": "A list of comma separated label names. Example: `bug,ui,@high`",
          "required": false,
          "location": "query"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "What to sort results by. Can be either `created`, `updated`, `comments`.",
          "default": "created",
          "required": false,
          "enum": [
            "created",
            "updated",
            "comments"
          ],
          "location": "query"
        },
        {
          "name": "direction",
          "type": "string",
          "description": "The direction of the sort. Can be either `asc` or `desc`.",
          "default": "desc",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "since",
          "type": "string",
          "description": "Only issues updated at or after this time are returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "required": false,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.\n\nBe aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.\n\n\n\n**Note:** If a user opened an issue via a GitHub App, the `performed_via_github_app` key contains information on that GitHub App.",
      "idName": "list-for-repo",
      "documentationUrl": "https://developer.github.com/v3/issues/#list-issues-for-a-repository"
    },
    {
      "name": "Get a single issue",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/issues/:number",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.\n\nBe aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.",
      "idName": "get",
      "documentationUrl": "https://developer.github.com/v3/issues/#get-a-single-issue"
    },
    {
      "name": "Create an issue",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/issues",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "title",
          "type": "string",
          "description": "The title of the issue.",
          "required": true,
          "location": "body"
        },
        {
          "name": "body",
          "type": "string",
          "description": "The contents of the issue.",
          "required": false,
          "location": "body"
        },
        {
          "name": "assignee",
          "type": "string",
          "description": "Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_",
          "required": false,
          "location": "body"
        },
        {
          "name": "milestone",
          "type": "integer",
          "description": "The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._",
          "required": false,
          "location": "body"
        },
        {
          "name": "labels",
          "type": "string[]",
          "description": "Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._",
          "required": false,
          "location": "body"
        },
        {
          "name": "assignees",
          "type": "string[]",
          "description": "Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._",
          "required": false,
          "location": "body"
        }
      ],
      "description": "Any user with pull access to a repository can create an issue.",
      "idName": "create",
      "documentationUrl": "https://developer.github.com/v3/issues/#create-an-issue"
    },
    {
      "name": "Edit an issue",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/repos/:owner/:repo/issues/:number",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "title",
          "type": "string",
          "description": "The title of the issue.",
          "required": false,
          "location": "body"
        },
        {
          "name": "body",
          "type": "string",
          "description": "The contents of the issue.",
          "required": false,
          "location": "body"
        },
        {
          "name": "assignee",
          "type": "string",
          "description": "Login for the user that this issue should be assigned to. **This field is deprecated.**",
          "required": false,
          "location": "body"
        },
        {
          "name": "state",
          "type": "string",
          "description": "State of the issue. Either `open` or `closed`.",
          "required": false,
          "enum": [
            "open",
            "closed"
          ],
          "location": "body"
        },
        {
          "name": "milestone",
          "type": "integer",
          "description": "The `number` of the milestone to associate this issue with or `null` to remove current. _NOTE: Only users with push access can set the milestone for issues. The milestone is silently dropped otherwise._",
          "required": false,
          "allowNull": true,
          "location": "body"
        },
        {
          "name": "labels",
          "type": "string[]",
          "description": "Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._",
          "required": false,
          "location": "body"
        },
        {
          "name": "assignees",
          "type": "string[]",
          "description": "Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._",
          "required": false,
          "location": "body"
        }
      ],
      "description": "Issue owners and users with push access can edit an issue.",
      "idName": "edit",
      "documentationUrl": "https://developer.github.com/v3/issues/#edit-an-issue"
    },
    {
      "name": "Lock an issue",
      "enabledForApps": true,
      "method": "PUT",
      "path": "/repos/:owner/:repo/issues/:number/lock",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "lock_reason",
          "type": "string",
          "description": "The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  \n\\* `off-topic`  \n\\* `too heated`  \n\\* `resolved`  \n\\* `spam`",
          "required": false,
          "enum": [
            "off-topic",
            "too heated",
            "resolved",
            "spam"
          ],
          "location": "body"
        }
      ],
      "description": "Users with push access can lock an issue or pull request's conversation.\n\nNote that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
      "idName": "lock",
      "documentationUrl": "https://developer.github.com/v3/issues/#lock-an-issue"
    },
    {
      "name": "Unlock an issue",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/issues/:number/lock",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Users with push access can unlock an issue's conversation.",
      "idName": "unlock",
      "documentationUrl": "https://developer.github.com/v3/issues/#unlock-an-issue"
    },
    {
      "name": "List assignees",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/assignees",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.",
      "idName": "list-assignees",
      "documentationUrl": "https://developer.github.com/v3/issues/assignees/#list-assignees"
    },
    {
      "name": "Check assignee",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/assignees/:assignee",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "assignee",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Checks if a user has permission to be assigned to an issue in this repository.\n\nIf the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.\n\nOtherwise a `404` status code is returned.",
      "idName": "check-assignee",
      "documentationUrl": "https://developer.github.com/v3/issues/assignees/#check-assignee"
    },
    {
      "name": "Add assignees to an issue",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/issues/:number/assignees",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "assignees",
          "type": "string[]",
          "description": "Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._",
          "required": false,
          "location": "body"
        }
      ],
      "description": "Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.\n\nThis example adds two assignees to the existing `octocat` assignee.",
      "idName": "add-assignees",
      "documentationUrl": "https://developer.github.com/v3/issues/assignees/#add-assignees-to-an-issue"
    },
    {
      "name": "Remove assignees from an issue",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/issues/:number/assignees",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "assignees",
          "type": "string[]",
          "description": "Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._",
          "required": false,
          "location": "body"
        }
      ],
      "description": "Removes one or more assignees from an issue.\n\nThis example removes two of three assignees, leaving the `octocat` assignee.",
      "idName": "remove-assignees",
      "documentationUrl": "https://developer.github.com/v3/issues/assignees/#remove-assignees-from-an-issue"
    },
    {
      "name": "List comments on an issue",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/issues/:number/comments",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "since",
          "type": "string",
          "description": "Only comments updated at or after this time are returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "required": false,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Issue Comments are ordered by ascending ID.",
      "idName": "list-comments",
      "documentationUrl": "https://developer.github.com/v3/issues/comments/#list-comments-on-an-issue"
    },
    {
      "name": "List comments in a repository",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/issues/comments",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "Either `created` or `updated`.",
          "default": "created",
          "required": false,
          "enum": [
            "created",
            "updated"
          ],
          "location": "query"
        },
        {
          "name": "direction",
          "type": "string",
          "description": "Either `asc` or `desc`. Ignored without the `sort` parameter.",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "since",
          "type": "string",
          "description": "Only comments updated at or after this time are returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "required": false,
          "location": "query"
        }
      ],
      "description": "By default, Issue Comments are ordered by ascending ID.",
      "idName": "list-comments-for-repo",
      "documentationUrl": "https://developer.github.com/v3/issues/comments/#list-comments-in-a-repository"
    },
    {
      "name": "Get a single comment",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/issues/comments/:comment_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "\n\n**Note:** If a user created an issue comment via a GitHub App, the `performed_via_github_app` key will contain information on that GitHub App.",
      "idName": "get-comment",
      "documentationUrl": "https://developer.github.com/v3/issues/comments/#get-a-single-comment"
    },
    {
      "name": "Create a comment",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/issues/:number/comments",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "body",
          "type": "string",
          "description": "The contents of the comment.",
          "required": true,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "create-comment",
      "documentationUrl": "https://developer.github.com/v3/issues/comments/#create-a-comment"
    },
    {
      "name": "Edit a comment",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/repos/:owner/:repo/issues/comments/:comment_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "body",
          "type": "string",
          "description": "The contents of the comment.",
          "required": true,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "edit-comment",
      "documentationUrl": "https://developer.github.com/v3/issues/comments/#edit-a-comment"
    },
    {
      "name": "Delete a comment",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/issues/comments/:comment_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "delete-comment",
      "documentationUrl": "https://developer.github.com/v3/issues/comments/#delete-a-comment"
    },
    {
      "name": "List events for an issue",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/issues/:number/events",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-events",
      "documentationUrl": "https://developer.github.com/v3/issues/events/#list-events-for-an-issue"
    },
    {
      "name": "List events for a repository",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/issues/events",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-events-for-repo",
      "documentationUrl": "https://developer.github.com/v3/issues/events/#list-events-for-a-repository"
    },
    {
      "name": "Get a single event",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/issues/events/:event_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "event_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "\n\n**Note:** If the event was triggered by a user via a GitHub App, the `performed_via_github_app` key will contain information on that GitHub App.",
      "idName": "get-event",
      "documentationUrl": "https://developer.github.com/v3/issues/events/#get-a-single-event"
    },
    {
      "name": "List all labels for this repository",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/labels",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-labels-for-repo",
      "documentationUrl": "https://developer.github.com/v3/issues/labels/#list-all-labels-for-this-repository"
    },
    {
      "name": "Get a single label",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/labels/:name",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "name",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-label",
      "documentationUrl": "https://developer.github.com/v3/issues/labels/#get-a-single-label"
    },
    {
      "name": "Create a label",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/labels",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://a248.e.akamai.net/assets.github.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/).",
          "required": true,
          "location": "body"
        },
        {
          "name": "color",
          "type": "string",
          "description": "The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.",
          "required": true,
          "location": "body"
        },
        {
          "name": "description",
          "type": "string",
          "description": "A short description of the label.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "create-label",
      "documentationUrl": "https://developer.github.com/v3/issues/labels/#create-a-label"
    },
    {
      "name": "Update a label",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/repos/:owner/:repo/labels/:current_name",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "current_name",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://a248.e.akamai.net/assets.github.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/).",
          "required": false,
          "location": "body"
        },
        {
          "name": "color",
          "type": "string",
          "description": "The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.",
          "required": false,
          "location": "body"
        },
        {
          "name": "description",
          "type": "string",
          "description": "A short description of the label.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "update-label",
      "documentationUrl": "https://developer.github.com/v3/issues/labels/#update-a-label"
    },
    {
      "name": "Delete a label",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/labels/:name",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "name",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "delete-label",
      "documentationUrl": "https://developer.github.com/v3/issues/labels/#delete-a-label"
    },
    {
      "name": "List labels on an issue",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/issues/:number/labels",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-labels",
      "documentationUrl": "https://developer.github.com/v3/issues/labels/#list-labels-on-an-issue"
    },
    {
      "name": "Add labels to an issue",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/issues/:number/labels",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "add-labels",
      "documentationUrl": "https://developer.github.com/v3/issues/labels/#add-labels-to-an-issue"
    },
    {
      "name": "Remove a label from an issue",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/issues/:number/labels/:name",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "name",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "remove-label",
      "documentationUrl": "https://developer.github.com/v3/issues/labels/#remove-a-label-from-an-issue"
    },
    {
      "name": "Replace all labels for an issue",
      "enabledForApps": true,
      "method": "PUT",
      "path": "/repos/:owner/:repo/issues/:number/labels",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Sending an empty array (`[]`) will remove all Labels from the Issue.",
      "idName": "replace-labels",
      "documentationUrl": "https://developer.github.com/v3/issues/labels/#replace-all-labels-for-an-issue"
    },
    {
      "name": "Remove all labels from an issue",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/issues/:number/labels",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "remove-labels",
      "documentationUrl": "https://developer.github.com/v3/issues/labels/#remove-all-labels-from-an-issue"
    },
    {
      "name": "Get labels for every issue in a milestone",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/milestones/:number/labels",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "get-labels-for-every-for-milestone",
      "documentationUrl": "https://developer.github.com/v3/issues/labels/#get-labels-for-every-issue-in-a-milestone"
    },
    {
      "name": "List milestones for a repository",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/milestones",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "state",
          "type": "string",
          "description": "The state of the milestone. Either `open`, `closed`, or `all`.",
          "default": "open",
          "required": false,
          "enum": [
            "open",
            "closed",
            "all"
          ],
          "location": "query"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "What to sort results by. Either `due_on` or `completeness`.",
          "default": "due_on",
          "required": false,
          "enum": [
            "due_on",
            "completeness"
          ],
          "location": "query"
        },
        {
          "name": "direction",
          "type": "string",
          "description": "The direction of the sort. Either `asc` or `desc`.",
          "default": "asc",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-milestones-for-repo",
      "documentationUrl": "https://developer.github.com/v3/issues/milestones/#list-milestones-for-a-repository"
    },
    {
      "name": "Get a single milestone",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/milestones/:number",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-milestone",
      "documentationUrl": "https://developer.github.com/v3/issues/milestones/#get-a-single-milestone"
    },
    {
      "name": "Create a milestone",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/milestones",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "title",
          "type": "string",
          "description": "The title of the milestone.",
          "required": true,
          "location": "body"
        },
        {
          "name": "state",
          "type": "string",
          "description": "The state of the milestone. Either `open` or `closed`.",
          "default": "open",
          "required": false,
          "enum": [
            "open",
            "closed"
          ],
          "location": "body"
        },
        {
          "name": "description",
          "type": "string",
          "description": "A description of the milestone.",
          "required": false,
          "location": "body"
        },
        {
          "name": "due_on",
          "type": "string",
          "description": "The milestone due date. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "create-milestone",
      "documentationUrl": "https://developer.github.com/v3/issues/milestones/#create-a-milestone"
    },
    {
      "name": "Update a milestone",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/repos/:owner/:repo/milestones/:number",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "title",
          "type": "string",
          "description": "The title of the milestone.",
          "required": false,
          "location": "body"
        },
        {
          "name": "state",
          "type": "string",
          "description": "The state of the milestone. Either `open` or `closed`.",
          "default": "open",
          "required": false,
          "enum": [
            "open",
            "closed"
          ],
          "location": "body"
        },
        {
          "name": "description",
          "type": "string",
          "description": "A description of the milestone.",
          "required": false,
          "location": "body"
        },
        {
          "name": "due_on",
          "type": "string",
          "description": "The milestone due date. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "update-milestone",
      "documentationUrl": "https://developer.github.com/v3/issues/milestones/#update-a-milestone"
    },
    {
      "name": "Delete a milestone",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/milestones/:number",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "delete-milestone",
      "documentationUrl": "https://developer.github.com/v3/issues/milestones/#delete-a-milestone"
    },
    {
      "name": "List events for an issue",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/issues/:number/timeline",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-events",
      "documentationUrl": "https://developer.github.com/v3/issues/timeline/#list-events-for-an-issue"
    }
  ],
  "migrations": [
    {
      "name": "Start a migration",
      "enabledForApps": false,
      "method": "POST",
      "path": "/orgs/:org/migrations",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repositories",
          "type": "string[]",
          "description": "A list of arrays indicating which repositories should be migrated.",
          "required": true,
          "location": "body"
        },
        {
          "name": "lock_repositories",
          "type": "boolean",
          "description": "Indicates whether repositories should be locked (to prevent manipulation) while migrating data.",
          "default": false,
          "required": false,
          "location": "body"
        },
        {
          "name": "exclude_attachments",
          "type": "boolean",
          "description": "Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).",
          "default": false,
          "required": false,
          "location": "body"
        }
      ],
      "description": "Initiates the generation of a migration archive.",
      "idName": "start",
      "documentationUrl": "https://developer.github.com/v3/migrations/orgs/#start-a-migration"
    },
    {
      "name": "Get a list of migrations",
      "enabledForApps": false,
      "method": "GET",
      "path": "/orgs/:org/migrations",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Lists the most recent migrations.",
      "idName": "get-list",
      "documentationUrl": "https://developer.github.com/v3/migrations/orgs/#get-a-list-of-migrations"
    },
    {
      "name": "Get the status of a migration",
      "enabledForApps": false,
      "method": "GET",
      "path": "/orgs/:org/migrations/:migration_id",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "migration_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Fetches the status of a migration.\n\nThe `state` of a migration can be one of the following values:\n\n*   `pending`, which means the migration hasn't started yet.\n*   `exporting`, which means the migration is in progress.\n*   `exported`, which means the migration finished successfully.\n*   `failed`, which means the migration failed.",
      "idName": "get-status",
      "documentationUrl": "https://developer.github.com/v3/migrations/orgs/#get-the-status-of-a-migration"
    },
    {
      "name": "Download a migration archive",
      "enabledForApps": false,
      "method": "GET",
      "path": "/orgs/:org/migrations/:migration_id/archive",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "migration_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Fetches the URL to a migration archive.\n\n",
      "idName": "download-archive",
      "documentationUrl": "https://developer.github.com/v3/migrations/orgs/#download-a-migration-archive"
    },
    {
      "name": "Delete a migration archive",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/orgs/:org/migrations/:migration_id/archive",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "migration_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Deletes a previous migration archive. Migration archives are automatically deleted after seven days.",
      "idName": "delete-archive",
      "documentationUrl": "https://developer.github.com/v3/migrations/orgs/#delete-a-migration-archive"
    },
    {
      "name": "Unlock a repository",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/orgs/:org/migrations/:migration_id/repos/:repo_name/lock",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "migration_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo_name",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://developer.github.com/v3/repos/#delete-a-repository) when the migration is complete and you no longer need the source data.",
      "idName": "unlock-repo",
      "documentationUrl": "https://developer.github.com/v3/migrations/orgs/#unlock-a-repository"
    },
    {
      "name": "Start an import",
      "enabledForApps": true,
      "method": "PUT",
      "path": "/repos/:owner/:repo/import",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "vcs_url",
          "type": "string",
          "description": "The URL of the originating repository.",
          "required": true,
          "location": "body"
        },
        {
          "name": "vcs",
          "type": "string",
          "description": "The originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or `tfvc`. Please be aware that without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.",
          "required": false,
          "enum": [
            "subversion",
            "git",
            "mercurial",
            "tfvc"
          ],
          "location": "body"
        },
        {
          "name": "vcs_username",
          "type": "string",
          "description": "If authentication is required, the username to provide to `vcs_url`.",
          "required": false,
          "location": "body"
        },
        {
          "name": "vcs_password",
          "type": "string",
          "description": "If authentication is required, the password to provide to `vcs_url`.",
          "required": false,
          "location": "body"
        },
        {
          "name": "tfvc_project",
          "type": "string",
          "description": "For a tfvc import, the name of the project that is being imported.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "Start a source import to a GitHub repository using GitHub Importer.",
      "idName": "start-import",
      "documentationUrl": "https://developer.github.com/v3/migrations/source_imports/#start-an-import"
    },
    {
      "name": "Get import progress",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/import",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "View the progress of an import.\n\n**Import status**\n\nThis section includes details about the possible values of the `status` field of the Import Progress response.\n\nAn import that does not have errors will progress through these steps:\n\n*   `detecting` \\- the \"detection\" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.\n*   `importing` \\- the \"raw\" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).\n*   `mapping` \\- the \"rewrite\" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.\n*   `pushing` \\- the \"push\" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is \"Writing objects\".\n*   `complete` \\- the import is complete, and the repository is ready on GitHub.\n\nIf there are problems, you will see one of these in the `status` field:\n\n*   `auth_failed` \\- the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update Existing Import](#update-existing-import) section.\n*   `error` \\- the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub support](https://github.com/contact) for more information.\n*   `detection_needs_auth` \\- the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update Existing Import](#update-existing-import) section.\n*   `detection_found_nothing` \\- the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](#cancel-an-import) and [retry](#start-an-import) with the correct URL.\n*   `detection_found_multiple` \\- the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update Existing Import](#update-existing-import) section.\n\n**The project_choices field**\n\nWhen multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.\n\n**Git LFS related fields**\n\nThis section includes details about Git LFS related fields that may be present in the Import Progress response.\n\n*   `use_lfs` \\- describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.\n*   `has_large_files` \\- the boolean value describing whether files larger than 100MB were found during the `importing` step.\n*   `large_files_size` \\- the total size in gigabytes of files larger than 100MB found in the originating repository.\n*   `large_files_count` \\- the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a \"Get Large Files\" request.",
      "idName": "get-import-progress",
      "documentationUrl": "https://developer.github.com/v3/migrations/source_imports/#get-import-progress"
    },
    {
      "name": "Update existing import",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/repos/:owner/:repo/import",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "vcs_username",
          "type": "string",
          "description": "The username to provide to the originating repository.",
          "required": false,
          "location": "body"
        },
        {
          "name": "vcs_password",
          "type": "string",
          "description": "The password to provide to the originating repository.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API request. If no parameters are provided, the import will be restarted.\n\nSome servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will have the status `detection_found_multiple` and the Import Progress response will include a `project_choices` array. You can select the project to import by providing one of the objects in the `project_choices` array in the update request.\n\nThe following example demonstrates the workflow for updating an import with \"project1\" as the project choice. Given a `project_choices` array like such:\n\nTo restart an import, no parameters are provided in the update request.",
      "idName": "update-import",
      "documentationUrl": "https://developer.github.com/v3/migrations/source_imports/#update-existing-import"
    },
    {
      "name": "Get commit authors",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/import/authors",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "since",
          "type": "string",
          "description": "Only authors found after this id are returned. Provide the highest author ID you've seen so far. New authors may be added to the list at any point while the importer is performing the `raw` step.",
          "required": false,
          "location": "query"
        }
      ],
      "description": "Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.\n\nThis API method and the \"Map a commit author\" method allow you to provide correct Git author information.",
      "idName": "get-commit-authors",
      "documentationUrl": "https://developer.github.com/v3/migrations/source_imports/#get-commit-authors"
    },
    {
      "name": "Map a commit author",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/repos/:owner/:repo/import/authors/:author_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "author_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "email",
          "type": "string",
          "description": "The new Git author email.",
          "required": false,
          "location": "body"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The new Git author name.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.",
      "idName": "map-commit-author",
      "documentationUrl": "https://developer.github.com/v3/migrations/source_imports/#map-a-commit-author"
    },
    {
      "name": "Set Git LFS preference",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/repos/:owner/:repo/import/lfs",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "use_lfs",
          "type": "string",
          "description": "Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will be removed during the import).",
          "required": true,
          "enum": [
            "opt_in",
            "opt_out"
          ],
          "location": "body"
        }
      ],
      "description": "You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://help.github.com/articles/versioning-large-files/).",
      "idName": "set-git-lfs-pref",
      "documentationUrl": "https://developer.github.com/v3/migrations/source_imports/#set-git-lfs-preference"
    },
    {
      "name": "Get large files",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/import/large_files",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "List files larger than 100MB found during the import",
      "idName": "get-large-files",
      "documentationUrl": "https://developer.github.com/v3/migrations/source_imports/#get-large-files"
    },
    {
      "name": "Cancel an import",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/import",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Stop an import for a repository.",
      "idName": "cancel-import",
      "documentationUrl": "https://developer.github.com/v3/migrations/source_imports/#cancel-an-import"
    },
    {
      "name": "Start a user migration",
      "enabledForApps": false,
      "method": "POST",
      "path": "/user/migrations",
      "params": [
        {
          "name": "repositories",
          "type": "string[]",
          "description": "An array of repositories to include in the migration.",
          "required": true,
          "location": "body"
        },
        {
          "name": "lock_repositories",
          "type": "boolean",
          "description": "Locks the `repositories` to prevent changes during the migration when set to `true`.",
          "default": false,
          "required": false,
          "location": "body"
        },
        {
          "name": "exclude_attachments",
          "type": "boolean",
          "description": "Does not include attachments uploaded to GitHub.com in the migration data when set to `true`. Excluding attachments will reduce the migration archive file size.",
          "default": false,
          "required": false,
          "location": "body"
        }
      ],
      "description": "Initiates the generation of a user migration archive.",
      "idName": "start-user",
      "documentationUrl": "https://developer.github.com/v3/migrations/users/#start-a-user-migration"
    },
    {
      "name": "Get a list of user migrations",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/migrations",
      "params": [
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Lists all migrations a user has started.",
      "idName": "get-user-list",
      "documentationUrl": "https://developer.github.com/v3/migrations/users/#get-a-list-of-user-migrations"
    },
    {
      "name": "Get the status of a user migration",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/migrations/:migration_id",
      "params": [
        {
          "name": "migration_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:\n\n*   `pending` \\- the migration hasn't started yet.\n*   `exporting` \\- the migration is in progress.\n*   `exported` \\- the migration finished successfully.\n*   `failed` \\- the migration failed.\n\nOnce the migration has been `exported` you can [download the migration archive](#download-a-user-migration-archive).",
      "idName": "get-user-status",
      "documentationUrl": "https://developer.github.com/v3/migrations/users/#get-the-status-of-a-user-migration"
    },
    {
      "name": "Download a user migration archive",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/migrations/:migration_id/archive",
      "params": [
        {
          "name": "migration_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:\n\n*   attachments\n*   bases\n*   commit_comments\n*   issue_comments\n*   issue_events\n*   issues\n*   milestones\n*   organizations\n*   projects\n*   protected_branches\n*   pull\\_request\\_reviews\n*   pull_requests\n*   releases\n*   repositories\n*   review_comments\n*   schema\n*   users\n\nThe archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.\n\n",
      "idName": "download-user-archive",
      "documentationUrl": "https://developer.github.com/v3/migrations/users/#download-a-user-migration-archive"
    },
    {
      "name": "Delete a user migration archive",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/user/migrations/:migration_id/archive",
      "params": [
        {
          "name": "migration_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [Get a list of user migrations](#get-a-list-of-user-migrations) and [Get the status of a user migration](#get-the-status-of-a-user-migration) endpoints, will continue to be available even after an archive is deleted.",
      "idName": "delete-user-archive",
      "documentationUrl": "https://developer.github.com/v3/migrations/users/#delete-a-user-migration-archive"
    },
    {
      "name": "Unlock a user repository",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/user/migrations/:migration_id/repos/:repo_name/lock",
      "params": [
        {
          "name": "migration_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo_name",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Unlocks a repository. You can lock repositories when you [start a user migration](#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://developer.github.com/v3/repos/#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.",
      "idName": "unlock-user-repo",
      "documentationUrl": "https://developer.github.com/v3/migrations/users/#unlock-a-user-repository"
    }
  ],
  "codesOfConduct": [
    {
      "name": "List all codes of conduct",
      "enabledForApps": true,
      "method": "GET",
      "path": "/codes_of_conduct",
      "params": [],
      "description": "",
      "idName": "list-conduct-codes",
      "documentationUrl": "https://developer.github.com/v3/codes_of_conduct/#list-all-codes-of-conduct"
    },
    {
      "name": "Get an individual code of conduct",
      "enabledForApps": true,
      "method": "GET",
      "path": "/codes_of_conduct/:key",
      "params": [
        {
          "name": "key",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-conduct-code",
      "documentationUrl": "https://developer.github.com/v3/codes_of_conduct/#get-an-individual-code-of-conduct"
    },
    {
      "name": "Get the contents of a repository's code of conduct",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/community/code_of_conduct",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "This method returns the contents of the repository's code of conduct file, if one is detected.",
      "idName": "get-repo-code-contents",
      "documentationUrl": "https://developer.github.com/v3/codes_of_conduct/#get-the-contents-of-a-repositorys-code-of-conduct"
    }
  ],
  "gitignore": [
    {
      "name": "Listing available templates",
      "enabledForApps": true,
      "method": "GET",
      "path": "/gitignore/templates",
      "params": [],
      "description": "List all templates available to pass as an option when [creating a repository](https://developer.github.com/v3/repos/#create).",
      "idName": "list-templates",
      "documentationUrl": "https://developer.github.com/v3/gitignore/#listing-available-templates"
    },
    {
      "name": "Get a single template",
      "enabledForApps": true,
      "method": "GET",
      "path": "/gitignore/templates/:name",
      "params": [
        {
          "name": "name",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "The API also allows fetching the source of a single template.\n\nUse the raw [media type](https://developer.github.com/v3/media/) to get the raw contents.\n\n",
      "idName": "get-template",
      "documentationUrl": "https://developer.github.com/v3/gitignore/#get-a-single-template"
    }
  ],
  "licenses": [
    {
      "name": "List all licenses",
      "enabledForApps": true,
      "method": "GET",
      "path": "/licenses",
      "params": [],
      "description": "",
      "idName": "list",
      "documentationUrl": "https://developer.github.com/v3/licenses/#list-all-licenses"
    },
    {
      "name": "Get an individual license",
      "enabledForApps": true,
      "method": "GET",
      "path": "/licenses/:license",
      "params": [
        {
          "name": "license",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get",
      "documentationUrl": "https://developer.github.com/v3/licenses/#get-an-individual-license"
    },
    {
      "name": "Get the contents of a repository's license",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/license",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "This method returns the contents of the repository's license file, if one is detected.\n\nSimilar to [the repository contents API](https://developer.github.com/v3/repos/contents/#get-contents), this method also supports [custom media types](https://developer.github.com/v3/repos/contents/#custom-media-types) for retrieving the raw license content or rendered license HTML.",
      "idName": "get-repo-contents",
      "documentationUrl": "https://developer.github.com/v3/licenses/#get-the-contents-of-a-repositorys-license"
    }
  ],
  "markdown": [
    {
      "name": "Render an arbitrary Markdown document",
      "enabledForApps": true,
      "method": "POST",
      "path": "/markdown",
      "params": [
        {
          "name": "text",
          "type": "string",
          "description": "The Markdown text to render in HTML. Markdown content must be 400 KB or less.",
          "required": true,
          "location": "body"
        },
        {
          "name": "mode",
          "type": "string",
          "description": "The rendering mode. Can be either:  \n\\* `markdown` to render a document in plain Markdown, just like README.md files are rendered.  \n\\* `gfm` to render a document in [GitHub Flavored Markdown](https://github.github.com/gfm/), which creates links for user mentions as well as references to SHA-1 hashes, issues, and pull requests.",
          "default": "markdown",
          "required": false,
          "enum": [
            "markdown",
            "gfm"
          ],
          "location": "body"
        },
        {
          "name": "context",
          "type": "string",
          "description": "The repository context to use when creating references in `gfm` mode. Omit this parameter when using `markdown` mode.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "render-arbitrary-document",
      "documentationUrl": "https://developer.github.com/v3/markdown/#render-an-arbitrary-markdown-document"
    },
    {
      "name": "Render a Markdown document in raw mode",
      "enabledForApps": true,
      "method": "POST",
      "path": "/markdown/raw",
      "params": [],
      "description": "You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.\n\n",
      "idName": "render-document-in-raw-mode",
      "documentationUrl": "https://developer.github.com/v3/markdown/#render-a-markdown-document-in-raw-mode"
    }
  ],
  "rateLimit": [
    {
      "name": "Get your current rate limit status",
      "enabledForApps": true,
      "method": "GET",
      "path": "/rate_limit",
      "params": [],
      "description": "Note: Accessing this endpoint does not count against your rate limit.\n\n\n\n**Understanding Your Rate Limit Status**\n\nThe Search API has a [custom rate limit](https://developer.github.com/v3/search/#rate-limit), separate from the rate limit governing the rest of the API. For that reason, the response (shown above) categorizes your rate limit by resource. Within the `\"resources\"` object, the `\"search\"` object provides your rate limit status for the [Search API](https://developer.github.com/v3/search). The `\"core\"` object provides your rate limit status for all the _rest_ of the API.\n\nThe `\"rate\"` object (shown at the bottom of the response above) is deprecated.\n\nIf you're writing new API client code (or updating your existing code), you should use the `\"core\"` object instead of the `\"rate\"` object. The `\"core\"` object contains the same information that is present in the `\"rate\"` object.",
      "idName": "get-current-rate-limit-status",
      "documentationUrl": "https://developer.github.com/v3/rate_limit/#get-your-current-rate-limit-status"
    }
  ],
  "orgs": [
    {
      "name": "List your organizations",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/orgs",
      "params": [
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List organizations for the authenticated user.\n\n**OAuth scope requirements**\n\nThis only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.",
      "idName": "list",
      "documentationUrl": "https://developer.github.com/v3/orgs/#list-your-organizations"
    },
    {
      "name": "List all organizations",
      "enabledForApps": true,
      "method": "GET",
      "path": "/organizations",
      "params": [
        {
          "name": "since",
          "type": "string",
          "description": "The integer ID of the last Organization that you've seen.",
          "required": false,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Lists all organizations, in the order that they were created on GitHub.\n\n**Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of organizations.",
      "idName": "list",
      "documentationUrl": "https://developer.github.com/v3/orgs/#list-all-organizations"
    },
    {
      "name": "List user organizations",
      "enabledForApps": true,
      "method": "GET",
      "path": "/users/:username/orgs",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.\n\nThis method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List your organizations](#list-your-organizations) API instead.",
      "idName": "list-user",
      "documentationUrl": "https://developer.github.com/v3/orgs/#list-user-organizations"
    },
    {
      "name": "Get an organization",
      "enabledForApps": true,
      "method": "GET",
      "path": "/orgs/:org",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).",
      "idName": "get",
      "documentationUrl": "https://developer.github.com/v3/orgs/#get-an-organization"
    },
    {
      "name": "Edit an organization",
      "enabledForApps": false,
      "method": "PATCH",
      "path": "/orgs/:org",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "billing_email",
          "type": "string",
          "description": "Billing email address. This address is not publicized.",
          "required": false,
          "location": "body"
        },
        {
          "name": "company",
          "type": "string",
          "description": "The company name.",
          "required": false,
          "location": "body"
        },
        {
          "name": "email",
          "type": "string",
          "description": "The publicly visible email address.",
          "required": false,
          "location": "body"
        },
        {
          "name": "location",
          "type": "string",
          "description": "The location.",
          "required": false,
          "location": "body"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The shorthand name of the company.",
          "required": false,
          "location": "body"
        },
        {
          "name": "description",
          "type": "string",
          "description": "The description of the company.",
          "required": false,
          "location": "body"
        },
        {
          "name": "has_organization_projects",
          "type": "boolean",
          "description": "Toggles whether organization projects are enabled for the organization.",
          "required": false,
          "location": "body"
        },
        {
          "name": "has_repository_projects",
          "type": "boolean",
          "description": "Toggles whether repository projects are enabled for repositories that belong to the organization.",
          "required": false,
          "location": "body"
        },
        {
          "name": "default_repository_permission",
          "type": "string",
          "description": "Default permission level members have for organization repositories:  \n\\* `read` \\- can pull, but not push to or administer this repository.  \n\\* `write` \\- can pull and push, but not administer this repository.  \n\\* `admin` \\- can pull, push, and administer this repository.  \n\\* `none` \\- no permissions granted by default.",
          "default": "read",
          "required": false,
          "enum": [
            "read",
            "write",
            "admin",
            "none"
          ],
          "location": "body"
        },
        {
          "name": "members_can_create_repositories",
          "type": "boolean",
          "description": "Toggles ability of non-admin organization members to create repositories  \n\\* `true` \\- all organization members can create repositories.  \n\\* `false` \\- only admin members can create repositories.",
          "default": true,
          "required": false,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "edit",
      "documentationUrl": "https://developer.github.com/v3/orgs/#edit-an-organization"
    },
    {
      "name": "List blocked users",
      "enabledForApps": false,
      "method": "GET",
      "path": "/orgs/:org/blocks",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "List the users blocked by an organization.",
      "idName": "list-blocked-users",
      "documentationUrl": "https://developer.github.com/v3/orgs/blocking/#list-blocked-users"
    },
    {
      "name": "Check whether a user is blocked from an organization",
      "enabledForApps": false,
      "method": "GET",
      "path": "/orgs/:org/blocks/:username",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "If the user is blocked:\n\nIf the user is not blocked:",
      "idName": "check-whether-user-is-blocked",
      "documentationUrl": "https://developer.github.com/v3/orgs/blocking/#check-whether-a-user-is-blocked-from-an-organization"
    },
    {
      "name": "Block a user",
      "enabledForApps": false,
      "method": "PUT",
      "path": "/orgs/:org/blocks/:username",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "block-user",
      "documentationUrl": "https://developer.github.com/v3/orgs/blocking/#block-a-user"
    },
    {
      "name": "Unblock a user",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/orgs/:org/blocks/:username",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "unblock-user",
      "documentationUrl": "https://developer.github.com/v3/orgs/blocking/#unblock-a-user"
    },
    {
      "name": "Members list",
      "enabledForApps": true,
      "method": "GET",
      "path": "/orgs/:org/members",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "filter",
          "type": "string",
          "description": "Filter members returned in the list. Can be one of:  \n\\* `2fa_disabled` \\- Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.  \n\\* `all` \\- All members the authenticated user can see.",
          "default": "all",
          "required": false,
          "enum": [
            "2fa_disabled",
            "all"
          ],
          "location": "query"
        },
        {
          "name": "role",
          "type": "string",
          "description": "Filter members returned by their role. Can be one of:  \n\\* `all` \\- All members of the organization, regardless of role.  \n\\* `admin` \\- Organization owners.  \n\\* `member` \\- Non-owner organization members.",
          "default": "all",
          "required": false,
          "enum": [
            "all",
            "admin",
            "member"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.\n\n",
      "idName": "members-list",
      "documentationUrl": "https://developer.github.com/v3/orgs/members/#members-list"
    },
    {
      "name": "Check membership",
      "enabledForApps": true,
      "method": "GET",
      "path": "/orgs/:org/members/:username",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Check if a user is, publicly or privately, a member of the organization.",
      "idName": "check-membership",
      "documentationUrl": "https://developer.github.com/v3/orgs/members/#check-membership"
    },
    {
      "name": "Remove a member",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/orgs/:org/members/:username",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.",
      "idName": "remove-member",
      "documentationUrl": "https://developer.github.com/v3/orgs/members/#remove-a-member"
    },
    {
      "name": "Public members list",
      "enabledForApps": true,
      "method": "GET",
      "path": "/orgs/:org/public_members",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Members of an organization can choose to have their membership publicized or not.",
      "idName": "public-members-list",
      "documentationUrl": "https://developer.github.com/v3/orgs/members/#public-members-list"
    },
    {
      "name": "Check public membership",
      "enabledForApps": true,
      "method": "GET",
      "path": "/orgs/:org/public_members/:username",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "check-public-membership",
      "documentationUrl": "https://developer.github.com/v3/orgs/members/#check-public-membership"
    },
    {
      "name": "Publicize a user's membership",
      "enabledForApps": false,
      "method": "PUT",
      "path": "/orgs/:org/public_members/:username",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "The user can publicize their own membership. (A user cannot publicize the membership for another user.)\n\nNote that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
      "idName": "publicize-membership",
      "documentationUrl": "https://developer.github.com/v3/orgs/members/#publicize-a-users-membership"
    },
    {
      "name": "Conceal a user's membership",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/orgs/:org/public_members/:username",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "conceal-membership",
      "documentationUrl": "https://developer.github.com/v3/orgs/members/#conceal-a-users-membership"
    },
    {
      "name": "Get organization membership",
      "enabledForApps": true,
      "method": "GET",
      "path": "/orgs/:org/memberships/:username",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "In order to get a user's membership with an organization, the authenticated user must be an organization member.",
      "idName": "get-membership",
      "documentationUrl": "https://developer.github.com/v3/orgs/members/#get-organization-membership"
    },
    {
      "name": "Add or update organization membership",
      "enabledForApps": true,
      "method": "PUT",
      "path": "/orgs/:org/memberships/:username",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "role",
          "type": "string",
          "description": "The role to give the user in the organization. Can be one of:  \n\\* `admin` \\- The user will become an owner of the organization.  \n\\* `member` \\- The user will become a non-owner member of the organization.",
          "default": "member",
          "required": false,
          "enum": [
            "admin",
            "member"
          ],
          "location": "body"
        }
      ],
      "description": "Only authenticated organization owners can add a member to the organization or update the member's role.\n\n*   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](#get-organization-membership) will be `pending` until they accept the invitation.\n    \n*   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.\n\n**Rate limits**\n\nTo prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.",
      "idName": "add-or-update-membership",
      "documentationUrl": "https://developer.github.com/v3/orgs/members/#add-or-update-organization-membership"
    },
    {
      "name": "Remove organization membership",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/orgs/:org/memberships/:username",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "In order to remove a user's membership with an organization, the authenticated user must be an organization owner.\n\nIf the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.",
      "idName": "remove-membership",
      "documentationUrl": "https://developer.github.com/v3/orgs/members/#remove-organization-membership"
    },
    {
      "name": "List organization invitation teams",
      "enabledForApps": false,
      "method": "GET",
      "path": "/orgs/:org/invitations/:invitation_id/teams",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "invitation_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.",
      "idName": "list-invitation-teams",
      "documentationUrl": "https://developer.github.com/v3/orgs/members/#list-organization-invitation-teams"
    },
    {
      "name": "List pending organization invitations",
      "enabledForApps": true,
      "method": "GET",
      "path": "/orgs/:org/invitations",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.",
      "idName": "list-pending-invitations",
      "documentationUrl": "https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations"
    },
    {
      "name": "Create organization invitation",
      "enabledForApps": false,
      "method": "POST",
      "path": "/orgs/:org/invitations",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "invitee_id",
          "type": "integer",
          "description": "**Required unless you provide `email`**. GitHub user ID for the person you are inviting.",
          "required": false,
          "location": "body"
        },
        {
          "name": "email",
          "type": "string",
          "description": "**Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.",
          "required": false,
          "location": "body"
        },
        {
          "name": "role",
          "type": "string",
          "description": "Specify role for new member. Can be one of:  \n\\* `admin` \\- Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  \n\\* `direct_member` \\- Non-owner organization members with ability to see other members and join teams by invitation.  \n\\* `billing_manager` \\- Non-owner organization members with ability to manage the billing settings of your organization.",
          "default": "direct_member",
          "required": false,
          "enum": [
            "admin",
            "direct_member",
            "billing_manager"
          ],
          "location": "body"
        },
        {
          "name": "team_ids",
          "type": "integer[]",
          "description": "Specify IDs for the teams you want to invite new members to.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.",
      "idName": "create-invitation",
      "documentationUrl": "https://developer.github.com/v3/orgs/members/#create-organization-invitation"
    },
    {
      "name": "List your organization memberships",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/memberships/orgs",
      "params": [
        {
          "name": "state",
          "type": "string",
          "description": "Indicates the state of the memberships to return. Can be either `active` or `pending`. If not specified, the API returns both active and pending memberships.",
          "required": false,
          "enum": [
            "active",
            "pending"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-memberships",
      "documentationUrl": "https://developer.github.com/v3/orgs/members/#list-your-organization-memberships"
    },
    {
      "name": "Get your organization membership",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/memberships/orgs/:org",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-membership",
      "documentationUrl": "https://developer.github.com/v3/orgs/members/#get-your-organization-membership"
    },
    {
      "name": "Edit your organization membership",
      "enabledForApps": false,
      "method": "PATCH",
      "path": "/user/memberships/orgs/:org",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "state",
          "type": "string",
          "description": "The state that the membership should be in. Only `\"active\"` will be accepted.",
          "required": true,
          "enum": [
            "active"
          ],
          "location": "body"
        }
      ],
      "description": "",
      "idName": "edit-membership",
      "documentationUrl": "https://developer.github.com/v3/orgs/members/#edit-your-organization-membership"
    },
    {
      "name": "List outside collaborators",
      "enabledForApps": true,
      "method": "GET",
      "path": "/orgs/:org/outside_collaborators",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "filter",
          "type": "string",
          "description": "Filter the list of outside collaborators. Can be one of:  \n\\* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.  \n\\* `all`: All outside collaborators.",
          "default": "all",
          "required": false,
          "enum": [
            "2fa_disabled",
            "all"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List all users who are outside collaborators of an organization.\n\n",
      "idName": "list-outside-collaborators",
      "documentationUrl": "https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators"
    },
    {
      "name": "Remove outside collaborator",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/orgs/:org/outside_collaborators/:username",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Removing a user from this list will remove them from all the organization's repositories.",
      "idName": "remove-outside-collaborator",
      "documentationUrl": "https://developer.github.com/v3/orgs/outside_collaborators/#remove-outside-collaborator"
    },
    {
      "name": "Convert member to outside collaborator",
      "enabledForApps": true,
      "method": "PUT",
      "path": "/orgs/:org/outside_collaborators/:username",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \"[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\".",
      "idName": "convert-member-to-outside-collaborator",
      "documentationUrl": "https://developer.github.com/v3/orgs/outside_collaborators/#convert-member-to-outside-collaborator"
    },
    {
      "name": "List hooks",
      "enabledForApps": false,
      "method": "GET",
      "path": "/orgs/:org/hooks",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-hooks",
      "documentationUrl": "https://developer.github.com/v3/orgs/hooks/#list-hooks"
    },
    {
      "name": "Get single hook",
      "enabledForApps": false,
      "method": "GET",
      "path": "/orgs/:org/hooks/:hook_id",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "hook_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-hook",
      "documentationUrl": "https://developer.github.com/v3/orgs/hooks/#get-single-hook"
    },
    {
      "name": "Create a hook",
      "enabledForApps": false,
      "method": "POST",
      "path": "/orgs/:org/hooks",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "name",
          "type": "string",
          "description": "Must be passed as \"web\".",
          "required": true,
          "location": "body"
        },
        {
          "name": "config",
          "type": "object",
          "description": "Key/value pairs to provide settings for this webhook. [These are defined below](#create-hook-config-params).",
          "required": true,
          "location": "body"
        },
        {
          "name": "config.url",
          "type": "string",
          "description": "The URL to which the payloads will be delivered.",
          "required": true,
          "location": "body"
        },
        {
          "name": "config.content_type",
          "type": "string",
          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
          "required": false,
          "location": "body"
        },
        {
          "name": "config.secret",
          "type": "string",
          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/#delivery-headers) header.",
          "required": false,
          "location": "body"
        },
        {
          "name": "config.insecure_ssl",
          "type": "string",
          "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
          "required": false,
          "location": "body"
        },
        {
          "name": "events",
          "type": "string[]",
          "description": "Determines what [events](https://developer.github.com/v3/activity/events/types/) the hook is triggered for.",
          "default": "[\"push\"]",
          "required": false,
          "location": "body"
        },
        {
          "name": "active",
          "type": "boolean",
          "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
          "default": true,
          "required": false,
          "location": "body"
        }
      ],
      "description": "Here's how you can create a hook that posts payloads in JSON format:",
      "idName": "create-hook",
      "documentationUrl": "https://developer.github.com/v3/orgs/hooks/#create-a-hook"
    },
    {
      "name": "Edit a hook",
      "enabledForApps": false,
      "method": "PATCH",
      "path": "/orgs/:org/hooks/:hook_id",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "hook_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "config",
          "type": "object",
          "description": "Key/value pairs to provide settings for this webhook. [These are defined below](#update-hook-config-params).",
          "required": false,
          "location": "body"
        },
        {
          "name": "config.url",
          "type": "string",
          "description": "The URL to which the payloads will be delivered.",
          "required": true,
          "location": "body"
        },
        {
          "name": "config.content_type",
          "type": "string",
          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
          "required": false,
          "location": "body"
        },
        {
          "name": "config.secret",
          "type": "string",
          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/#delivery-headers) header.",
          "required": false,
          "location": "body"
        },
        {
          "name": "config.insecure_ssl",
          "type": "string",
          "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
          "required": false,
          "location": "body"
        },
        {
          "name": "events",
          "type": "string[]",
          "description": "Determines what [events](https://developer.github.com/v3/activity/events/types/) the hook is triggered for.",
          "default": "[\"push\"]",
          "required": false,
          "location": "body"
        },
        {
          "name": "active",
          "type": "boolean",
          "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
          "default": true,
          "required": false,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "edit-hook",
      "documentationUrl": "https://developer.github.com/v3/orgs/hooks/#edit-a-hook"
    },
    {
      "name": "Ping a hook",
      "enabledForApps": false,
      "method": "POST",
      "path": "/orgs/:org/hooks/:hook_id/pings",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "hook_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "This will trigger a [ping event](https://developer.github.com/webhooks/#ping-event) to be sent to the hook.",
      "idName": "ping-hook",
      "documentationUrl": "https://developer.github.com/v3/orgs/hooks/#ping-a-hook"
    },
    {
      "name": "Delete a hook",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/orgs/:org/hooks/:hook_id",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "hook_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "delete-hook",
      "documentationUrl": "https://developer.github.com/v3/orgs/hooks/#delete-a-hook"
    }
  ],
  "projects": [
    {
      "name": "List repository projects",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/projects",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "state",
          "type": "string",
          "description": "Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.",
          "default": "open",
          "required": false,
          "enum": [
            "open",
            "closed",
            "all"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "**Note**: The status code may also be `401` or `410`, depending on the scope of the authenticating token.",
      "idName": "list-repo",
      "documentationUrl": "https://developer.github.com/v3/projects/#list-repository-projects"
    },
    {
      "name": "List organization projects",
      "enabledForApps": true,
      "method": "GET",
      "path": "/orgs/:org/projects",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "state",
          "type": "string",
          "description": "Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.",
          "default": "open",
          "required": false,
          "enum": [
            "open",
            "closed",
            "all"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "**Note**: The status code may also be `401` or `410`, depending on the scope of the authenticating token.",
      "idName": "list-org",
      "documentationUrl": "https://developer.github.com/v3/projects/#list-organization-projects"
    },
    {
      "name": "Get a project",
      "enabledForApps": true,
      "method": "GET",
      "path": "/projects/:project_id",
      "params": [
        {
          "name": "project_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "**Note**: The status code may also be `401` or `410`, depending on the scope of the authenticating token.",
      "idName": "get",
      "documentationUrl": "https://developer.github.com/v3/projects/#get-a-project"
    },
    {
      "name": "Create a repository project",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/projects",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The name of the project.",
          "required": true,
          "location": "body"
        },
        {
          "name": "body",
          "type": "string",
          "description": "The body of the project.",
          "required": false,
          "location": "body"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "**Note**: The status code may also be `401` or `410`, depending on the scope of the authenticating token.",
      "idName": "create-repo",
      "documentationUrl": "https://developer.github.com/v3/projects/#create-a-repository-project"
    },
    {
      "name": "Create an organization project",
      "enabledForApps": true,
      "method": "POST",
      "path": "/orgs/:org/projects",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The name of the project.",
          "required": true,
          "location": "body"
        },
        {
          "name": "body",
          "type": "string",
          "description": "The body of the project.",
          "required": false,
          "location": "body"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "**Note**: The status code may also be `401` or `410`, depending on the scope of the authenticating token.",
      "idName": "create-org",
      "documentationUrl": "https://developer.github.com/v3/projects/#create-an-organization-project"
    },
    {
      "name": "Update a project",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/projects/:project_id",
      "params": [
        {
          "name": "project_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The name of the project.",
          "required": false,
          "location": "body"
        },
        {
          "name": "body",
          "type": "string",
          "description": "The body of the project.",
          "required": false,
          "location": "body"
        },
        {
          "name": "state",
          "type": "string",
          "description": "State of the project. Either `open` or `closed`.",
          "required": false,
          "enum": [
            "open",
            "closed"
          ],
          "location": "body"
        },
        {
          "name": "organization_permission",
          "type": "string",
          "description": "The permission level that all members of the project's organization will have on this project. If an organization member belongs to a team with a higher level of access or is a collaborator with a higher level of access, their permission level is not lowered by `organization_permission`. Updating a project's organization permission requires `admin` access to the project. Setting the organization permission is only available for organization projects.",
          "required": false,
          "location": "body"
        },
        {
          "name": "public",
          "type": "boolean",
          "description": "Sets visibility of the project within the organization. Updating a project's visibility requires `admin` access to the project. Setting visibility is only available for organization projects. Can be one of:  \n\\* `true` \\- Anyone that can view the organization can see the project.  \n\\* `false` \\- The project must be an organization project to set project visibility.",
          "required": false,
          "location": "body"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "**Note**: The status code may also be `401` or `410`, depending on the scope of the authenticating token.",
      "idName": "update",
      "documentationUrl": "https://developer.github.com/v3/projects/#update-a-project"
    },
    {
      "name": "Delete a project",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/projects/:project_id",
      "params": [
        {
          "name": "project_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "delete",
      "documentationUrl": "https://developer.github.com/v3/projects/#delete-a-project"
    },
    {
      "name": "List project cards",
      "enabledForApps": true,
      "method": "GET",
      "path": "/projects/columns/:column_id/cards",
      "params": [
        {
          "name": "column_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-cards",
      "documentationUrl": "https://developer.github.com/v3/projects/cards/#list-project-cards"
    },
    {
      "name": "Get a project card",
      "enabledForApps": true,
      "method": "GET",
      "path": "/projects/columns/cards/:card_id",
      "params": [
        {
          "name": "card_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-card",
      "documentationUrl": "https://developer.github.com/v3/projects/cards/#get-a-project-card"
    },
    {
      "name": "Create a project card",
      "enabledForApps": true,
      "method": "POST",
      "path": "/projects/columns/:column_id/cards",
      "params": [
        {
          "name": "column_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "note",
          "type": "string",
          "description": "The card's note content. Only valid for cards without another type of content, so you must omit when specifying `content_id` and `content_type`.",
          "required": false,
          "location": "body"
        },
        {
          "name": "content_id",
          "type": "integer",
          "description": "The issue or pull request id you want to associate with this card. You can use the [List issues for a repository](https://developer.github.com/v3/issues/#list-issues-for-a-repository) and [List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests) endpoints to find this id.  \n**Note:** Depending on whether you use the issue id or pull request id, you will need to specify `Issue` or `PullRequest` as the `content_type`.",
          "required": false,
          "location": "body"
        },
        {
          "name": "content_type",
          "type": "string",
          "description": "**Required if you provide `content_id`**. The type of content you want to associate with this card. Use `Issue` when `content_id` is an issue id and use `PullRequest` when `content_id` is a pull request id.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.\n\nBe aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.",
      "idName": "create-card",
      "documentationUrl": "https://developer.github.com/v3/projects/cards/#create-a-project-card"
    },
    {
      "name": "Update a project card",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/projects/columns/cards/:card_id",
      "params": [
        {
          "name": "card_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "note",
          "type": "string",
          "description": "The card's note content. Only valid for cards without another type of content, so this cannot be specified if the card already has a `content_id` and `content_type`.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "update-card",
      "documentationUrl": "https://developer.github.com/v3/projects/cards/#update-a-project-card"
    },
    {
      "name": "Delete a project card",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/projects/columns/cards/:card_id",
      "params": [
        {
          "name": "card_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "delete-card",
      "documentationUrl": "https://developer.github.com/v3/projects/cards/#delete-a-project-card"
    },
    {
      "name": "Move a project card",
      "enabledForApps": true,
      "method": "POST",
      "path": "/projects/columns/cards/:card_id/moves",
      "params": [
        {
          "name": "card_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "position",
          "type": "string",
          "description": "Can be one of `top`, `bottom`, or `after:<card_id>`, where `<card_id>` is the `id` value of a card in the same column, or in the new column specified by `column_id`.",
          "required": true,
          "enum": [
            "top",
            "bottom",
            "after:<card_id>"
          ],
          "location": "body"
        },
        {
          "name": "column_id",
          "type": "integer",
          "description": "The `id` value of a column in the same project.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "move-card",
      "documentationUrl": "https://developer.github.com/v3/projects/cards/#move-a-project-card"
    },
    {
      "name": "List collaborators",
      "enabledForApps": false,
      "method": "GET",
      "path": "/projects/:project_id/collaborators",
      "params": [
        {
          "name": "project_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "affiliation",
          "type": "string",
          "description": "Filters the collaborators by their affiliation. Can be one of:  \n\\* `outside`: Outside collaborators of a project that are not a member of the project's organization.  \n\\* `direct`: Collaborators with permissions to a project, regardless of organization membership status.  \n\\* `all`: All collaborators the authenticated user can see.",
          "default": "all",
          "required": false,
          "enum": [
            "outside",
            "direct",
            "all"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.",
      "idName": "list-collaborators",
      "documentationUrl": "https://developer.github.com/v3/projects/collaborators/#list-collaborators"
    },
    {
      "name": "Review a user's permission level",
      "enabledForApps": false,
      "method": "GET",
      "path": "/projects/:project_id/collaborators/:username/permission",
      "params": [
        {
          "name": "project_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.",
      "idName": "review-user-permission-level",
      "documentationUrl": "https://developer.github.com/v3/projects/collaborators/#review-a-users-permission-level"
    },
    {
      "name": "Add user as a collaborator",
      "enabledForApps": false,
      "method": "PUT",
      "path": "/projects/:project_id/collaborators/:username",
      "params": [
        {
          "name": "project_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "permission",
          "type": "string",
          "description": "The permission to grant the collaborator. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\" Can be one of:  \n\\* `read` \\- can read, but not write to or administer this project.  \n\\* `write` \\- can read and write, but not administer this project.  \n\\* `admin` \\- can read, write and administer this project.",
          "default": "write",
          "required": false,
          "enum": [
            "read",
            "write",
            "admin"
          ],
          "location": "body"
        }
      ],
      "description": "Adds a collaborator to a an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.",
      "idName": "add-collaborator",
      "documentationUrl": "https://developer.github.com/v3/projects/collaborators/#add-user-as-a-collaborator"
    },
    {
      "name": "Remove user as a collaborator",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/projects/:project_id/collaborators/:username",
      "params": [
        {
          "name": "project_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.",
      "idName": "remove-collaborator",
      "documentationUrl": "https://developer.github.com/v3/projects/collaborators/#remove-user-as-a-collaborator"
    },
    {
      "name": "List project columns",
      "enabledForApps": true,
      "method": "GET",
      "path": "/projects/:project_id/columns",
      "params": [
        {
          "name": "project_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-columns",
      "documentationUrl": "https://developer.github.com/v3/projects/columns/#list-project-columns"
    },
    {
      "name": "Get a project column",
      "enabledForApps": true,
      "method": "GET",
      "path": "/projects/columns/:column_id",
      "params": [
        {
          "name": "column_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-column",
      "documentationUrl": "https://developer.github.com/v3/projects/columns/#get-a-project-column"
    },
    {
      "name": "Create a project column",
      "enabledForApps": true,
      "method": "POST",
      "path": "/projects/:project_id/columns",
      "params": [
        {
          "name": "project_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The name of the column.",
          "required": true,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "create-column",
      "documentationUrl": "https://developer.github.com/v3/projects/columns/#create-a-project-column"
    },
    {
      "name": "Update a project column",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/projects/columns/:column_id",
      "params": [
        {
          "name": "column_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The new name of the column.",
          "required": true,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "update-column",
      "documentationUrl": "https://developer.github.com/v3/projects/columns/#update-a-project-column"
    },
    {
      "name": "Delete a project column",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/projects/columns/:column_id",
      "params": [
        {
          "name": "column_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "delete-column",
      "documentationUrl": "https://developer.github.com/v3/projects/columns/#delete-a-project-column"
    },
    {
      "name": "Move a project column",
      "enabledForApps": true,
      "method": "POST",
      "path": "/projects/columns/:column_id/moves",
      "params": [
        {
          "name": "column_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "position",
          "type": "string",
          "description": "Can be one of `first`, `last`, or `after:<column_id>`, where `<column_id>` is the `id` value of a column in the same project.",
          "required": true,
          "enum": [
            "first",
            "last",
            "after:<column_id>"
          ],
          "location": "body"
        }
      ],
      "description": "",
      "idName": "move-column",
      "documentationUrl": "https://developer.github.com/v3/projects/columns/#move-a-project-column"
    }
  ],
  "pulls": [
    {
      "name": "List pull requests",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/pulls",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "state",
          "type": "string",
          "description": "Either `open`, `closed`, or `all` to filter by state.",
          "default": "open",
          "required": false,
          "enum": [
            "open",
            "closed",
            "all"
          ],
          "location": "query"
        },
        {
          "name": "head",
          "type": "string",
          "description": "Filter pulls by head user and branch name in the format of `user:ref-name`. Example: `github:new-script-format`.",
          "required": false,
          "location": "query"
        },
        {
          "name": "base",
          "type": "string",
          "description": "Filter pulls by base branch name. Example: `gh-pages`.",
          "required": false,
          "location": "query"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month).",
          "default": "created",
          "required": false,
          "enum": [
            "created",
            "updated",
            "popularity",
            "long-running"
          ],
          "location": "query"
        },
        {
          "name": "direction",
          "type": "string",
          "description": "The direction of the sort. Can be either `asc` or `desc`.",
          "default": "`desc` when sort is `created` or sort is not specified, otherwise `asc`",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list",
      "documentationUrl": "https://developer.github.com/v3/pulls/#list-pull-requests"
    },
    {
      "name": "Get a single pull request",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/pulls/:number",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Lists details of a pull request by providing its number.\n\nWhen you get, [create](https://developer.github.com/v3/pulls/#create-a-pull-request), or [edit](https://developer.github.com/v3/pulls/#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see \"[Checking mergeability of pull requests](https://developer.github.com/v3/git/#checking-mergeability-of-pull-requests)\".\n\nThe value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.\n\nThe value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:\n\n*   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.\n*   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.\n*   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.\n\nPass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.",
      "idName": "get",
      "documentationUrl": "https://developer.github.com/v3/pulls/#get-a-single-pull-request"
    },
    {
      "name": "Create a pull request",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/pulls",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "title",
          "type": "string",
          "description": "The title of the pull request.",
          "required": true,
          "location": "body"
        },
        {
          "name": "head",
          "type": "string",
          "description": "The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.",
          "required": true,
          "location": "body"
        },
        {
          "name": "base",
          "type": "string",
          "description": "The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.",
          "required": true,
          "location": "body"
        },
        {
          "name": "body",
          "type": "string",
          "description": "The contents of the pull request.",
          "required": false,
          "location": "body"
        },
        {
          "name": "maintainer_can_modify",
          "type": "boolean",
          "description": "Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "**Note:** To open a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open a pull request.",
      "idName": "create",
      "documentationUrl": "https://developer.github.com/v3/pulls/#create-a-pull-request"
    },
    {
      "name": "create a Pull Request from an existing Issue by passing an Issue number ",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/pulls",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "issue",
          "type": "integer",
          "description": "The issue number in this repository to turn into a Pull Request.",
          "required": true,
          "location": "body"
        },
        {
          "name": "head",
          "type": "string",
          "description": "The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.",
          "required": true,
          "location": "body"
        },
        {
          "name": "base",
          "type": "string",
          "description": "The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.",
          "required": true,
          "location": "body"
        },
        {
          "name": "maintainer_can_modify",
          "type": "boolean",
          "description": "Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "**Note:** To open a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open a pull request.",
      "idName": "create-from-issue-by-passing-issue-number",
      "documentationUrl": "https://developer.github.com/v3/pulls/#create-a-pull-request"
    },
    {
      "name": "Update a pull request",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/repos/:owner/:repo/pulls/:number",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "title",
          "type": "string",
          "description": "The title of the pull request.",
          "required": false,
          "location": "body"
        },
        {
          "name": "body",
          "type": "string",
          "description": "The contents of the pull request.",
          "required": false,
          "location": "body"
        },
        {
          "name": "state",
          "type": "string",
          "description": "State of this Pull Request. Either `open` or `closed`.",
          "required": false,
          "enum": [
            "open",
            "closed"
          ],
          "location": "body"
        },
        {
          "name": "base",
          "type": "string",
          "description": "The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.",
          "required": false,
          "location": "body"
        },
        {
          "name": "maintainer_can_modify",
          "type": "boolean",
          "description": "Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "**Note:** To open a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open a pull request.",
      "idName": "update",
      "documentationUrl": "https://developer.github.com/v3/pulls/#update-a-pull-request"
    },
    {
      "name": "List commits on a pull request",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/pulls/:number/commits",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "**Note:** The response includes a maximum of 250 commits. To receive a complete commit list for pull requests with more than 250 commits, use the [Commit List API](https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository).",
      "idName": "list-commits",
      "documentationUrl": "https://developer.github.com/v3/pulls/#list-commits-on-a-pull-request"
    },
    {
      "name": "List pull requests files",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/pulls/:number/files",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "**Note:** The response includes a maximum of 300 files.",
      "idName": "list-files",
      "documentationUrl": "https://developer.github.com/v3/pulls/#list-pull-requests-files"
    },
    {
      "name": "Get if a pull request has been merged",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/pulls/:number/merge",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-if-merged",
      "documentationUrl": "https://developer.github.com/v3/pulls/#get-if-a-pull-request-has-been-merged"
    },
    {
      "name": "Merge a pull request (Merge Button)",
      "enabledForApps": true,
      "method": "PUT",
      "path": "/repos/:owner/:repo/pulls/:number/merge",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "commit_title",
          "type": "string",
          "description": "Title for the automatic commit message.",
          "required": false,
          "location": "body"
        },
        {
          "name": "commit_message",
          "type": "string",
          "description": "Extra detail to append to automatic commit message.",
          "required": false,
          "location": "body"
        },
        {
          "name": "sha",
          "type": "string",
          "description": "SHA that pull request head must match to allow merge.",
          "required": false,
          "location": "body"
        },
        {
          "name": "merge_method",
          "type": "string",
          "description": "Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.",
          "required": false,
          "enum": [
            "merge",
            "squash",
            "rebase"
          ],
          "location": "body"
        }
      ],
      "description": "",
      "idName": "merge-merge-button",
      "documentationUrl": "https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button"
    },
    {
      "name": "List reviews on a pull request",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/pulls/:number/reviews",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "The list of reviews returns in chronological order.",
      "idName": "list-reviews",
      "documentationUrl": "https://developer.github.com/v3/pulls/reviews/#list-reviews-on-a-pull-request"
    },
    {
      "name": "Get a single review",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/pulls/:number/reviews/:review_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "review_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-review",
      "documentationUrl": "https://developer.github.com/v3/pulls/reviews/#get-a-single-review"
    },
    {
      "name": "Delete a pending review",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/pulls/:number/reviews/:review_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "review_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "delete-pending-review",
      "documentationUrl": "https://developer.github.com/v3/pulls/reviews/#delete-a-pending-review"
    },
    {
      "name": "Get comments for a single review",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/pulls/:number/reviews/:review_id/comments",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "review_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "get-comments-for-review",
      "documentationUrl": "https://developer.github.com/v3/pulls/reviews/#get-comments-for-a-single-review"
    },
    {
      "name": "Create a pull request review",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/pulls/:number/reviews",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "commit_id",
          "type": "string",
          "description": "The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.",
          "required": false,
          "location": "body"
        },
        {
          "name": "body",
          "type": "string",
          "description": "**Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.",
          "required": false,
          "location": "body"
        },
        {
          "name": "event",
          "type": "string",
          "description": "The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://developer.github.com/v3/pulls/reviews/#submit-a-pull-request-review) when you are ready.",
          "required": false,
          "enum": [
            "APPROVE",
            "REQUEST_CHANGES",
            "COMMENT"
          ],
          "location": "body"
        },
        {
          "name": "comments",
          "type": "object[]",
          "description": "Use the following table to specify the location, destination, and contents of the draft review comment.",
          "required": false,
          "location": "body"
        },
        {
          "name": "comments[].path",
          "type": "string",
          "description": "**Required.** The relative path to the file that necessitates a review comment.",
          "required": false,
          "location": "body"
        },
        {
          "name": "comments[].position",
          "type": "integer",
          "description": "**Required.** The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.",
          "required": false,
          "location": "body"
        },
        {
          "name": "comments[].body",
          "type": "string",
          "description": "**Required.** Text of the review comment.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "**Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://developer.github.com/v3/pulls/#get-a-single-pull-request) endpoint.\n\nThe `position` value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.",
      "idName": "create-review",
      "documentationUrl": "https://developer.github.com/v3/pulls/reviews/#create-a-pull-request-review"
    },
    {
      "name": "Submit a pull request review",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/pulls/:number/reviews/:review_id/events",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "review_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "body",
          "type": "string",
          "description": "The body text of the pull request review",
          "required": false,
          "location": "body"
        },
        {
          "name": "event",
          "type": "string",
          "description": "**Required.** The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.",
          "required": false,
          "enum": [
            "APPROVE",
            "REQUEST_CHANGES",
            "COMMENT"
          ],
          "location": "body"
        }
      ],
      "description": "",
      "idName": "submit-review",
      "documentationUrl": "https://developer.github.com/v3/pulls/reviews/#submit-a-pull-request-review"
    },
    {
      "name": "Dismiss a pull request review",
      "enabledForApps": true,
      "method": "PUT",
      "path": "/repos/:owner/:repo/pulls/:number/reviews/:review_id/dismissals",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "review_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "message",
          "type": "string",
          "description": "**Required.** The message for the pull request review dismissal",
          "required": false,
          "location": "body"
        }
      ],
      "description": "**Note:** To dismiss a pull request review on a [protected branch](https://developer.github.com/v3/repos/branches/), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.",
      "idName": "dismiss-review",
      "documentationUrl": "https://developer.github.com/v3/pulls/reviews/#dismiss-a-pull-request-review"
    },
    {
      "name": "List comments on a pull request",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/pulls/:number/comments",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "Can be either `created` or `updated` comments.",
          "default": "created",
          "required": false,
          "enum": [
            "created",
            "updated"
          ],
          "location": "query"
        },
        {
          "name": "direction",
          "type": "string",
          "description": "Can be either `asc` or `desc`. Ignored without `sort` parameter.",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "since",
          "type": "string",
          "description": "This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Only returns comments `updated` at or after this time.",
          "required": false,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "By default, review comments are ordered by ascending ID.",
      "idName": "list-comments",
      "documentationUrl": "https://developer.github.com/v3/pulls/comments/#list-comments-on-a-pull-request"
    },
    {
      "name": "List comments in a repository",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/pulls/comments",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "Can be either `created` or `updated` comments.",
          "default": "created",
          "required": false,
          "enum": [
            "created",
            "updated"
          ],
          "location": "query"
        },
        {
          "name": "direction",
          "type": "string",
          "description": "Can be either `asc` or `desc`. Ignored without `sort` parameter.",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "since",
          "type": "string",
          "description": "This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Only returns comments `updated` at or after this time.",
          "required": false,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "By default, review comments are ordered by ascending ID.",
      "idName": "list-comments-for-repo",
      "documentationUrl": "https://developer.github.com/v3/pulls/comments/#list-comments-in-a-repository"
    },
    {
      "name": "Get a single comment",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/pulls/comments/:comment_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-comment",
      "documentationUrl": "https://developer.github.com/v3/pulls/comments/#get-a-single-comment"
    },
    {
      "name": "Create a comment",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/pulls/:number/comments",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "body",
          "type": "string",
          "description": "The text of the comment.",
          "required": true,
          "location": "body"
        },
        {
          "name": "commit_id",
          "type": "string",
          "description": "The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.",
          "required": true,
          "location": "body"
        },
        {
          "name": "path",
          "type": "string",
          "description": "The relative path to the file that necessitates a comment.",
          "required": true,
          "location": "body"
        },
        {
          "name": "position",
          "type": "integer",
          "description": "The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.",
          "required": true,
          "location": "body"
        }
      ],
      "description": "**Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://developer.github.com/v3/pulls/#get-a-single-pull-request) endpoint.\n\nThe `position` value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.",
      "idName": "create-comment",
      "documentationUrl": "https://developer.github.com/v3/pulls/comments/#create-a-comment"
    },
    {
      "name": "Create a comment (alternative)",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/pulls/:number/comments",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "body",
          "type": "string",
          "description": "The text of the comment.",
          "required": true,
          "location": "body"
        },
        {
          "name": "in_reply_to",
          "type": "integer",
          "description": "The comment ID to reply to. **Note**: This must be the ID of a _top-level comment_, not a reply to that comment. Replies to replies are not supported.",
          "required": true,
          "location": "body"
        }
      ],
      "description": "**Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://developer.github.com/v3/pulls/#get-a-single-pull-request) endpoint.\n\nThe `position` value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.",
      "idName": "create-comment-alternative",
      "documentationUrl": "https://developer.github.com/v3/pulls/comments/#create-a-comment"
    },
    {
      "name": "Edit a comment",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/repos/:owner/:repo/pulls/comments/:comment_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "body",
          "type": "string",
          "description": "The text of the comment.",
          "required": true,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "edit-comment",
      "documentationUrl": "https://developer.github.com/v3/pulls/comments/#edit-a-comment"
    },
    {
      "name": "Delete a comment",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/pulls/comments/:comment_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "delete-comment",
      "documentationUrl": "https://developer.github.com/v3/pulls/comments/#delete-a-comment"
    },
    {
      "name": "List review requests",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/pulls/:number/requested_reviewers",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-review-requests",
      "documentationUrl": "https://developer.github.com/v3/pulls/review_requests/#list-review-requests"
    },
    {
      "name": "Create a review request",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/pulls/:number/requested_reviewers",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "reviewers",
          "type": "string[]",
          "description": "An array of user `login`s that will be requested.",
          "required": false,
          "location": "body"
        },
        {
          "name": "team_reviewers",
          "type": "string[]",
          "description": "An array of team `slug`s that will be requested.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "create-review-request",
      "documentationUrl": "https://developer.github.com/v3/pulls/review_requests/#create-a-review-request"
    },
    {
      "name": "Delete a review request",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/pulls/:number/requested_reviewers",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "reviewers",
          "type": "string[]",
          "description": "An array of user `login`s that will be removed.",
          "required": false,
          "location": "body"
        },
        {
          "name": "team_reviewers",
          "type": "string[]",
          "description": "An array of team `slug`s that will be removed.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "delete-review-request",
      "documentationUrl": "https://developer.github.com/v3/pulls/review_requests/#delete-a-review-request"
    }
  ],
  "reactions": [
    {
      "name": "List reactions for a commit comment",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/comments/:comment_id/reactions",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "content",
          "type": "string",
          "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a commit comment.",
          "required": false,
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List the reactions to a [commit comment](https://developer.github.com/v3/repos/comments/).",
      "idName": "list-for-commit-comment",
      "documentationUrl": "https://developer.github.com/v3/reactions/#list-reactions-for-a-commit-comment"
    },
    {
      "name": "Create reaction for a commit comment",
      "enabledForApps": false,
      "method": "POST",
      "path": "/repos/:owner/:repo/comments/:comment_id/reactions",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "content",
          "type": "string",
          "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the commit comment.",
          "required": true,
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray"
          ],
          "location": "body"
        }
      ],
      "description": "Create a reaction to a [commit comment](https://developer.github.com/v3/repos/comments/). A response with a `Status: 200 OK` means that you already added the reaction type to this commit comment.",
      "idName": "create-for-commit-comment",
      "documentationUrl": "https://developer.github.com/v3/reactions/#create-reaction-for-a-commit-comment"
    },
    {
      "name": "List reactions for an issue",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/issues/:number/reactions",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "content",
          "type": "string",
          "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to an issue.",
          "required": false,
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List the reactions to an [issue](https://developer.github.com/v3/issues/).",
      "idName": "list-for-issue",
      "documentationUrl": "https://developer.github.com/v3/reactions/#list-reactions-for-an-issue"
    },
    {
      "name": "Create reaction for an issue",
      "enabledForApps": false,
      "method": "POST",
      "path": "/repos/:owner/:repo/issues/:number/reactions",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "content",
          "type": "string",
          "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the issue.",
          "required": true,
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray"
          ],
          "location": "body"
        }
      ],
      "description": "Create a reaction to an [issue](https://developer.github.com/v3/issues/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue.",
      "idName": "create-for-issue",
      "documentationUrl": "https://developer.github.com/v3/reactions/#create-reaction-for-an-issue"
    },
    {
      "name": "List reactions for an issue comment",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/issues/comments/:comment_id/reactions",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "content",
          "type": "string",
          "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to an issue comment.",
          "required": false,
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List the reactions to an [issue comment](https://developer.github.com/v3/issues/comments/).",
      "idName": "list-for-issue-comment",
      "documentationUrl": "https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment"
    },
    {
      "name": "Create reaction for an issue comment",
      "enabledForApps": false,
      "method": "POST",
      "path": "/repos/:owner/:repo/issues/comments/:comment_id/reactions",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "content",
          "type": "string",
          "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the issue comment.",
          "required": true,
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray"
          ],
          "location": "body"
        }
      ],
      "description": "Create a reaction to an [issue comment](https://developer.github.com/v3/issues/comments/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue comment.",
      "idName": "create-for-issue-comment",
      "documentationUrl": "https://developer.github.com/v3/reactions/#create-reaction-for-an-issue-comment"
    },
    {
      "name": "List reactions for a pull request review comment",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/pulls/comments/:comment_id/reactions",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "content",
          "type": "string",
          "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a pull request review comment.",
          "required": false,
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List the reactions to a [pull request review comment](https://developer.github.com/v3/pulls/comments/).",
      "idName": "list-for-pull-request-review-comment",
      "documentationUrl": "https://developer.github.com/v3/reactions/#list-reactions-for-a-pull-request-review-comment"
    },
    {
      "name": "Create reaction for a pull request review comment",
      "enabledForApps": false,
      "method": "POST",
      "path": "/repos/:owner/:repo/pulls/comments/:comment_id/reactions",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "content",
          "type": "string",
          "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the pull request review comment.",
          "required": true,
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray"
          ],
          "location": "body"
        }
      ],
      "description": "Create a reaction to a [pull request review comment](https://developer.github.com/v3/pulls/comments/). A response with a `Status: 200 OK` means that you already added the reaction type to this pull request review comment.",
      "idName": "create-for-pull-request-review-comment",
      "documentationUrl": "https://developer.github.com/v3/reactions/#create-reaction-for-a-pull-request-review-comment"
    },
    {
      "name": "List reactions for a team discussion",
      "enabledForApps": true,
      "method": "GET",
      "path": "/teams/:team_id/discussions/:discussion_number/reactions",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "discussion_number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "content",
          "type": "string",
          "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion.",
          "required": false,
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List the reactions to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      "idName": "list-for-team-discussion",
      "documentationUrl": "https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion"
    },
    {
      "name": "Create reaction for a team discussion",
      "enabledForApps": false,
      "method": "POST",
      "path": "/teams/:team_id/discussions/:discussion_number/reactions",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "discussion_number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "content",
          "type": "string",
          "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion.",
          "required": true,
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray"
          ],
          "location": "body"
        }
      ],
      "description": "Create a reaction to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.",
      "idName": "create-for-team-discussion",
      "documentationUrl": "https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion"
    },
    {
      "name": "List reactions for a team discussion comment",
      "enabledForApps": true,
      "method": "GET",
      "path": "/teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "discussion_number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "content",
          "type": "string",
          "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion comment.",
          "required": false,
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List the reactions to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      "idName": "list-for-team-discussion-comment",
      "documentationUrl": "https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment"
    },
    {
      "name": "Create reaction for a team discussion comment",
      "enabledForApps": false,
      "method": "POST",
      "path": "/teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "discussion_number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "content",
          "type": "string",
          "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion comment.",
          "required": true,
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray"
          ],
          "location": "body"
        }
      ],
      "description": "Create a reaction to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.",
      "idName": "create-for-team-discussion-comment",
      "documentationUrl": "https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment"
    },
    {
      "name": "Delete a reaction",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/reactions/:reaction_id",
      "params": [
        {
          "name": "reaction_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://developer.github.com/v3/teams/discussions/) or [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/).",
      "idName": "delete",
      "documentationUrl": "https://developer.github.com/v3/reactions/#delete-a-reaction"
    }
  ],
  "repos": [
    {
      "name": "List your repositories",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/repos",
      "params": [
        {
          "name": "visibility",
          "type": "string",
          "description": "Can be one of `all`, `public`, or `private`.",
          "default": "all",
          "required": false,
          "enum": [
            "all",
            "public",
            "private"
          ],
          "location": "query"
        },
        {
          "name": "affiliation",
          "type": "string",
          "description": "Comma-separated list of values. Can include:  \n\\* `owner`: Repositories that are owned by the authenticated user.  \n\\* `collaborator`: Repositories that the user has been added to as a collaborator.  \n\\* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.",
          "default": "owner,collaborator,organization_member",
          "required": false,
          "enum": [
            "owner",
            "collaborator",
            "organization_member"
          ],
          "location": "query"
        },
        {
          "name": "type",
          "type": "string",
          "description": "Can be one of `all`, `owner`, `public`, `private`, `member`. Default: `all`  \n  \nWill cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.",
          "default": "all",
          "required": false,
          "enum": [
            "all",
            "owner",
            "public",
            "private",
            "member"
          ],
          "location": "query"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "Can be one of `created`, `updated`, `pushed`, `full_name`.",
          "default": "full_name",
          "required": false,
          "enum": [
            "created",
            "updated",
            "pushed",
            "full_name"
          ],
          "location": "query"
        },
        {
          "name": "direction",
          "type": "string",
          "description": "Can be one of `asc` or `desc`.",
          "default": "when using `full_name`: `asc`; otherwise `desc`",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.",
      "idName": "list",
      "documentationUrl": "https://developer.github.com/v3/repos/#list-your-repositories"
    },
    {
      "name": "List user repositories",
      "enabledForApps": true,
      "method": "GET",
      "path": "/users/:username/repos",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "type",
          "type": "string",
          "description": "Can be one of `all`, `owner`, `member`.",
          "default": "owner",
          "required": false,
          "enum": [
            "all",
            "owner",
            "member"
          ],
          "location": "query"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "Can be one of `created`, `updated`, `pushed`, `full_name`.",
          "default": "full_name",
          "required": false,
          "enum": [
            "created",
            "updated",
            "pushed",
            "full_name"
          ],
          "location": "query"
        },
        {
          "name": "direction",
          "type": "string",
          "description": "Can be one of `asc` or `desc`.",
          "default": "when using `full_name`: `asc`, otherwise `desc`",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List public repositories for the specified user.",
      "idName": "list-user",
      "documentationUrl": "https://developer.github.com/v3/repos/#list-user-repositories"
    },
    {
      "name": "List organization repositories",
      "enabledForApps": true,
      "method": "GET",
      "path": "/orgs/:org/repos",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "type",
          "type": "string",
          "description": "Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`.",
          "default": "all",
          "required": false,
          "enum": [
            "all",
            "public",
            "private",
            "forks",
            "sources",
            "member"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List repositories for the specified org.",
      "idName": "list-org",
      "documentationUrl": "https://developer.github.com/v3/repos/#list-organization-repositories"
    },
    {
      "name": "List all public repositories",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repositories",
      "params": [
        {
          "name": "since",
          "type": "string",
          "description": "The integer ID of the last Repository that you've seen.",
          "required": false,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "This provides a dump of every public repository, in the order that they were created.\n\nNote: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of repositories.",
      "idName": "list-public",
      "documentationUrl": "https://developer.github.com/v3/repos/#list-all-public-repositories"
    },
    {
      "method": "POST",
      "path": "/user/repos",
      "enabledForApps": true,
      "name": "Create a new repository for the authenticated user",
      "params": [
        {
          "name": "name",
          "type": "string",
          "description": "The name of the repository.",
          "required": true,
          "location": "body"
        },
        {
          "name": "description",
          "type": "string",
          "description": "A short description of the repository.",
          "required": false,
          "location": "body"
        },
        {
          "name": "homepage",
          "type": "string",
          "description": "A URL with more information about the repository.",
          "required": false,
          "location": "body"
        },
        {
          "name": "private",
          "type": "boolean",
          "description": "Either `true` to create a private repository or `false` to create a public one. Creating private repositories requires a paid GitHub account.",
          "default": false,
          "required": false,
          "location": "body"
        },
        {
          "name": "has_issues",
          "type": "boolean",
          "description": "Either `true` to enable issues for this repository or `false` to disable them.",
          "default": true,
          "required": false,
          "location": "body"
        },
        {
          "name": "has_projects",
          "type": "boolean",
          "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
          "default": true,
          "required": false,
          "location": "body"
        },
        {
          "name": "has_wiki",
          "type": "boolean",
          "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
          "default": true,
          "required": false,
          "location": "body"
        },
        {
          "name": "team_id",
          "type": "integer",
          "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
          "required": false,
          "location": "body"
        },
        {
          "name": "auto_init",
          "type": "boolean",
          "description": "Pass `true` to create an initial commit with empty README.",
          "default": false,
          "required": false,
          "location": "body"
        },
        {
          "name": "gitignore_template",
          "type": "string",
          "description": "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\".",
          "required": false,
          "location": "body"
        },
        {
          "name": "license_template",
          "type": "string",
          "description": "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\".",
          "required": false,
          "location": "body"
        },
        {
          "name": "allow_squash_merge",
          "type": "boolean",
          "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
          "default": true,
          "required": false,
          "location": "body"
        },
        {
          "name": "allow_merge_commit",
          "type": "boolean",
          "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
          "default": true,
          "required": false,
          "location": "body"
        },
        {
          "name": "allow_rebase_merge",
          "type": "boolean",
          "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
          "default": true,
          "required": false,
          "location": "body"
        }
      ],
      "description": "**Note**: There are two endpoints for creating a repository: one to create a repository on a user account, and one to create a repository in an organization. The organization endpoint is fully enabled for [GitHub Apps](https://developer.github.com/v3/apps/available-endpoints/), whereas the user endpoint is enabled only for [user-to-server requests](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#user-to-server-requests).\n\n**OAuth scope requirements**\n\nWhen using [OAuth](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n\n*   `public_repo` scope or `repo` scope to create a public repository\n*   `repo` scope to create a private repository",
      "idName": "create",
      "documentationUrl": "https://developer.github.com/v3/repos/#create"
    },
    {
      "method": "POST",
      "path": "/orgs/:org/repos",
      "enabledForApps": true,
      "name": "Create a new repository in this organization",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The name of the repository.",
          "required": true,
          "location": "body"
        },
        {
          "name": "description",
          "type": "string",
          "description": "A short description of the repository.",
          "required": false,
          "location": "body"
        },
        {
          "name": "homepage",
          "type": "string",
          "description": "A URL with more information about the repository.",
          "required": false,
          "location": "body"
        },
        {
          "name": "private",
          "type": "boolean",
          "description": "Either `true` to create a private repository or `false` to create a public one. Creating private repositories requires a paid GitHub account.",
          "default": false,
          "required": false,
          "location": "body"
        },
        {
          "name": "has_issues",
          "type": "boolean",
          "description": "Either `true` to enable issues for this repository or `false` to disable them.",
          "default": true,
          "required": false,
          "location": "body"
        },
        {
          "name": "has_projects",
          "type": "boolean",
          "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
          "default": true,
          "required": false,
          "location": "body"
        },
        {
          "name": "has_wiki",
          "type": "boolean",
          "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
          "default": true,
          "required": false,
          "location": "body"
        },
        {
          "name": "team_id",
          "type": "integer",
          "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
          "required": false,
          "location": "body"
        },
        {
          "name": "auto_init",
          "type": "boolean",
          "description": "Pass `true` to create an initial commit with empty README.",
          "default": false,
          "required": false,
          "location": "body"
        },
        {
          "name": "gitignore_template",
          "type": "string",
          "description": "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\".",
          "required": false,
          "location": "body"
        },
        {
          "name": "license_template",
          "type": "string",
          "description": "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\".",
          "required": false,
          "location": "body"
        },
        {
          "name": "allow_squash_merge",
          "type": "boolean",
          "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
          "default": true,
          "required": false,
          "location": "body"
        },
        {
          "name": "allow_merge_commit",
          "type": "boolean",
          "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
          "default": true,
          "required": false,
          "location": "body"
        },
        {
          "name": "allow_rebase_merge",
          "type": "boolean",
          "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
          "default": true,
          "required": false,
          "location": "body"
        }
      ],
      "description": "**Note**: There are two endpoints for creating a repository: one to create a repository on a user account, and one to create a repository in an organization. The organization endpoint is fully enabled for [GitHub Apps](https://developer.github.com/v3/apps/available-endpoints/), whereas the user endpoint is enabled only for [user-to-server requests](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#user-to-server-requests).\n\n**OAuth scope requirements**\n\nWhen using [OAuth](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n\n*   `public_repo` scope or `repo` scope to create a public repository\n*   `repo` scope to create a private repository",
      "idName": "create-in-org",
      "documentationUrl": "https://developer.github.com/v3/repos/#create"
    },
    {
      "name": "Get",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.",
      "idName": "get",
      "documentationUrl": "https://developer.github.com/v3/repos/#get"
    },
    {
      "name": "Edit",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/repos/:owner/:repo",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The name of the repository.",
          "required": true,
          "location": "body"
        },
        {
          "name": "description",
          "type": "string",
          "description": "A short description of the repository.",
          "required": false,
          "location": "body"
        },
        {
          "name": "homepage",
          "type": "string",
          "description": "A URL with more information about the repository.",
          "required": false,
          "location": "body"
        },
        {
          "name": "private",
          "type": "boolean",
          "description": "Either `true` to make the repository private or `false` to make it public. Creating private repositories requires a paid GitHub account. Default: `false`.  \n**Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.",
          "default": false,
          "required": false,
          "location": "body"
        },
        {
          "name": "has_issues",
          "type": "boolean",
          "description": "Either `true` to enable issues for this repository or `false` to disable them.",
          "default": true,
          "required": false,
          "location": "body"
        },
        {
          "name": "has_projects",
          "type": "boolean",
          "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
          "default": true,
          "required": false,
          "location": "body"
        },
        {
          "name": "has_wiki",
          "type": "boolean",
          "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
          "default": true,
          "required": false,
          "location": "body"
        },
        {
          "name": "default_branch",
          "type": "string",
          "description": "Updates the default branch for this repository.",
          "required": false,
          "location": "body"
        },
        {
          "name": "allow_squash_merge",
          "type": "boolean",
          "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
          "default": true,
          "required": false,
          "location": "body"
        },
        {
          "name": "allow_merge_commit",
          "type": "boolean",
          "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
          "default": true,
          "required": false,
          "location": "body"
        },
        {
          "name": "allow_rebase_merge",
          "type": "boolean",
          "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
          "default": true,
          "required": false,
          "location": "body"
        },
        {
          "name": "archived",
          "type": "boolean",
          "description": "`true` to archive this repository. **Note**: You cannot unarchive repositories through the API.",
          "default": false,
          "required": false,
          "location": "body"
        }
      ],
      "description": "**Note**: To edit a repository's topics, use the [`topics` endpoint](#replace-all-topics-for-a-repository).",
      "idName": "edit",
      "documentationUrl": "https://developer.github.com/v3/repos/#edit"
    },
    {
      "name": "List all topics for a repository",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/topics",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "list-topics",
      "documentationUrl": "https://developer.github.com/v3/repos/#list-all-topics-for-a-repository"
    },
    {
      "name": "Replace all topics for a repository",
      "enabledForApps": true,
      "method": "PUT",
      "path": "/repos/:owner/:repo/topics",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "names",
          "type": "string[]",
          "description": "An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository.",
          "required": true,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "replace-topics",
      "documentationUrl": "https://developer.github.com/v3/repos/#replace-all-topics-for-a-repository"
    },
    {
      "name": "List contributors",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/contributors",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "anon",
          "type": "string",
          "description": "Set to `1` or `true` to include anonymous contributors in results.",
          "required": false,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.\n\nGitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.",
      "idName": "list-contributors",
      "documentationUrl": "https://developer.github.com/v3/repos/#list-contributors"
    },
    {
      "name": "List languages",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/languages",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.",
      "idName": "list-languages",
      "documentationUrl": "https://developer.github.com/v3/repos/#list-languages"
    },
    {
      "name": "List teams",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/teams",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-teams",
      "documentationUrl": "https://developer.github.com/v3/repos/#list-teams"
    },
    {
      "name": "List tags",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/tags",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-tags",
      "documentationUrl": "https://developer.github.com/v3/repos/#list-tags"
    },
    {
      "name": "Delete a repository",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.\n\nIf an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response:",
      "idName": "delete",
      "documentationUrl": "https://developer.github.com/v3/repos/#delete-a-repository"
    },
    {
      "name": "Transfer a repository",
      "enabledForApps": false,
      "method": "POST",
      "path": "/repos/:owner/:repo/transfer",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "new_owner",
          "type": "string",
          "description": "**Required:** The username or organization name the repository will be transferred to.",
          "required": false,
          "location": "body"
        },
        {
          "name": "team_id",
          "type": "integer[]",
          "description": "ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).",
      "idName": "transfer",
      "documentationUrl": "https://developer.github.com/v3/repos/#transfer-a-repository"
    },
    {
      "name": "List branches",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/branches",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "protected",
          "type": "boolean",
          "description": "Setting to `true` returns only protected branches.",
          "required": false,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-branches",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#list-branches"
    },
    {
      "name": "Get branch",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/branches/:branch",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-branch",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#get-branch"
    },
    {
      "name": "Get branch protection",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/branches/:branch/protection",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-branch-protection",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#get-branch-protection"
    },
    {
      "name": "Update branch protection",
      "enabledForApps": true,
      "method": "PUT",
      "path": "/repos/:owner/:repo/branches/:branch/protection",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "required_status_checks",
          "type": "object",
          "description": "Require status checks to pass before merging. Set to `null` to disable.",
          "required": true,
          "allowNull": true,
          "location": "body"
        },
        {
          "name": "required_status_checks.strict",
          "type": "boolean",
          "description": "Require branches to be up to date before merging.",
          "required": true,
          "location": "body"
        },
        {
          "name": "required_status_checks.contexts",
          "type": "string[]",
          "description": "The list of status checks to require in order to merge into this branch",
          "required": true,
          "location": "body"
        },
        {
          "name": "enforce_admins",
          "type": "boolean",
          "description": "Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.",
          "required": true,
          "allowNull": true,
          "location": "body"
        },
        {
          "name": "required_pull_request_reviews",
          "type": "object",
          "description": "Require at least one approving review on a pull request, before merging. Set to `null` to disable.",
          "required": true,
          "allowNull": true,
          "location": "body"
        },
        {
          "name": "required_pull_request_reviews.dismissal_restrictions",
          "type": "object",
          "description": "Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
          "required": false,
          "location": "body"
        },
        {
          "name": "required_pull_request_reviews.dismissal_restrictions.users",
          "type": "string[]",
          "description": "The list of user `login`s with dismissal access",
          "required": false,
          "location": "body"
        },
        {
          "name": "required_pull_request_reviews.dismissal_restrictions.teams",
          "type": "string[]",
          "description": "The list of team `slug`s with dismissal access",
          "required": false,
          "location": "body"
        },
        {
          "name": "required_pull_request_reviews.dismiss_stale_reviews",
          "type": "boolean",
          "description": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.",
          "required": false,
          "location": "body"
        },
        {
          "name": "required_pull_request_reviews.require_code_owner_reviews",
          "type": "boolean",
          "description": "Blocks merging pull requests until code owners review them.",
          "required": false,
          "location": "body"
        },
        {
          "name": "required_pull_request_reviews.required_approving_review_count",
          "type": "integer",
          "description": "Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6.",
          "required": false,
          "location": "body"
        },
        {
          "name": "restrictions",
          "type": "object",
          "description": "Restrict who can push to this branch. Team and user `restrictions` are only available for organization-owned repositories. Set to `null` to disable.",
          "required": true,
          "allowNull": true,
          "location": "body"
        },
        {
          "name": "restrictions.users",
          "type": "string[]",
          "description": "The list of user `login`s with push access",
          "required": false,
          "location": "body"
        },
        {
          "name": "restrictions.teams",
          "type": "string[]",
          "description": "The list of team `slug`s with push access",
          "required": false,
          "location": "body"
        }
      ],
      "description": "Protecting a branch requires admin or owner permissions to the repository.\n\n**Note**: Passing new arrays of `users` and `teams` replaces their previous values.\n\n**Note**: The list of users and teams in total is limited to 100 items.",
      "idName": "update-branch-protection",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#update-branch-protection"
    },
    {
      "name": "Remove branch protection",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/branches/:branch/protection",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "remove-branch-protection",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#remove-branch-protection"
    },
    {
      "name": "Get required status checks of protected branch",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-protected-branch-required-status-checks",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#get-required-status-checks-of-protected-branch"
    },
    {
      "name": "Update required status checks of protected branch",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "strict",
          "type": "boolean",
          "description": "Require branches to be up to date before merging.",
          "required": false,
          "location": "body"
        },
        {
          "name": "contexts",
          "type": "string[]",
          "description": "The list of status checks to require in order to merge into this branch",
          "required": false,
          "location": "body"
        }
      ],
      "description": "Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.",
      "idName": "update-protected-branch-required-status-checks",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#update-required-status-checks-of-protected-branch"
    },
    {
      "name": "Remove required status checks of protected branch",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "remove-protected-branch-required-status-checks",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#remove-required-status-checks-of-protected-branch"
    },
    {
      "name": "List required status checks contexts of protected branch",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "list-protected-branch-required-status-checks-contexts",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#list-required-status-checks-contexts-of-protected-branch"
    },
    {
      "name": "Replace required status checks contexts of protected branch",
      "enabledForApps": true,
      "method": "PUT",
      "path": "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "replace-protected-branch-required-status-checks-contexts",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#replace-required-status-checks-contexts-of-protected-branch"
    },
    {
      "name": "Add required status checks contexts of protected branch",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "add-protected-branch-required-status-checks-contexts",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#add-required-status-checks-contexts-of-protected-branch"
    },
    {
      "name": "Remove required status checks contexts of protected branch",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "remove-protected-branch-required-status-checks-contexts",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#remove-required-status-checks-contexts-of-protected-branch"
    },
    {
      "name": "Get pull request review enforcement of protected branch",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-protected-branch-pull-request-review-enforcement",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#get-pull-request-review-enforcement-of-protected-branch"
    },
    {
      "name": "Update pull request review enforcement of protected branch",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "dismissal_restrictions",
          "type": "object",
          "description": "Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
          "required": false,
          "location": "body"
        },
        {
          "name": "dismissal_restrictions.users",
          "type": "string[]",
          "description": "The list of user `login`s with dismissal access",
          "required": false,
          "location": "body"
        },
        {
          "name": "dismissal_restrictions.teams",
          "type": "string[]",
          "description": "The list of team `slug`s with dismissal access",
          "required": false,
          "location": "body"
        },
        {
          "name": "dismiss_stale_reviews",
          "type": "boolean",
          "description": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.",
          "required": false,
          "location": "body"
        },
        {
          "name": "require_code_owner_reviews",
          "type": "boolean",
          "description": "Blocks merging pull requests until code owners have reviewed.",
          "required": false,
          "location": "body"
        },
        {
          "name": "required_approving_review_count",
          "type": "integer",
          "description": "Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.\n\n**Note**: Passing new arrays of `users` and `teams` replaces their previous values.",
      "idName": "update-protected-branch-pull-request-review-enforcement",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#update-pull-request-review-enforcement-of-protected-branch"
    },
    {
      "name": "Remove pull request review enforcement of protected branch",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "remove-protected-branch-pull-request-review-enforcement",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#remove-pull-request-review-enforcement-of-protected-branch"
    },
    {
      "name": "Get required signatures of protected branch",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.\n\n**Note**: You must enable branch protection to require signed commits.",
      "idName": "get-protected-branch-required-signatures",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#get-required-signatures-of-protected-branch"
    },
    {
      "name": "Add required signatures of protected branch",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.",
      "idName": "add-protected-branch-required-signatures",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#add-required-signatures-of-protected-branch"
    },
    {
      "name": "Remove required signatures of protected branch",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.",
      "idName": "remove-protected-branch-required-signatures",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#remove-required-signatures-of-protected-branch"
    },
    {
      "name": "Get admin enforcement of protected branch",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-protected-branch-admin-enforcement",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#get-admin-enforcement-of-protected-branch"
    },
    {
      "name": "Add admin enforcement of protected branch",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.",
      "idName": "add-protected-branch-admin-enforcement",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#add-admin-enforcement-of-protected-branch"
    },
    {
      "name": "Remove admin enforcement of protected branch",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.",
      "idName": "remove-protected-branch-admin-enforcement",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#remove-admin-enforcement-of-protected-branch"
    },
    {
      "name": "Get restrictions of protected branch",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/branches/:branch/protection/restrictions",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "**Note**: Teams and users `restrictions` are only available for organization-owned repositories.",
      "idName": "get-protected-branch-restrictions",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#get-restrictions-of-protected-branch"
    },
    {
      "name": "Remove restrictions of protected branch",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/branches/:branch/protection/restrictions",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Disables the ability to restrict who can push to this branch.",
      "idName": "remove-protected-branch-restrictions",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#remove-restrictions-of-protected-branch"
    },
    {
      "name": "List team restrictions of protected branch",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Lists the teams who have push access to this branch. If you pass the `hellcat-preview` media type, the list includes child teams.",
      "idName": "list-protected-branch-team-restrictions",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#list-team-restrictions-of-protected-branch"
    },
    {
      "name": "Replace team restrictions of protected branch",
      "enabledForApps": true,
      "method": "PUT",
      "path": "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. If you pass the `hellcat-preview` media type, you can include child teams.\n\n| Type    | Description                                                                                                                         |\n| ------- | ----------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users and teams in total is limited to 100 items. |",
      "idName": "replace-protected-branch-team-restrictions",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#replace-team-restrictions-of-protected-branch"
    },
    {
      "name": "Add team restrictions of protected branch",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Grants the specified teams push access for this branch. If you pass the `hellcat-preview` media type, you can also give push access to child teams.\n\n| Type    | Description                                                                                                                         |\n| ------- | ----------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users and teams in total is limited to 100 items. |",
      "idName": "add-protected-branch-team-restrictions",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#add-team-restrictions-of-protected-branch"
    },
    {
      "name": "Remove team restrictions of protected branch",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Removes the ability of a team to push to this branch. If you pass the `hellcat-preview` media type, you can include child teams.\n\n| Type    | Description                                                                                                                                  |\n| ------- | -------------------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users and teams in total is limited to 100 items. |",
      "idName": "remove-protected-branch-team-restrictions",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#remove-team-restrictions-of-protected-branch"
    },
    {
      "name": "List user restrictions of protected branch",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Lists the people who have push access to this branch.",
      "idName": "list-protected-branch-user-restrictions",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#list-user-restrictions-of-protected-branch"
    },
    {
      "name": "Replace user restrictions of protected branch",
      "enabledForApps": true,
      "method": "PUT",
      "path": "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.\n\n| Type    | Description                                                                                                            |\n| ------- | ---------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames for people who can have push access. **Note**: The list of users and teams in total is limited to 100 items. |",
      "idName": "replace-protected-branch-user-restrictions",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#replace-user-restrictions-of-protected-branch"
    },
    {
      "name": "Add user restrictions of protected branch",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Grants the specified people push access for this branch.\n\n| Type    | Description                                                                                                            |\n| ------- | ---------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames for people who can have push access. **Note**: The list of users and teams in total is limited to 100 items. |",
      "idName": "add-protected-branch-user-restrictions",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#add-user-restrictions-of-protected-branch"
    },
    {
      "name": "Remove user restrictions of protected branch",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "branch",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Removes the ability of a team to push to this branch.\n\n| Type    | Description                                                                                                                            |\n| ------- | -------------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames of the people who should no longer have push access. **Note**: The list of users and teams in total is limited to 100 items. |",
      "idName": "remove-protected-branch-user-restrictions",
      "documentationUrl": "https://developer.github.com/v3/repos/branches/#remove-user-restrictions-of-protected-branch"
    },
    {
      "name": "List collaborators",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/collaborators",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "affiliation",
          "type": "string",
          "description": "Filter collaborators returned by their affiliation. Can be one of:  \n\\* `outside`: All outside collaborators of an organization-owned repository.  \n\\* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.  \n\\* `all`: All collaborators the authenticated user can see.",
          "default": "all",
          "required": false,
          "enum": [
            "outside",
            "direct",
            "all"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\n\nIf you pass the `hellcat-preview` media type, team members will include the members of child teams.",
      "idName": "list-collaborators",
      "documentationUrl": "https://developer.github.com/v3/repos/collaborators/#list-collaborators"
    },
    {
      "name": "Check if a user is a collaborator",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/collaborators/:username",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\n\nIf you pass the `hellcat-preview` media type, team members will include the members of child teams.",
      "idName": "check-collaborator",
      "documentationUrl": "https://developer.github.com/v3/repos/collaborators/#check-if-a-user-is-a-collaborator"
    },
    {
      "name": "Review a user's permission level",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/collaborators/:username/permission",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Possible values for the `permission` key: `admin`, `write`, `read`, `none`.",
      "idName": "review-user-permission-level",
      "documentationUrl": "https://developer.github.com/v3/repos/collaborators/#review-a-users-permission-level"
    },
    {
      "name": "Add user as a collaborator",
      "enabledForApps": true,
      "method": "PUT",
      "path": "/repos/:owner/:repo/collaborators/:username",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "permission",
          "type": "string",
          "description": "The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:  \n\\* `pull` \\- can pull, but not push to or administer this repository.  \n\\* `push` \\- can pull and push, but not administer this repository.  \n\\* `admin` \\- can pull, push and administer this repository.",
          "default": "push",
          "required": false,
          "enum": [
            "pull",
            "push",
            "admin"
          ],
          "location": "body"
        }
      ],
      "description": "Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"\n\nThe invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://developer.github.com/v3/repos/invitations/).\n\n**Rate limits**\n\nTo prevent abuse, you are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.",
      "idName": "add-collaborator",
      "documentationUrl": "https://developer.github.com/v3/repos/collaborators/#add-user-as-a-collaborator"
    },
    {
      "name": "Remove user as a collaborator",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/collaborators/:username",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "remove-collaborator",
      "documentationUrl": "https://developer.github.com/v3/repos/collaborators/#remove-user-as-a-collaborator"
    },
    {
      "name": "List commit comments for a repository",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/comments",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Commit Comments use [these custom media types](#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n\nComments are ordered by ascending ID.",
      "idName": "list-commit-comments",
      "documentationUrl": "https://developer.github.com/v3/repos/comments/#list-commit-comments-for-a-repository"
    },
    {
      "name": "List comments for a single commit",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/commits/:ref/comments",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "ref",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-comments-for-commit",
      "documentationUrl": "https://developer.github.com/v3/repos/comments/#list-comments-for-a-single-commit"
    },
    {
      "name": "Create a commit comment",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/commits/:sha/comments",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "sha",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "body",
          "type": "string",
          "description": "The contents of the comment.",
          "required": true,
          "location": "body"
        },
        {
          "name": "path",
          "type": "string",
          "description": "Relative path of the file to comment on.",
          "required": false,
          "location": "body"
        },
        {
          "name": "position",
          "type": "integer",
          "description": "Line index in the diff to comment on.",
          "required": false,
          "location": "body"
        },
        {
          "name": "line",
          "type": "integer",
          "description": "**Deprecated**. Use **position** parameter instead. Line number in the file to comment on.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "create-commit-comment",
      "documentationUrl": "https://developer.github.com/v3/repos/comments/#create-a-commit-comment"
    },
    {
      "name": "Get a single commit comment",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/comments/:comment_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-commit-comment",
      "documentationUrl": "https://developer.github.com/v3/repos/comments/#get-a-single-commit-comment"
    },
    {
      "name": "Update a commit comment",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/repos/:owner/:repo/comments/:comment_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "body",
          "type": "string",
          "description": "The contents of the comment",
          "required": true,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "update-commit-comment",
      "documentationUrl": "https://developer.github.com/v3/repos/comments/#update-a-commit-comment"
    },
    {
      "name": "Delete a commit comment",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/comments/:comment_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "delete-commit-comment",
      "documentationUrl": "https://developer.github.com/v3/repos/comments/#delete-a-commit-comment"
    },
    {
      "name": "List commits on a repository",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/commits",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "sha",
          "type": "string",
          "description": "SHA or branch to start listing commits from.",
          "default": "the repository’s default branch (usually `master`).",
          "required": false,
          "location": "query"
        },
        {
          "name": "path",
          "type": "string",
          "description": "Only commits containing this file path will be returned.",
          "required": false,
          "location": "query"
        },
        {
          "name": "author",
          "type": "string",
          "description": "GitHub login or email address by which to filter by commit author.",
          "required": false,
          "location": "query"
        },
        {
          "name": "since",
          "type": "string",
          "description": "Only commits after this date will be returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "required": false,
          "location": "query"
        },
        {
          "name": "until",
          "type": "string",
          "description": "Only commits before this date will be returned. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "required": false,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-commits",
      "documentationUrl": "https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository"
    },
    {
      "name": "Get a single commit",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/commits/:sha",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "sha",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Diffs with binary data will have no 'patch' property. Pass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.",
      "idName": "get-commit",
      "documentationUrl": "https://developer.github.com/v3/repos/commits/#get-a-single-commit"
    },
    {
      "name": "Get the SHA-1 of a commit reference",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/commits/:ref",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "ref",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Users with read access can get the SHA-1 of a commit reference:\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n\n\nTo check if a remote reference's SHA-1 is the same as your local reference's SHA-1, make a `GET` request and provide the current SHA-1 for the local reference as the ETag.\n\nThe SHA-1 of the commit reference.\n\n",
      "idName": "get-commit-ref-sha",
      "documentationUrl": "https://developer.github.com/v3/repos/commits/#get-the-sha-1-of-a-commit-reference"
    },
    {
      "name": "Compare two commits",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/compare/:base...:head",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "base",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "head",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Both `:base` and `:head` must be branch names in `:repo`. To compare branches across other repositories in the same network as `:repo`, use the format `<USERNAME>:branch`. For example:\n\n```\nGET /repos/:owner/:repo/compare/hubot:branchname...octocat:branchname\n```\n\nThe response from the API is equivalent to running the `git log base..head` command; however, commits are returned in reverse chronological order.\n\nPass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.\n\n**Working with large comparisons**\n\nThe response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [Commit List API](https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository) to enumerate all commits in the range.\n\nFor comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long to generate. You can typically resolve this error by using a smaller commit range.",
      "idName": "compare-two-commits",
      "documentationUrl": "https://developer.github.com/v3/repos/commits/#compare-two-commits"
    },
    {
      "name": "Retrieve community profile metrics",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/community/profile",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "This endpoint will return all community profile metrics, including an overall health score, repository description, the presence of documentation, detected code of conduct, detected license, and the presence of ISSUE\\_TEMPLATE, PULL\\_REQUEST_TEMPLATE, README, and CONTRIBUTING files.",
      "idName": "retrieve-community-profile-metrics",
      "documentationUrl": "https://developer.github.com/v3/repos/community/#retrieve-community-profile-metrics"
    },
    {
      "name": "Get the README",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/readme",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "ref",
          "type": "string",
          "description": "The name of the commit/branch/tag.",
          "default": "the repository’s default branch (usually `master`)",
          "required": false,
          "location": "query"
        }
      ],
      "description": "This method returns the preferred README for a repository.\n\nREADMEs support [custom media types](#custom-media-types) for retrieving the raw content or rendered HTML.",
      "idName": "get-readme",
      "documentationUrl": "https://developer.github.com/v3/repos/contents/#get-the-readme"
    },
    {
      "name": "Get contents",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/contents/:path",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "path",
          "type": "string",
          "description": "The content path.",
          "required": true,
          "location": "url"
        },
        {
          "name": "ref",
          "type": "string",
          "description": "The name of the commit/branch/tag.",
          "default": "the repository’s default branch (usually `master`)",
          "required": false,
          "location": "query"
        }
      ],
      "description": "This method returns the contents of a file or directory in a repository.\n\nFiles and symlinks support [a custom media type](#custom-media-types) for retrieving the raw content or rendered HTML (when supported). All content types support [a custom media type](#custom-media-types) to ensure the content is returned in a consistent object format.\n\n**Note**:\n\n*   To get a repository's contents recursively, you can [recursively get the tree](https://developer.github.com/v3/git/trees/).\n*   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees API](https://developer.github.com/v3/git/trees/#get-a-tree).\n*   This API supports files up to 1 megabyte in size.\n\nThe response will be an array of objects, one object for each item in the directory.\n\nWhen listing the contents of a directory, submodules have their \"type\" specified as \"file\". Logically, the value _should_ be \"submodule\". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as \"submodule\".\n\nIf the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the API responds with the content of the file (in the [format shown above](#response-if-content-is-a-file)).\n\nOtherwise, the API responds with an object describing the symlink itself:\n\nThe `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit.\n\nIf the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links[\"git\"]`) and the github.com URLs (`html_url` and `_links[\"html\"]`) will have null values.",
      "idName": "get-contents",
      "documentationUrl": "https://developer.github.com/v3/repos/contents/#get-contents"
    },
    {
      "name": "Create a file",
      "enabledForApps": true,
      "method": "PUT",
      "path": "/repos/:owner/:repo/contents/:path",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "path",
          "type": "string",
          "description": "The content path.",
          "required": true,
          "location": "url"
        },
        {
          "name": "message",
          "type": "string",
          "description": "The commit message.",
          "required": true,
          "location": "body"
        },
        {
          "name": "content",
          "type": "string",
          "description": "The new file content, Base64 encoded.",
          "required": true,
          "location": "body"
        },
        {
          "name": "branch",
          "type": "string",
          "description": "The branch name.",
          "default": "the repository’s default branch (usually `master`)",
          "required": false,
          "location": "body"
        },
        {
          "name": "committer",
          "type": "object",
          "description": "object containing information about the committer.",
          "location": "body"
        },
        {
          "name": "author",
          "type": "object",
          "description": "object containing information about the author.",
          "location": "body"
        }
      ],
      "description": "This method creates a new file in a repository\n\nThe `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.\n\nYou must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.\n\nBoth the `author` and `committer` parameters have the same keys:\n\n| name  | type   | description                                          |\n| ----- | ------ | ---------------------------------------------------- |\n| name  | string | The name of the author (or committer) of the commit  |\n| email | string | The email of the author (or committer) of the commit |",
      "idName": "create-file",
      "documentationUrl": "https://developer.github.com/v3/repos/contents/#create-a-file"
    },
    {
      "name": "Update a file",
      "enabledForApps": true,
      "method": "PUT",
      "path": "/repos/:owner/:repo/contents/:path",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "path",
          "type": "string",
          "description": "The content path.",
          "required": true,
          "location": "url"
        },
        {
          "name": "message",
          "type": "string",
          "description": "The commit message.",
          "required": true,
          "location": "body"
        },
        {
          "name": "content",
          "type": "string",
          "description": "The updated file content, Base64 encoded.",
          "required": true,
          "location": "body"
        },
        {
          "name": "sha",
          "type": "string",
          "description": "The blob SHA of the file being replaced.",
          "required": true,
          "location": "body"
        },
        {
          "name": "branch",
          "type": "string",
          "description": "The branch name.",
          "default": "the repository’s default branch (usually `master`)",
          "required": false,
          "location": "body"
        },
        {
          "name": "committer",
          "type": "object",
          "description": "object containing information about the committer.",
          "location": "body"
        },
        {
          "name": "author",
          "type": "object",
          "description": "object containing information about the author.",
          "location": "body"
        }
      ],
      "description": "This method updates a file in a repository\n\nThe `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.\n\nYou must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.\n\nBoth the `author` and `committer` parameters have the same keys:\n\n| name  | type   | description                                          |\n| ----- | ------ | ---------------------------------------------------- |\n| name  | string | The name of the author (or committer) of the commit  |\n| email | string | The email of the author (or committer) of the commit |",
      "idName": "update-file",
      "documentationUrl": "https://developer.github.com/v3/repos/contents/#update-a-file"
    },
    {
      "name": "Delete a file",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/contents/:path",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "path",
          "type": "string",
          "description": "The content path.",
          "required": true,
          "location": "url"
        },
        {
          "name": "message",
          "type": "string",
          "description": "The commit message.",
          "required": true,
          "location": "body"
        },
        {
          "name": "sha",
          "type": "string",
          "description": "The blob SHA of the file being replaced.",
          "required": true,
          "location": "body"
        },
        {
          "name": "branch",
          "type": "string",
          "description": "The branch name.",
          "default": "the repository’s default branch (usually `master`)",
          "required": false,
          "location": "body"
        },
        {
          "name": "committer",
          "type": "object",
          "description": "object containing information about the committer.",
          "location": "body"
        },
        {
          "name": "author",
          "type": "object",
          "description": "object containing information about the author.",
          "location": "body"
        }
      ],
      "description": "This method deletes a file in a repository\n\nThe `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.\n\nYou must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.\n\nBoth the `author` and `committer` parameters have the same keys:\n\n| name  | type   | description                                          |\n| ----- | ------ | ---------------------------------------------------- |\n| name  | string | The name of the author (or committer) of the commit  |\n| email | string | The email of the author (or committer) of the commit |",
      "idName": "delete-file",
      "documentationUrl": "https://developer.github.com/v3/repos/contents/#delete-a-file"
    },
    {
      "name": "Get archive link",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/:archive_format/:ref",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "archive_format",
          "type": "string",
          "description": "Can be either `tarball` or `zipball`.",
          "default": "tarball",
          "required": true,
          "enum": [
            "tarball",
            "zipball"
          ],
          "location": "url"
        },
        {
          "name": "ref",
          "type": "string",
          "description": "A valid Git reference.",
          "default": "the repository’s default branch (usually `master`)",
          "required": true,
          "location": "url"
        }
      ],
      "description": "This method will return a `302` to a URL to download a tarball or zipball archive for a repository. Please make sure your HTTP framework is configured to follow redirects or you will need to use the `Location` header to make a second `GET` request.\n\n_Note_: For private repositories, these links are temporary and expire after five minutes.\n\nTo follow redirects with curl, use the `-L` switch:\n\n",
      "idName": "get-archive-link",
      "documentationUrl": "https://developer.github.com/v3/repos/contents/#get-archive-link"
    },
    {
      "name": "List deploy keys",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/keys",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-deploy-keys",
      "documentationUrl": "https://developer.github.com/v3/repos/keys/#list-deploy-keys"
    },
    {
      "name": "Get a deploy key",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/keys/:key_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "key_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-deploy-key",
      "documentationUrl": "https://developer.github.com/v3/repos/keys/#get-a-deploy-key"
    },
    {
      "name": "Add a new deploy key",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/keys",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "title",
          "type": "string",
          "description": "A name for the key.",
          "required": false,
          "location": "body"
        },
        {
          "name": "key",
          "type": "string",
          "description": "The contents of the key.",
          "required": true,
          "location": "body"
        },
        {
          "name": "read_only",
          "type": "boolean",
          "description": "If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "Here's how you can create a read-only deploy key:\n\n",
      "idName": "add-deploy-key",
      "documentationUrl": "https://developer.github.com/v3/repos/keys/#add-a-new-deploy-key"
    },
    {
      "name": "Remove a deploy key",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/keys/:key_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "key_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "remove-deploy-key",
      "documentationUrl": "https://developer.github.com/v3/repos/keys/#remove-a-deploy-key"
    },
    {
      "name": "List deployments",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/deployments",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "sha",
          "type": "string",
          "description": "The SHA that was recorded at creation time.",
          "default": "none",
          "required": false,
          "location": "query"
        },
        {
          "name": "ref",
          "type": "string",
          "description": "The name of the ref. This can be a branch, tag, or SHA.",
          "default": "none",
          "required": false,
          "location": "query"
        },
        {
          "name": "task",
          "type": "string",
          "description": "The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).",
          "default": "none",
          "required": false,
          "location": "query"
        },
        {
          "name": "environment",
          "type": "string",
          "description": "The name of the environment that was deployed to (e.g., `staging` or `production`).",
          "default": "none",
          "required": false,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-deployments",
      "documentationUrl": "https://developer.github.com/v3/repos/deployments/#list-deployments"
    },
    {
      "name": "Get a single deployment",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/deployments/:deployment_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "deployment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "\n\n**Note:** If a user created a deployment via a GitHub App, the `performed_via_github_app` key will contain information on that GitHub App.",
      "idName": "get-deployment",
      "documentationUrl": "https://developer.github.com/v3/repos/deployments/#get-a-single-deployment"
    },
    {
      "name": "Create a deployment",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/deployments",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "ref",
          "type": "string",
          "description": "The ref to deploy. This can be a branch, tag, or SHA.",
          "required": true,
          "location": "body"
        },
        {
          "name": "task",
          "type": "string",
          "description": "Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).",
          "default": "deploy",
          "required": false,
          "location": "body"
        },
        {
          "name": "auto_merge",
          "type": "boolean",
          "description": "Attempts to automatically merge the default branch into the requested ref, if it is behind the default branch.",
          "default": true,
          "required": false,
          "location": "body"
        },
        {
          "name": "required_contexts",
          "type": "string[]",
          "description": "The status contexts to verify against commit status checks. If this parameter is omitted, then all unique contexts will be verified before a deployment is created. To bypass checking entirely pass an empty array. Defaults to all unique contexts.",
          "required": false,
          "location": "body"
        },
        {
          "name": "payload",
          "type": "string",
          "description": "JSON payload with extra information about the deployment.",
          "default": "\"\"",
          "required": false,
          "location": "body"
        },
        {
          "name": "environment",
          "type": "string",
          "description": "Name for the target deployment environment (e.g., `production`, `staging`, `qa`).",
          "default": "production",
          "required": false,
          "location": "body"
        },
        {
          "name": "description",
          "type": "string",
          "description": "Short description of the deployment.",
          "default": "\"\"",
          "required": false,
          "location": "body"
        },
        {
          "name": "transient_environment",
          "type": "boolean",
          "description": "Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. **This parameter requires a custom media type to be specified. Please see more in the alert below.**",
          "default": false,
          "required": false,
          "location": "body"
        },
        {
          "name": "production_environment",
          "type": "boolean",
          "description": "Specifies if the given environment is one that end-users directly interact with. **This parameter requires a custom media type to be specified. Please see more in the alert below.**",
          "default": "`true` when `environment` is `production` and `false` otherwise",
          "required": false,
          "location": "body"
        }
      ],
      "description": "Deployments offer a few configurable parameters with sane defaults.\n\nThe `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them before we merge a pull request.\n\nThe `environment` parameter allows deployments to be issued to different runtime environments. Teams often have multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This allows for easy tracking of which environments had deployments requested. The default environment is `production`.\n\nThe `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds, the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will return a failure response.\n\nBy default, [commit statuses](https://developer.github.com/v3/repos/statuses) for every submitted context must be in a `success` state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do not require any contexts or create any commit statuses, the deployment will always succeed.\n\nThe `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text field that will be passed on when a deployment event is dispatched.\n\nThe `task` parameter is used by the deployment system to allow different execution paths. In the web world this might be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an application with debugging enabled.\n\nUsers with `repo` or `repo_deployment` scopes can create a deployment for a given ref:\n\nA simple example putting the user and room into the payload to notify back to chat networks.\n\nA more advanced example specifying required commit statuses and bypassing auto-merging.\n\nThis error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.\n\nThis error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success` status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.",
      "idName": "create-deployment",
      "documentationUrl": "https://developer.github.com/v3/repos/deployments/#create-a-deployment"
    },
    {
      "name": "List deployment statuses",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/deployments/:deployment_id/statuses",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "deployment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "id",
          "type": "integer",
          "description": "The deployment ID to list the statuses from.",
          "required": true,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Users with pull access can view deployment statuses for a deployment:",
      "idName": "list-deployment-statuses",
      "documentationUrl": "https://developer.github.com/v3/repos/deployments/#list-deployment-statuses"
    },
    {
      "name": "Get a single deployment status",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/deployments/:deployment_id/statuses/:status_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "deployment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "id",
          "type": "integer",
          "description": "The deployment ID to list the statuses from.",
          "required": true,
          "location": "query"
        },
        {
          "name": "status_id",
          "type": "integer",
          "description": "The deployment status ID.",
          "required": true,
          "location": "url"
        }
      ],
      "description": "Users with pull access can view a deployment status for a deployment:\n\n\n\n**Note:** If a user created a deployment status via a GitHub App, the `performed_via_github_app` key will contain information on that GitHub App.",
      "idName": "get-deployment-status",
      "documentationUrl": "https://developer.github.com/v3/repos/deployments/#get-a-single-deployment-status"
    },
    {
      "name": "Create a deployment status",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/deployments/:deployment_id/statuses",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "deployment_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "state",
          "type": "string",
          "description": "The state of the status. Can be one of `error`, `failure`, `inactive`, `pending`, or `success`. **The `inactive` state requires a custom media type to be specified. Please see more in the alert below.**",
          "required": true,
          "enum": [
            "error",
            "failure",
            "inactive",
            "pending",
            "success"
          ],
          "location": "body"
        },
        {
          "name": "target_url",
          "type": "string",
          "description": "The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment.",
          "default": "\"\"",
          "required": false,
          "location": "body"
        },
        {
          "name": "log_url",
          "type": "string",
          "description": "This is functionally equivalent to `target_url`. We will continue accept `target_url` to support legacy uses, but we recommend modifying this to the new name to avoid confusion. **This parameter requires a custom media type to be specified. Please see more in the alert below.**",
          "default": "\"\"",
          "required": false,
          "location": "body"
        },
        {
          "name": "description",
          "type": "string",
          "description": "A short description of the status. Maximum length of 140 characters.",
          "default": "\"\"",
          "required": false,
          "location": "body"
        },
        {
          "name": "environment_url",
          "type": "string",
          "description": "Sets the URL for accessing your environment. **This parameter requires a custom media type to be specified. Please see more in the alert below.**",
          "default": "\"\"",
          "required": false,
          "location": "body"
        },
        {
          "name": "auto_inactive",
          "type": "boolean",
          "description": "Adds a new `inactive` status to all non-transient, non-production environment deployments with the same repository and environment name as the created status's deployment. **This parameter requires a custom media type to be specified. Please see more in the alert below.**",
          "default": true,
          "required": false,
          "location": "body"
        }
      ],
      "description": "Users with push access can create deployment statuses for a given deployment:",
      "idName": "create-deployment-status",
      "documentationUrl": "https://developer.github.com/v3/repos/deployments/#create-a-deployment-status"
    },
    {
      "name": "List downloads for a repository",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/downloads",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-downloads",
      "documentationUrl": "https://developer.github.com/v3/repos/downloads/#list-downloads-for-a-repository"
    },
    {
      "name": "Get a single download",
      "enabledForApps": false,
      "method": "GET",
      "path": "/repos/:owner/:repo/downloads/:download_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "download_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-download",
      "documentationUrl": "https://developer.github.com/v3/repos/downloads/#get-a-single-download"
    },
    {
      "name": "Delete a download",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/downloads/:download_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "download_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "delete-download",
      "documentationUrl": "https://developer.github.com/v3/repos/downloads/#delete-a-download"
    },
    {
      "name": "List forks",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/forks",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "The sort order. Can be either `newest`, `oldest`, or `stargazers`.",
          "default": "newest",
          "required": false,
          "enum": [
            "newest",
            "oldest",
            "stargazers"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-forks",
      "documentationUrl": "https://developer.github.com/v3/repos/forks/#list-forks"
    },
    {
      "name": "Create a fork",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/forks",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "organization",
          "type": "string",
          "description": "Optional parameter to specify the organization name if forking into an organization.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "Create a fork for the authenticated user.\n\nForking a Repository happens asynchronously. Therefore, you may have to wait a short period before accessing the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub support](https://github.com/contact).",
      "idName": "create-fork",
      "documentationUrl": "https://developer.github.com/v3/repos/forks/#create-a-fork"
    },
    {
      "name": "List invitations for a repository",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/invitations",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.\n\n",
      "idName": "list-invitations",
      "documentationUrl": "https://developer.github.com/v3/repos/invitations/#list-invitations-for-a-repository"
    },
    {
      "name": "Delete a repository invitation",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/invitations/:invitation_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "invitation_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "delete-invitation",
      "documentationUrl": "https://developer.github.com/v3/repos/invitations/#delete-a-repository-invitation"
    },
    {
      "name": "Update a repository invitation",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/repos/:owner/:repo/invitations/:invitation_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "invitation_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "permissions",
          "type": "string",
          "description": "The permissions that the associated user will have on the repository. Valid values are `read`, `write`, and `admin`.",
          "required": false,
          "enum": [
            "read",
            "write",
            "admin"
          ],
          "location": "body"
        }
      ],
      "description": "",
      "idName": "update-invitation",
      "documentationUrl": "https://developer.github.com/v3/repos/invitations/#update-a-repository-invitation"
    },
    {
      "name": "List a user's repository invitations",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/repository_invitations",
      "params": [
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "When authenticating as a user, this endpoint will list all currently open repository invitations for that user.\n\n",
      "idName": "list-user-invitations",
      "documentationUrl": "https://developer.github.com/v3/repos/invitations/#list-a-users-repository-invitations"
    },
    {
      "name": "Accept a repository invitation",
      "enabledForApps": false,
      "method": "PATCH",
      "path": "/user/repository_invitations/:invitation_id",
      "params": [
        {
          "name": "invitation_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "accept-invitation",
      "documentationUrl": "https://developer.github.com/v3/repos/invitations/#accept-a-repository-invitation"
    },
    {
      "name": "Decline a repository invitation",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/user/repository_invitations/:invitation_id",
      "params": [
        {
          "name": "invitation_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "decline-invitation",
      "documentationUrl": "https://developer.github.com/v3/repos/invitations/#decline-a-repository-invitation"
    },
    {
      "name": "Perform a merge",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/merges",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "base",
          "type": "string",
          "description": "The name of the base branch that the head will be merged into.",
          "required": true,
          "location": "body"
        },
        {
          "name": "head",
          "type": "string",
          "description": "The head to merge. This can be a branch name or a commit SHA1.",
          "required": true,
          "location": "body"
        },
        {
          "name": "commit_message",
          "type": "string",
          "description": "Commit message to use for the merge commit. If omitted, a default message will be used.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "perform-merge",
      "documentationUrl": "https://developer.github.com/v3/repos/merging/#perform-a-merge"
    },
    {
      "name": "Get information about a Pages site",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/pages",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Responses during the preview period contain two additional fields:\n\n*   `html_url`: The absolute URL (with scheme) to the rendered site. For example, `https://username.github.io`.\n*   `source`: Information about the source branch and directory for the rendered site. The source field includes:\n    *   `branch`: The repo branch for [site source files](https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/) For example, _master_ or _gh-pages_.\n    *   `path`: The repo directory from which the site publishes. Can be either `/` or `/docs`.",
      "idName": "get-information-about-pages-site",
      "documentationUrl": "https://developer.github.com/v3/repos/pages/#get-information-about-a-pages-site"
    },
    {
      "name": "Request a page build",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/pages/builds",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.\n\nBuild requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.",
      "idName": "request-page-build",
      "documentationUrl": "https://developer.github.com/v3/repos/pages/#request-a-page-build"
    },
    {
      "name": "List Pages builds",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/pages/builds",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-pages-builds",
      "documentationUrl": "https://developer.github.com/v3/repos/pages/#list-pages-builds"
    },
    {
      "name": "Get latest Pages build",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/pages/builds/latest",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-latest-pages-build",
      "documentationUrl": "https://developer.github.com/v3/repos/pages/#get-latest-pages-build"
    },
    {
      "name": "Get a specific Pages build",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/pages/builds/:build_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "build_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-pages-build",
      "documentationUrl": "https://developer.github.com/v3/repos/pages/#get-a-specific-pages-build"
    },
    {
      "name": "List releases for a repository",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/releases",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://developer.github.com/v3/repos/#list-tags).\n\nInformation about published releases are available to everyone. Only users with push access will receive listings for draft releases.",
      "idName": "list-releases",
      "documentationUrl": "https://developer.github.com/v3/repos/releases/#list-releases-for-a-repository"
    },
    {
      "name": "Get a single release",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/releases/:release_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "release_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "**Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://developer.github.com/v3/#hypermedia).",
      "idName": "get-release",
      "documentationUrl": "https://developer.github.com/v3/repos/releases/#get-a-single-release"
    },
    {
      "name": "Get the latest release",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/releases/latest",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "View the latest published full release for the repository. Draft releases and prereleases are not returned by this endpoint.",
      "idName": "get-latest-release",
      "documentationUrl": "https://developer.github.com/v3/repos/releases/#get-the-latest-release"
    },
    {
      "name": "Get a release by tag name",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/releases/tags/:tag",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "tag",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Get a published release with the specified tag.",
      "idName": "get-release-by-tag",
      "documentationUrl": "https://developer.github.com/v3/repos/releases/#get-a-release-by-tag-name"
    },
    {
      "name": "Create a release",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/releases",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "tag_name",
          "type": "string",
          "description": "The name of the tag.",
          "required": true,
          "location": "body"
        },
        {
          "name": "target_commitish",
          "type": "string",
          "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists.",
          "default": "the repository's default branch (usually `master`).",
          "required": false,
          "location": "body"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The name of the release.",
          "required": false,
          "location": "body"
        },
        {
          "name": "body",
          "type": "string",
          "description": "Text describing the contents of the tag.",
          "required": false,
          "location": "body"
        },
        {
          "name": "draft",
          "type": "boolean",
          "description": "`true` to create a draft (unpublished) release, `false` to create a published one.",
          "default": false,
          "required": false,
          "location": "body"
        },
        {
          "name": "prerelease",
          "type": "boolean",
          "description": "`true` to identify the release as a prerelease. `false` to identify the release as a full release.",
          "default": false,
          "required": false,
          "location": "body"
        }
      ],
      "description": "Users with push access to the repository can create a release.",
      "idName": "create-release",
      "documentationUrl": "https://developer.github.com/v3/repos/releases/#create-a-release"
    },
    {
      "name": "Edit a release",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/repos/:owner/:repo/releases/:release_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "release_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "tag_name",
          "type": "string",
          "description": "The name of the tag.",
          "required": false,
          "location": "body"
        },
        {
          "name": "target_commitish",
          "type": "string",
          "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists.",
          "default": "the repository's default branch (usually `master`).",
          "required": false,
          "location": "body"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The name of the release.",
          "required": false,
          "location": "body"
        },
        {
          "name": "body",
          "type": "string",
          "description": "Text describing the contents of the tag.",
          "required": false,
          "location": "body"
        },
        {
          "name": "draft",
          "type": "boolean",
          "description": "`true` makes the release a draft, and `false` publishes the release.",
          "required": false,
          "location": "body"
        },
        {
          "name": "prerelease",
          "type": "boolean",
          "description": "`true` to identify the release as a prerelease, `false` to identify the release as a full release.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "Users with push access to the repository can edit a release.",
      "idName": "edit-release",
      "documentationUrl": "https://developer.github.com/v3/repos/releases/#edit-a-release"
    },
    {
      "name": "Delete a release",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/releases/:release_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "release_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Users with push access to the repository can delete a release.",
      "idName": "delete-release",
      "documentationUrl": "https://developer.github.com/v3/repos/releases/#delete-a-release"
    },
    {
      "name": "List assets for a release",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/releases/:release_id/assets",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "release_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-assets-for-release",
      "documentationUrl": "https://developer.github.com/v3/repos/releases/#list-assets-for-a-release"
    },
    {
      "name": "Upload a release asset",
      "enabledForApps": true,
      "method": "POST",
      "path": ":url",
      "params": [
        {
          "name": "url",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "Content-Length",
          "type": "integer",
          "description": "The content size of the asset in bytes",
          "required": true,
          "location": "headers"
        },
        {
          "name": "Content-Type",
          "type": "string",
          "description": "The content type of the asset. This should be set in the Header. Example: `\"application/zip\"`. For a list of acceptable types, refer this list of [media types](https://www.iana.org/assignments/media-types/media-types.xhtml).",
          "required": true,
          "location": "headers"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The file name of the asset. This should be set in a URI query parameter.",
          "required": true,
          "location": "query"
        },
        {
          "name": "label",
          "type": "string",
          "description": "An alternate short description of the asset. Used in place of the filename. This should be set in a URI query parameter.",
          "required": false,
          "location": "query"
        }
      ],
      "description": "This endpoint makes use of [a Hypermedia relation](https://developer.github.com/v3/#hypermedia) to determine which URL to access. This endpoint is provided by a URI template in [the release's API response](#get-a-single-release). You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.\n\nThe asset data is expected in its raw binary form, rather than JSON. Everything else about the endpoint is the same as the rest of the API. For example, you'll still need to pass your authentication to be able to upload an asset.\n\nSend the raw binary content of the asset as the request body.\n\nThis may leave an empty asset with a state of `\"new\"`. It can be safely deleted.",
      "documentationUrl": "https://developer.github.com/v3/repos/releases/#upload-a-release-asset",
      "isOverride": true,
      "idName": "upload-release-asset"
    },
    {
      "name": "Get a single release asset",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/releases/assets/:asset_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "asset_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://developer.github.com/v3/media/#media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.",
      "idName": "get-release-asset",
      "documentationUrl": "https://developer.github.com/v3/repos/releases/#get-a-single-release-asset"
    },
    {
      "name": "Edit a release asset",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/repos/:owner/:repo/releases/assets/:asset_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "asset_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The file name of the asset.",
          "required": false,
          "location": "body"
        },
        {
          "name": "label",
          "type": "string",
          "description": "An alternate short description of the asset. Used in place of the filename.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "Users with push access to the repository can edit a release asset.",
      "idName": "edit-release-asset",
      "documentationUrl": "https://developer.github.com/v3/repos/releases/#edit-a-release-asset"
    },
    {
      "name": "Delete a release asset",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/releases/assets/:asset_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "asset_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "delete-release-asset",
      "documentationUrl": "https://developer.github.com/v3/repos/releases/#delete-a-release-asset"
    },
    {
      "name": "Get contributors list with additions, deletions, and commit counts",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/stats/contributors",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "*   `total` \\- The Total number of commits authored by the contributor.\n\nWeekly Hash (`weeks` array):\n\n*   `w` \\- Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).\n*   `a` \\- Number of additions\n*   `d` \\- Number of deletions\n*   `c` \\- Number of commits\n\n",
      "idName": "get-contributors-stats",
      "documentationUrl": "https://developer.github.com/v3/repos/statistics/#get-contributors-list-with-additions-deletions-and-commit-counts"
    },
    {
      "name": "Get the last year of commit activity data",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/stats/commit_activity",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.\n\n",
      "idName": "get-commit-activity-stats",
      "documentationUrl": "https://developer.github.com/v3/repos/statistics/#get-the-last-year-of-commit-activity-data"
    },
    {
      "name": "Get the number of additions and deletions per week",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/stats/code_frequency",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Returns a weekly aggregate of the number of additions and deletions pushed to a repository.\n\n",
      "idName": "get-code-frequency-stats",
      "documentationUrl": "https://developer.github.com/v3/repos/statistics/#get-the-number-of-additions-and-deletions-per-week"
    },
    {
      "name": "Get the weekly commit count for the repository owner and everyone else",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/stats/participation",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.\n\nThe array order is oldest week (index 0) to most recent week.\n\n",
      "idName": "get-participation-stats",
      "documentationUrl": "https://developer.github.com/v3/repos/statistics/#get-the-weekly-commit-count-for-the-repository-owner-and-everyone-else"
    },
    {
      "name": "Get the number of commits per hour in each day",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/stats/punch_card",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Each array contains the day number, hour number, and number of commits:\n\n*   `0-6`: Sunday - Saturday\n*   `0-23`: Hour of day\n*   Number of commits\n\nFor example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.",
      "idName": "get-punch-card-stats",
      "documentationUrl": "https://developer.github.com/v3/repos/statistics/#get-the-number-of-commits-per-hour-in-each-day"
    },
    {
      "name": "Create a status",
      "enabledForApps": true,
      "method": "POST",
      "path": "/repos/:owner/:repo/statuses/:sha",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "sha",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "state",
          "type": "string",
          "description": "The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.",
          "required": true,
          "enum": [
            "error",
            "failure",
            "pending",
            "success"
          ],
          "location": "body"
        },
        {
          "name": "target_url",
          "type": "string",
          "description": "The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  \nFor example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  \n`http://ci.example.com/user/repo/build/sha`",
          "required": false,
          "location": "body"
        },
        {
          "name": "description",
          "type": "string",
          "description": "A short description of the status.",
          "required": false,
          "location": "body"
        },
        {
          "name": "context",
          "type": "string",
          "description": "A string label to differentiate this status from the status of other systems.",
          "default": "default",
          "required": false,
          "location": "body"
        }
      ],
      "description": "Users with push access in a repository can create commit statuses for a given SHA.\n\nNote: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.",
      "idName": "create-status",
      "documentationUrl": "https://developer.github.com/v3/repos/statuses/#create-a-status"
    },
    {
      "name": "List statuses for a specific ref",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/commits/:ref/statuses",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "ref",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.\n\nThis resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.",
      "idName": "list-statuses-for-ref",
      "documentationUrl": "https://developer.github.com/v3/repos/statuses/#list-statuses-for-a-specific-ref"
    },
    {
      "name": "Get the combined status for a specific ref",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/commits/:ref/status",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "ref",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.\n\nThe most recent status for each context is returned, up to 100. This field [paginates](https://developer.github.com/v3/#pagination) if there are over 100 contexts.\n\nAdditionally, a combined `state` is returned. The `state` is one of:\n\n*   **failure** if any of the contexts report as `error` or `failure`\n*   **pending** if there are no statuses or a context is `pending`\n*   **success** if the latest status for all contexts is `success`",
      "idName": "get-combined-status-for-ref",
      "documentationUrl": "https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref"
    },
    {
      "name": "List referrers",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/traffic/popular/referrers",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Get the top 10 referrers over the last 14 days.",
      "idName": "list-referrers",
      "documentationUrl": "https://developer.github.com/v3/repos/traffic/#list-referrers"
    },
    {
      "name": "List paths",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/traffic/popular/paths",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Get the top 10 popular contents over the last 14 days.",
      "idName": "list-paths",
      "documentationUrl": "https://developer.github.com/v3/repos/traffic/#list-paths"
    },
    {
      "name": "Views",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/traffic/views",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per",
          "type": "string",
          "description": "Must be one of: `day`, `week`.",
          "default": "day",
          "required": false,
          "enum": [
            "day",
            "week"
          ],
          "location": "query"
        }
      ],
      "description": "Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.",
      "idName": "views",
      "documentationUrl": "https://developer.github.com/v3/repos/traffic/#views"
    },
    {
      "name": "Clones",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/traffic/clones",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per",
          "type": "string",
          "description": "Must be one of: `day`, `week`.",
          "default": "day",
          "required": false,
          "enum": [
            "day",
            "week"
          ],
          "location": "query"
        }
      ],
      "description": "Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.",
      "idName": "clones",
      "documentationUrl": "https://developer.github.com/v3/repos/traffic/#clones"
    },
    {
      "name": "List hooks",
      "enabledForApps": true,
      "method": "GET",
      "path": "/repos/:owner/:repo/hooks",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-hooks",
      "documentationUrl": "https://developer.github.com/v3/repos/hooks/#list-hooks"
    },
    {
      "name": "Get single hook",
      "enabledForApps": false,
      "method": "GET",
      "path": "/repos/:owner/:repo/hooks/:hook_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "hook_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-hook",
      "documentationUrl": "https://developer.github.com/v3/repos/hooks/#get-single-hook"
    },
    {
      "name": "Create a hook",
      "enabledForApps": false,
      "method": "POST",
      "path": "/repos/:owner/:repo/hooks",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "name",
          "type": "string",
          "description": "Use \"web\" for a webhook or use the name of a valid service. You can use [/hooks](https://api.github.com/hooks) for the list of valid service names. **Note**: GitHub Services will no longer be supported as of October 1, 2018. Please see the [blog post](/changes/2018-04-25-github-services-deprecation) for details.",
          "required": true,
          "location": "body"
        },
        {
          "name": "config",
          "type": "object",
          "description": "Key/value pairs to provide settings for this webhook. [These are defined below](#create-hook-config-params).",
          "required": true,
          "location": "body"
        },
        {
          "name": "config.url",
          "type": "string",
          "description": "The URL to which the payloads will be delivered.",
          "required": true,
          "location": "body"
        },
        {
          "name": "config.content_type",
          "type": "string",
          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
          "required": false,
          "location": "body"
        },
        {
          "name": "config.secret",
          "type": "string",
          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/#delivery-headers) header.",
          "required": false,
          "location": "body"
        },
        {
          "name": "config.insecure_ssl",
          "type": "string",
          "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
          "required": false,
          "location": "body"
        },
        {
          "name": "events",
          "type": "string[]",
          "description": "Determines what [events](https://developer.github.com/v3/activity/events/types/) the hook is triggered for.",
          "default": "[\"push\"]",
          "required": false,
          "location": "body"
        },
        {
          "name": "active",
          "type": "boolean",
          "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
          "default": true,
          "required": false,
          "location": "body"
        }
      ],
      "description": "Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can share the same `config` as long as those webhooks do not have any `events` that overlap.\n\n**Note**: Repository service hooks (like email or Campfire) can have at most one configured at a time. Creating hooks for a service that already has one configured will [update the existing hook](#edit-a-hook).\n\n**Note**: GitHub Services will no longer be supported as of October 1, 2018. Please see the [blog post](/changes/2018-04-25-github-services-deprecation) for details. You can use the [Replacing GitHub Services guide](https://developer.github.com/v3/guides/replacing-github-services) to help you update your services to webhooks.\n\nHere's how you can create a hook that posts payloads in JSON format:",
      "idName": "create-hook",
      "documentationUrl": "https://developer.github.com/v3/repos/hooks/#create-a-hook"
    },
    {
      "name": "Edit a hook",
      "enabledForApps": false,
      "method": "PATCH",
      "path": "/repos/:owner/:repo/hooks/:hook_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "hook_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "config",
          "type": "object",
          "description": "Key/value pairs to provide settings for this webhook. [These are defined below](#create-hook-config-params).",
          "required": false,
          "location": "body"
        },
        {
          "name": "config.url",
          "type": "string",
          "description": "The URL to which the payloads will be delivered.",
          "required": true,
          "location": "body"
        },
        {
          "name": "config.content_type",
          "type": "string",
          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
          "required": false,
          "location": "body"
        },
        {
          "name": "config.secret",
          "type": "string",
          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/#delivery-headers) header.",
          "required": false,
          "location": "body"
        },
        {
          "name": "config.insecure_ssl",
          "type": "string",
          "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
          "required": false,
          "location": "body"
        },
        {
          "name": "events",
          "type": "string[]",
          "description": "Determines what [events](https://developer.github.com/v3/activity/events/types/) the hook is triggered for. This replaces the entire array of events.",
          "default": "[\"push\"]",
          "required": false,
          "location": "body"
        },
        {
          "name": "add_events",
          "type": "string[]",
          "description": "Determines a list of events to be added to the list of events that the Hook triggers for.",
          "required": false,
          "location": "body"
        },
        {
          "name": "remove_events",
          "type": "string[]",
          "description": "Determines a list of events to be removed from the list of events that the Hook triggers for.",
          "required": false,
          "location": "body"
        },
        {
          "name": "active",
          "type": "boolean",
          "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
          "default": true,
          "required": false,
          "location": "body"
        }
      ],
      "description": "",
      "idName": "edit-hook",
      "documentationUrl": "https://developer.github.com/v3/repos/hooks/#edit-a-hook"
    },
    {
      "name": "Test a push hook",
      "enabledForApps": false,
      "method": "POST",
      "path": "/repos/:owner/:repo/hooks/:hook_id/tests",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "hook_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.\n\n**Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`",
      "idName": "test-push-hook",
      "documentationUrl": "https://developer.github.com/v3/repos/hooks/#test-a-push-hook"
    },
    {
      "name": "Ping a hook",
      "enabledForApps": false,
      "method": "POST",
      "path": "/repos/:owner/:repo/hooks/:hook_id/pings",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "hook_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "This will trigger a [ping event](https://developer.github.com/webhooks/#ping-event) to be sent to the hook.",
      "idName": "ping-hook",
      "documentationUrl": "https://developer.github.com/v3/repos/hooks/#ping-a-hook"
    },
    {
      "name": "Delete a hook",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/repos/:owner/:repo/hooks/:hook_id",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "hook_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "delete-hook",
      "documentationUrl": "https://developer.github.com/v3/repos/hooks/#delete-a-hook"
    }
  ],
  "search": [
    {
      "name": "Search repositories",
      "enabledForApps": true,
      "method": "GET",
      "path": "/search/repositories",
      "params": [
        {
          "name": "q",
          "type": "string",
          "description": "The search keywords, as well as any qualifiers.",
          "required": true,
          "location": "query"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "The sort field. One of `stars`, `forks`, or `updated`.",
          "default": "results are sorted by best match.",
          "required": false,
          "enum": [
            "stars",
            "forks",
            "updated"
          ],
          "location": "query"
        },
        {
          "name": "order",
          "type": "string",
          "description": "The sort order if `sort` parameter is provided. One of `asc` or `desc`.",
          "default": "desc",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Find repositories via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nThe `q` search term can also contain any combination of the supported repository search qualifiers as described by the in-browser [repository search documentation](https://help.github.com/articles/searching-repositories/) and [search syntax documentation](https://help.github.com/articles/search-syntax/):\n\n*   [`created` or `pushed`](https://help.github.com/articles/searching-repositories#search-based-on-when-a-repository-was-created-or-last-updated) Filters repositories based on date of creation, or when they were last updated.\n*   [`fork`](https://help.github.com/articles/searching-repositories#search-based-on-the-number-of-forks-the-parent-repository-has) Filters whether forked repositories should be included (`true`) or only forked repositories should be returned (`only`).\n*   [`forks`](https://help.github.com/articles/searching-repositories#search-based-on-the-number-of-forks-the-parent-repository-has) Filters repositories based on the number of forks.\n*   [`in`](https://help.github.com/articles/searching-repositories#scope-the-search-fields) Qualifies which fields are searched. With this qualifier you can restrict the search to just the repository name, description, readme, or any combination of these.\n*   [`language`](https://help.github.com/articles/searching-repositories#search-based-on-the-main-language-of-a-repository) Searches repositories based on the language they're written in.\n*   [`license`](https://help.github.com/articles/searching-repositories#search-by-license) Filters repositories by license or license family, using the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type).\n*   [`repo` or `user`](https://help.github.com/articles/searching-repositories#search-within-a-users-or-organizations-repositories) Limits searches to a specific repository or user.\n*   [`size`](https://help.github.com/articles/searching-repositories#search-based-on-the-size-of-a-repository) Finds repositories that match a certain size (in kilobytes).\n*   [`stars`](https://help.github.com/articles/searching-repositories#search-based-on-the-number-of-stars-a-repository-has) Searches repositories based on the number of stars.\n*   [`topic`](https://help.github.com/articles/classifying-your-repository-with-topics/) Filters repositories based on the specified topic.\n*   [`archived`](https://help.github.com/articles/searching-repositories/#search-based-on-whether-a-repository-is-archived) Filters whether archived repositories should be included (`true`) or not (`false`).\n\nSuppose you want to search for popular Tetris repositories written in Assembly. Your query might look like this.\n\nYou can search for multiple topics by adding more `topic:` instances, and including the `mercy-preview` header. For example:\n\nIn this request, we're searching for repositories with the word `tetris` in the name, the description, or the README. We're limiting the results to only find repositories where the primary language is Assembly. We're sorting by stars in descending order, so that the most popular repositories appear first in the search results.\n\n**Highlighting repository search results**\n\nYou might want to highlight the matching search terms when displaying search results. The API offers additional metadata to support this use case. To get this metadata in your search results, specify the `text-match` media type in your `Accept` header. For example, via cURL, the above query would look like this:\n\nThis produces the same JSON payload as above, with an extra key called `text_matches`, an array of objects. These objects provide information such as the position of your search terms within the text, as well as the `property` that included the search term.\n\nWhen searching for repositories, you can get text match metadata for the **name** and **description** fields. For details on the attributes present in the `text_matches` array, see [text match metadata](#text-match-metadata).\n\nHere's an example response:",
      "idName": "repos",
      "documentationUrl": "https://developer.github.com/v3/search/#search-repositories"
    },
    {
      "name": "Search commits",
      "enabledForApps": true,
      "method": "GET",
      "path": "/search/commits",
      "params": [
        {
          "name": "q",
          "type": "string",
          "description": "The search terms.",
          "required": true,
          "location": "query"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "The sort field. Can be `author-date` or `committer-date`.",
          "default": "results are sorted by best match.",
          "required": false,
          "enum": [
            "author-date",
            "committer-date"
          ],
          "location": "query"
        },
        {
          "name": "order",
          "type": "string",
          "description": "The sort order if `sort` parameter is provided. One of `asc` or `desc`.",
          "default": "desc",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Find commits via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\n**Considerations for commit search**\n\nOnly the _default branch_ is considered. In most cases, this will be the `master` branch.\n\nThe `q` search term can also contain any combination of the supported commit search qualifiers as described by the in-browser [commit search documentation](https://help.github.com/articles/searching-commits/) and [search syntax documentation](https://help.github.com/articles/search-syntax/):\n\n*   [`author`](https://help.github.com/articles/searching-commits#search-by-author-or-committer) Matches commits authored by a user (based on email settings).\n*   [`committer`](https://help.github.com/articles/searching-commits#search-by-author-or-committer) Matches commits committed by a user (based on email settings).\n*   [`author-name`](https://help.github.com/articles/searching-commits#search-by-author-or-committer) Matches commits by author name.\n*   [`committer-name`](https://help.github.com/articles/searching-commits#search-by-author-or-committer) Matches commits by committer name.\n*   [`author-email`](https://help.github.com/articles/searching-commits#search-by-author-or-committer) Matches commits by author email.\n*   [`committer-email`](https://help.github.com/articles/searching-commits#search-by-author-or-committer) Matches commits by committer email.\n*   [`author-date`](https://help.github.com/articles/searching-commits#search-by-authored-or-committed-date) Matches commits by author date range.\n*   [`committer-date`](https://help.github.com/articles/searching-commits/#search-by-authored-or-committed-date) Matches commits by committer date range.\n*   [`merge`](https://help.github.com/articles/searching-commits#filter-merge-commits) `true` filters to merge commits, `false` filters out merge commits.\n*   [`hash`](https://help.github.com/articles/searching-commits#search-by-hash) Matches commits by hash.\n*   [`parent`](https://help.github.com/articles/searching-commits#search-by-parent) Matches commits that have a particular parent.\n*   [`tree`](https://help.github.com/articles/searching-commits#search-by-tree) Matches commits by tree hash.\n*   [`is`](https://help.github.com/articles/searching-commits#filter-to-public-or-private-repositories) Matches `public` or `private` repositories.\n*   [`user`, `org`, or `repo`](https://help.github.com/articles/searching-commits#search-within-a-users-or-organizations-repositories) Limits searches to a specific user, organization, or repository.\n\nSuppose you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:\n\n**Highlighting code search results**\n\nWhen searching for commits, you can get text match metadata for the **message** field. See the section on [text match metadata](#text-match-metadata) for full details.",
      "idName": "commits",
      "documentationUrl": "https://developer.github.com/v3/search/#search-commits"
    },
    {
      "name": "Search code",
      "enabledForApps": true,
      "method": "GET",
      "path": "/search/code",
      "params": [
        {
          "name": "q",
          "type": "string",
          "description": "The search terms.",
          "required": true,
          "location": "query"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "The sort field. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure.",
          "default": "results are sorted by best match.",
          "required": false,
          "enum": [
            "indexed"
          ],
          "location": "query"
        },
        {
          "name": "order",
          "type": "string",
          "description": "The sort order if `sort` parameter is provided. One of `asc` or `desc`.",
          "default": "desc",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Find file contents via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\n**Note:** You must [authenticate](https://developer.github.com/v3/#authentication) to search for code across all public repositories.\n\n**Considerations for code search**\n\nDue to the complexity of searching code, there are a few restrictions on how searches are performed:\n\n*   Only the _default branch_ is considered. In most cases, this will be the `master` branch.\n*   Only files smaller than 384 KB are searchable.\n*   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.\n\nThe `q` search term can also contain any combination of the supported code search qualifiers as described by the in-browser [code search documentation](https://help.github.com/articles/searching-code/) and [search syntax documentation](https://help.github.com/articles/search-syntax/):\n\n*   [`in`](https://help.github.com/articles/searching-code#scope-the-search-fields) Qualifies which fields are searched. With this qualifier you can restrict the search to the file contents (`file`), the file path (`path`), or both.\n*   [`language`](https://help.github.com/articles/searching-code#search-by-language) Searches code based on the language it's written in.\n*   [`fork`](https://help.github.com/articles/searching-code#search-by-the-number-of-forks-the-parent-repository-has) Specifies that code from forked repositories should be searched (`true`). Repository forks will not be searchable unless the fork has more stars than the parent repository.\n*   [`size`](https://help.github.com/articles/searching-code#search-by-the-size-of-the-parent-repository) Finds files that match a certain size (in bytes).\n*   [`path`](https://help.github.com/articles/searching-code#search-by-the-location-of-a-file-within-the-repository) Specifies the path prefix that the resulting file must be under.\n*   [`filename`](https://help.github.com/articles/searching-code#search-by-filename) Matches files by a substring of the filename.\n*   [`extension`](https://help.github.com/articles/searching-code#search-by-the-file-extension) Matches files with a certain extension after a dot.\n*   [`user` or `repo`](https://help.github.com/articles/searching-code#search-within-a-users-or-organizations-repositories) Limits searches to a specific user or repository.\n\nSuppose you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery). Your query would look something like this:\n\nHere, we're searching for the keyword `addClass` within a file's contents. We're making sure that we're only looking in files where the language is JavaScript. And we're scoping the search to the `repo:jquery/jquery` repository.\n\n**Highlighting code search results**\n\nYou might want to highlight the matching search terms when displaying search results. The API offers additional metadata to support this use case. To get this metadata in your search results, specify the `text-match` media type in your `Accept` header. For example, via cURL, the above query would look like this:\n\nThis produces the same JSON payload as above, with an extra key called `text_matches`, an array of objects. These objects provide information such as the position of your search terms within the text, as well as the `property` that included the search term.\n\nWhen searching for code, you can get text match metadata for the file **content** and file **path** fields. For details on the attributes present in the `text_matches` array, see [text match metadata](#text-match-metadata).\n\nHere's an example response:",
      "idName": "code",
      "documentationUrl": "https://developer.github.com/v3/search/#search-code"
    },
    {
      "name": "Search issues",
      "enabledForApps": true,
      "method": "GET",
      "path": "/search/issues",
      "params": [
        {
          "name": "q",
          "type": "string",
          "description": "The search terms.",
          "required": true,
          "location": "query"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "The sort field. Can be `comments`, `created`, or `updated`.",
          "default": "results are sorted by best match.",
          "required": false,
          "enum": [
            "comments",
            "created",
            "updated"
          ],
          "location": "query"
        },
        {
          "name": "order",
          "type": "string",
          "description": "The sort order if `sort` parameter is provided. One of `asc` or `desc`.",
          "default": "desc",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Find issues by state and keyword. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nThe `q` search term can also contain any combination of the supported issue search qualifiers as described by the in-browser [issue search documentation](https://help.github.com/articles/searching-issues/) and [search syntax documentation](https://help.github.com/articles/search-syntax/):\n\n*   [`type`](https://help.github.com/articles/searching-issues#search-issues-or-pull-requests) With this qualifier you can restrict the search to issues (`issue`) or pull request (`pr`) only.\n*   [`in`](https://help.github.com/articles/searching-issues#scope-the-search-fields) Qualifies which fields are searched. With this qualifier you can restrict the search to just the title (`title`), body (`body`), comments (`comments`), or any combination of these.\n*   [`author`](https://help.github.com/articles/searching-issues#search-by-the-author-of-an-issue-or-pull-request) Finds issues or pull requests created by a certain user.\n*   [`assignee`](https://help.github.com/articles/searching-issues#search-by-the-assignee-of-an-issue-or-pull-request) Finds issues or pull requests that are assigned to a certain user.\n*   [`mentions`](https://help.github.com/articles/searching-issues#search-by-a-mentioned-user-within-an-issue-or-pull-request) Finds issues or pull requests that mention a certain user.\n*   [`commenter`](https://help.github.com/articles/searching-issues#search-by-a-commenter-within-an-issue-or-pull-request) Finds issues or pull requests that a certain user commented on.\n*   [`involves`](https://help.github.com/articles/searching-issues#search-by-a-user-thats-involved-within-an-issue-or-pull-request) Finds issues or pull requests that were either created by a certain user, assigned to that user, mention that user, or were commented on by that user.\n*   [`team`](https://help.github.com/articles/searching-issues/#search-by-a-team-thats-mentioned-within-an-issue-or-pull-request) For organizations you're a member of, finds issues or pull requests that @mention a team within the organization.\n*   [`state`](https://help.github.com/articles/searching-issues#search-based-on-whether-an-issue-or-pull-request-is-open) Filter issues or pull requests based on whether they're open or closed.\n*   [`labels`](https://help.github.com/articles/searching-issues#search-by-the-labels-on-an-issue) Filters issues or pull requests based on their labels.\n*   [`no`](https://help.github.com/articles/searching-issues#search-by-missing-metadata-on-an-issue-or-pull-request) Filters items missing certain metadata, such as `label`, `milestone`, or `assignee`\n*   [`language`](https://help.github.com/articles/searching-issues#search-by-the-main-language-of-a-repository) Searches for issues or pull requests within repositories that match a certain language.\n*   [`is`](https://help.github.com/articles/searching-issues#search-based-on-the-state-of-an-issue-or-pull-request) Searches for items within repositories that match a certain state, such as `open`, `closed`, or `merged`\n*   [`created` or `updated`](https://help.github.com/articles/searching-issues#search-based-on-when-an-issue-or-pull-request-was-created-or-last-updated) Filters issues or pull requests based on date of creation, or when they were last updated.\n*   [`merged`](https://help.github.com/articles/searching-issues#search-based-on-when-a-pull-request-was-merged) Filters pull requests based on the date when they were merged.\n*   [`status`](https://help.github.com/articles/searching-issues#search-based-on-commit-status) Filters pull requests based on the commit status.\n*   [`head` or `base`](https://help.github.com/articles/searching-issues#search-based-on-branch-names) Filters pull requests based on the branch that they came from or that they are modifying.\n*   [`closed`](https://help.github.com/articles/searching-issues#search-based-on-when-an-issue-or-pull-request-was-closed) Filters issues or pull requests based on the date when they were closed.\n*   [`comments`](https://help.github.com/articles/searching-issues#search-by-the-number-of-comments-an-issue-or-pull-request-has) Filters issues or pull requests based on the quantity of comments.\n*   [`user` or `repo`](https://help.github.com/articles/searching-issues#search-within-a-users-or-organizations-repositories) Limits searches to a specific user or repository.\n*   [`project`](https://help.github.com/articles/searching-issues/#search-by-project-board) Limits searches to a specific project board in a repository or organization.\n*   [`archived`](https://help.github.com/articles/searching-issues/#search-within-archived-repositories) Filters issues or pull requests based on whether they are in an archived repository.\n\nIf you know the specific SHA hash of a commit, you can use also [use it to search for pull requests](https://help.github.com/articles/searching-issues#search-by-the-commit-shas-within-a-pull-request) that contain that SHA. Note that the SHA syntax must be at least seven characters.\n\nLet's say you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.\n\nIn this query, we're searching for the keyword `windows`, within any open issue that's labeled as `bug`. The search runs across repositories whose primary language is Python. We’re sorting by creation date in ascending order, so that the oldest issues appear first in the search results.\n\n**Highlighting issue search results**\n\nYou might want to highlight the matching search terms when displaying search results. The API offers additional metadata to support this use case. To get this metadata in your search results, specify the `text-match` media type in your `Accept` header. For example, via cURL, the above query would look like this:\n\nThis produces the same JSON payload as above, with an extra key called `text_matches`, an array of objects. These objects provide information such as the position of your search terms within the text, as well as the `property` that included the search term.\n\nWhen searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields. For details on the attributes present in the `text_matches` array, see [text match metadata](#text-match-metadata).\n\nHere's an example response:",
      "idName": "issues",
      "documentationUrl": "https://developer.github.com/v3/search/#search-issues"
    },
    {
      "name": "Search users",
      "enabledForApps": true,
      "method": "GET",
      "path": "/search/users",
      "params": [
        {
          "name": "q",
          "type": "string",
          "description": "The search terms.",
          "required": true,
          "location": "query"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "The sort field. Can be `followers`, `repositories`, or `joined`.",
          "default": "results are sorted by best match.",
          "required": false,
          "enum": [
            "followers",
            "repositories",
            "joined"
          ],
          "location": "query"
        },
        {
          "name": "order",
          "type": "string",
          "description": "The sort order if `sort` parameter is provided. One of `asc` or `desc`.",
          "default": "desc",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Find users via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nThe `q` search term can also contain any combination of the supported user search qualifiers as described by the in-browser [user search documentation](https://help.github.com/articles/searching-users/) and [search syntax documentation](https://help.github.com/articles/search-syntax/):\n\n*   [`type`](https://help.github.com/articles/searching-users#search-for-users-or-organizations) With this qualifier you can restrict the search to just personal accounts (`user`) or just organization accounts (`org`).\n*   [`in`](https://help.github.com/articles/searching-users#scope-the-search-fields) Qualifies which fields are searched. With this qualifier you can restrict the search to just the username (`login`), public email (`email`), full name (`fullname`), or any combination of these.\n*   [`repos`](https://help.github.com/articles/searching-users#search-based-on-the-number-of-repositories-a-user-has) Filters users based on the number of repositories they have.\n*   [`location`](https://help.github.com/articles/searching-users#search-based-on-the-location-where-a-user-resides) Filter users by the location indicated in their profile.\n*   [`language`](https://help.github.com/articles/searching-users#search-based-on-the-languages-of-a-users-repositories) Search for users that have repositories that match a certain language.\n*   [`created`](https://help.github.com/articles/searching-users#search-based-on-when-a-user-joined-github) Filter users based on when they joined.\n*   [`followers`](https://help.github.com/articles/searching-users#search-based-on-the-number-of-followers-a-user-has) Filter users based on the number of followers they have.\n\nImagine you're looking for a list of popular users. You might try out this query:\n\nHere, we're looking at users with the name Tom. We're only interested in those with more than 42 repositories, and only if they have over 1,000 followers.\n\n**Highlighting user search results**\n\nYou might want to highlight the matching search terms when displaying search results. The API offers additional metadata to support this use case. To get this metadata in your search results, specify the `text-match` media type in your `Accept` header. For example, via cURL, the above query would look like this:\n\nThis produces the same JSON payload as above, with an extra key called `text_matches`, an array of objects. These objects provide information such as the position of your search terms within the text, as well as the `property` that included the search term.\n\nWhen searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields. For details on the attributes present in the `text_matches` array, see [text match metadata](#text-match-metadata).",
      "idName": "users",
      "documentationUrl": "https://developer.github.com/v3/search/#search-users"
    },
    {
      "name": "Search topics",
      "enabledForApps": true,
      "method": "GET",
      "path": "/search/topics",
      "params": [
        {
          "name": "q",
          "type": "string",
          "description": "The search terms.",
          "required": true,
          "location": "query"
        }
      ],
      "description": "Find topics via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nResults are sorted by best match by default.\n\nThe `q` search term can also contain any combination of the supported topic search qualifiers as described by the in-browser [topic search documentation](https://help.github.com/articles/searching-topics/) and [search syntax documentation](https://help.github.com/articles/search-syntax/):\n\n*   `is:curated` Finds topics that have extra information, e.g., a description, display name, or logo, because they have an entry in the [`github/explore` repository](https://github.com/github/explore).\n*   `is:featured` Finds topics listed on [https://github.com/topics](https://github.com/topics). Any featured topic will also be curated.\n*   `is:not-featured` Finds topics not listed on [https://github.com/topics](https://github.com/topics).\n*   `is:not-curated` Finds topics that have no extra information because they haven't been added to the [`github/explore` repository](https://github.com/github/explore).\n*   `repositories:` Finds topics with some number of repositories using them, e.g., `repositories:>1000`.\n\nSuppose you want to search for topics related to Ruby that are featured on [https://github.com/topics](https://github.com/topics). Your query might look like this:\n\nIn this request, we're searching for topics with the keyword `ruby`, and we're limiting the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.\n\n**Note:** A search for featured Ruby topics only has 6 total results, so a [Link header](https://developer.github.com/v3/#link-header) indicating pagination is not included in the response.\n\n**Highlighting topic search results**\n\nYou might want to highlight the matching search terms when displaying search results. The API offers additional metadata to support this use case. To get this metadata in your search results, specify the `text-match` media type in your Accept header. For example, via cURL, the above query would look like this:\n\nThis produces the same JSON payload as above, with an extra key called `text_matches`, which is an array of objects. These objects provide information such as the position of your search terms within the text, as well as the `property` that included the search term.\n\nWhen searching for topics, you can get text match metadata for the topic's **short_description**, **description**, **name**, or **display_name** field. For details on the attributes present in the `text_matches` array, see [text match metadata](#text-match-metadata).",
      "idName": "topics",
      "documentationUrl": "https://developer.github.com/v3/search/#search-topics"
    },
    {
      "name": "Search labels",
      "enabledForApps": true,
      "method": "GET",
      "path": "/search/labels",
      "params": [
        {
          "name": "repository_id",
          "type": "integer",
          "description": "The id of the repository.",
          "required": true,
          "location": "query"
        },
        {
          "name": "q",
          "type": "string",
          "description": "The search keywords.",
          "required": true,
          "location": "query"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "The sort field. Can be one of `created` or `updated`.",
          "default": "results are sorted by best match.",
          "required": false,
          "enum": [
            "created",
            "updated"
          ],
          "location": "query"
        },
        {
          "name": "order",
          "type": "string",
          "description": "The sort order if the sort parameter is provided. Can be one of `asc` or `desc`.",
          "default": "desc",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        }
      ],
      "description": "Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nSuppose you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:\n\nThe labels that best match for the query appear first in the search results.\n\n**Highlighting label search results**\n\nYou might want to highlight the matching search terms when displaying search results. The API offers additional metadata to support this use case. To get this metadata in your search results, specify the `text-match` media type in your `Accept` header. For example, via cURL, the above query would look like this:\n\nThis produces the same JSON payload as above, with an extra key called `text_matches`, an array of objects. These objects provide information such as the position of your search terms within the text, as well as the `property` that included the search term.\n\nWhen searching for labels, you can get text match metadata for the label **name** and **description** fields. For details on the attributes present in the `text_matches` array, see [text match metadata](#text-match-metadata).",
      "idName": "labels",
      "documentationUrl": "https://developer.github.com/v3/search/#search-labels"
    },
    {
      "name": "Search issues",
      "enabledForApps": false,
      "method": "GET",
      "path": "/legacy/issues/search/:owner/:repository/:state/:keyword",
      "params": [
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repository",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "state",
          "type": "string",
          "description": "Indicates the state of the issues to return. Can be either `open` or `closed`.",
          "required": true,
          "enum": [
            "open",
            "closed"
          ],
          "location": "url"
        },
        {
          "name": "keyword",
          "type": "string",
          "description": "The search term.",
          "required": true,
          "location": "url"
        }
      ],
      "description": "Find issues by state and keyword.",
      "idName": "issues-legacy",
      "documentationUrl": "https://developer.github.com/v3/search/legacy/#search-issues"
    },
    {
      "name": "Search repositories",
      "enabledForApps": false,
      "method": "GET",
      "path": "/legacy/repos/search/:keyword",
      "params": [
        {
          "name": "keyword",
          "type": "string",
          "description": "The search term.",
          "required": true,
          "location": "url"
        },
        {
          "name": "language",
          "type": "string",
          "description": "Filter results by language.",
          "required": false,
          "location": "query"
        },
        {
          "name": "start_page",
          "type": "string",
          "description": "The page number to fetch.",
          "required": false,
          "location": "query"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "The sort field. One of `stars`, `forks`, or `updated`.",
          "default": "results are sorted by best match.",
          "required": false,
          "enum": [
            "stars",
            "forks",
            "updated"
          ],
          "location": "query"
        },
        {
          "name": "order",
          "type": "string",
          "description": "The sort field. if `sort` param is provided. Can be either `asc` or `desc`.",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        }
      ],
      "description": "Find repositories by keyword. Note, this legacy method does not follow the v3 pagination pattern. This method returns up to 100 results per page and pages can be fetched using the `start_page` parameter.",
      "idName": "repos-legacy",
      "documentationUrl": "https://developer.github.com/v3/search/legacy/#search-repositories"
    },
    {
      "name": "Search users",
      "enabledForApps": false,
      "method": "GET",
      "path": "/legacy/user/search/:keyword",
      "params": [
        {
          "name": "keyword",
          "type": "string",
          "description": "The search term.",
          "required": true,
          "location": "url"
        },
        {
          "name": "start_page",
          "type": "string",
          "description": "The page number to fetch.",
          "required": false,
          "location": "query"
        },
        {
          "name": "sort",
          "type": "string",
          "description": "The sort field. One of `stars`, `forks`, or `updated`.",
          "default": "results are sorted by best match.",
          "required": false,
          "enum": [
            "stars",
            "forks",
            "updated"
          ],
          "location": "query"
        },
        {
          "name": "order",
          "type": "string",
          "description": "The sort field. if `sort` param is provided. Can be either `asc` or `desc`.",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        }
      ],
      "description": "Find users by keyword.",
      "idName": "users-legacy",
      "documentationUrl": "https://developer.github.com/v3/search/legacy/#search-users"
    },
    {
      "name": "Email search",
      "enabledForApps": false,
      "method": "GET",
      "path": "/legacy/user/email/:email",
      "params": [
        {
          "name": "email",
          "type": "string",
          "description": "The email address.",
          "required": true,
          "location": "url"
        }
      ],
      "description": "This API call is added for compatibility reasons only. There's no guarantee that full email searches will always be available. The `@` character in the address must be left unencoded. Searches only against public email addresses (as configured on the user's GitHub profile).",
      "idName": "email-legacy",
      "documentationUrl": "https://developer.github.com/v3/search/legacy/#email-search"
    }
  ],
  "teams": [
    {
      "name": "List teams",
      "enabledForApps": true,
      "method": "GET",
      "path": "/orgs/:org/teams",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list",
      "documentationUrl": "https://developer.github.com/v3/teams/#list-teams"
    },
    {
      "name": "Get team",
      "enabledForApps": true,
      "method": "GET",
      "path": "/teams/:team_id",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get",
      "documentationUrl": "https://developer.github.com/v3/teams/#get-team"
    },
    {
      "name": "Create team",
      "enabledForApps": true,
      "method": "POST",
      "path": "/orgs/:org/teams",
      "params": [
        {
          "name": "org",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The name of the team.",
          "required": true,
          "location": "body"
        },
        {
          "name": "description",
          "type": "string",
          "description": "The description of the team.",
          "required": false,
          "location": "body"
        },
        {
          "name": "maintainers",
          "type": "string[]",
          "description": "The logins of organization members to add as maintainers of the team.",
          "required": false,
          "location": "body"
        },
        {
          "name": "repo_names",
          "type": "string[]",
          "description": "The full name (e.g., \"organization-name/repository-name\") of repositories to add the team to.",
          "required": false,
          "location": "body"
        },
        {
          "name": "privacy",
          "type": "string",
          "description": "The level of privacy this team should have. The options are:  \n**For a non-nested team:**  \n\\* `secret` \\- only visible to organization owners and members of this team.  \n\\* `closed` \\- visible to all members of this organization.  \nDefault: `secret`  \n**For a parent or child team:**  \n\\* `closed` \\- visible to all members of this organization.  \nDefault for child team: `closed`  \n**Note**: You must pass the `hellcat-preview` media type to set privacy default to `closed` for child teams. **For a parent or child team:**  ",
          "default": "secret",
          "required": false,
          "enum": [
            "secret",
            "closed"
          ],
          "location": "body"
        },
        {
          "name": "permission",
          "type": "string",
          "description": "**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` \\- team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` \\- team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` \\- team members can pull, push and administer newly-added repositories.",
          "default": "pull",
          "required": false,
          "enum": [
            "pull",
            "push",
            "admin"
          ],
          "location": "body"
        },
        {
          "name": "parent_team_id",
          "type": "integer",
          "description": "The ID of a team to set as the parent team. **Note**: You must pass the `hellcat-preview` media type to use this parameter.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "To create a team, the authenticated user must be a member of `:org`.",
      "idName": "create",
      "documentationUrl": "https://developer.github.com/v3/teams/#create-team"
    },
    {
      "name": "Edit team",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/teams/:team_id",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The name of the team.",
          "required": true,
          "location": "body"
        },
        {
          "name": "description",
          "type": "string",
          "description": "The description of the team.",
          "required": false,
          "location": "body"
        },
        {
          "name": "privacy",
          "type": "string",
          "description": "The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  \n**For a non-nested team:**  \n\\* `secret` \\- only visible to organization owners and members of this team.  \n\\* `closed` \\- visible to all members of this organization.  \n**For a parent or child team:**  \n\\* `closed` \\- visible to all members of this organization.",
          "required": false,
          "location": "body"
        },
        {
          "name": "permission",
          "type": "string",
          "description": "**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` \\- team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` \\- team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` \\- team members can pull, push and administer newly-added repositories.",
          "default": "pull",
          "required": false,
          "enum": [
            "pull",
            "push",
            "admin"
          ],
          "location": "body"
        },
        {
          "name": "parent_team_id",
          "type": "integer",
          "description": "The ID of a team to set as the parent team. **Note**: You must pass the `hellcat-preview` media type to use this parameter.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "To edit a team, the authenticated user must either be an owner of the org that the team is associated with, or a maintainer of the team.\n\n**Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.",
      "idName": "edit",
      "documentationUrl": "https://developer.github.com/v3/teams/#edit-team"
    },
    {
      "name": "Delete team",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/teams/:team_id",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "To delete a team, the authenticated user must be a team maintainer or an owner of the org associated with the team.\n\nIf you are an organization owner and you pass the `hellcat-preview` media type, deleting a parent team will delete all of its child teams as well.",
      "idName": "delete",
      "documentationUrl": "https://developer.github.com/v3/teams/#delete-team"
    },
    {
      "name": "List child teams",
      "enabledForApps": true,
      "method": "GET",
      "path": "/teams/:team_id/teams",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "At this time, the `hellcat-preview` media type is required to use this endpoint.\n\n",
      "idName": "list-child",
      "documentationUrl": "https://developer.github.com/v3/teams/#list-child-teams"
    },
    {
      "name": "List team repos",
      "enabledForApps": true,
      "method": "GET",
      "path": "/teams/:team_id/repos",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "**Note**: If you pass the `hellcat-preview` media type, the response will include any repositories inherited through a parent team.",
      "idName": "list-repos",
      "documentationUrl": "https://developer.github.com/v3/teams/#list-team-repos"
    },
    {
      "name": "Check if a team manages a repository",
      "enabledForApps": true,
      "method": "GET",
      "path": "/teams/:team_id/repos/:owner/:repo",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "**Note**: If you pass the `hellcat-preview` media type, repositories inherited through a parent team will be checked.\n\nYou can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:",
      "idName": "check-manages-repo",
      "documentationUrl": "https://developer.github.com/v3/teams/#check-if-a-team-manages-a-repository"
    },
    {
      "name": "Add or update team repository",
      "enabledForApps": false,
      "method": "PUT",
      "path": "/teams/:team_id/repos/:owner/:repo",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "permission",
          "type": "string",
          "description": "The permission to grant the team on this repository. Can be one of:  \n\\* `pull` \\- team members can pull, but not push to or administer this repository.  \n\\* `push` \\- team members can pull and push, but not administer this repository.  \n\\* `admin` \\- team members can pull, push and administer this repository.  \n  \nIf no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.  \n**Note**: If you pass the `hellcat-preview` media type, you can promote—but not demote—a `permission` attribute inherited through a parent team.",
          "required": false,
          "enum": [
            "pull",
            "push",
            "admin"
          ],
          "location": "body"
        }
      ],
      "description": "To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization.\n\nIf you pass the `hellcat-preview` media type, you can modify repository permissions of child teams.\n\nNote that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"\n\n",
      "idName": "add-or-update-repo",
      "documentationUrl": "https://developer.github.com/v3/teams/#add-or-update-team-repository"
    },
    {
      "name": "Remove team repository",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/teams/:team_id/repos/:owner/:repo",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "owner",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "repo",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.",
      "idName": "remove-repo",
      "documentationUrl": "https://developer.github.com/v3/teams/#remove-team-repository"
    },
    {
      "name": "List user teams",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/teams",
      "params": [
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://developer.github.com/apps/building-oauth-apps/).",
      "idName": "list-user",
      "documentationUrl": "https://developer.github.com/v3/teams/#list-user-teams"
    },
    {
      "name": "List team projects",
      "enabledForApps": false,
      "method": "GET",
      "path": "/teams/:team_id/projects",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Lists the organization projects for a team. If you pass the `hellcat-preview` media type, the response will include projects inherited from a parent team.",
      "idName": "list-projects",
      "documentationUrl": "https://developer.github.com/v3/teams/#list-team-projects"
    },
    {
      "name": "Review a team project",
      "enabledForApps": false,
      "method": "GET",
      "path": "/teams/:team_id/projects/:project_id",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "project_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. If you pass the `hellcat-preview` media type, the response will include projects inherited from a parent team.",
      "idName": "review-project",
      "documentationUrl": "https://developer.github.com/v3/teams/#review-a-team-project"
    },
    {
      "name": "Add or update team project",
      "enabledForApps": false,
      "method": "PUT",
      "path": "/teams/:team_id/projects/:project_id",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "project_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "permission",
          "type": "string",
          "description": "The permission to grant to the team for this project. Can be one of:  \n\\* `read` \\- team members can read, but not write to or administer this project.  \n\\* `write` \\- team members can read and write, but not administer this project.  \n\\* `admin` \\- team members can read, write and administer this project.  \nDefault: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"  \n**Note**: If you pass the `hellcat-preview` media type, you can promote—but not demote—a `permission` attribute inherited from a parent team.",
          "required": false,
          "enum": [
            "read",
            "write",
            "admin"
          ],
          "location": "body"
        }
      ],
      "description": "Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.",
      "idName": "add-or-update-project",
      "documentationUrl": "https://developer.github.com/v3/teams/#add-or-update-team-project"
    },
    {
      "name": "Remove team project",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/teams/:team_id/projects/:project_id",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "project_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.",
      "idName": "remove-project",
      "documentationUrl": "https://developer.github.com/v3/teams/#remove-team-project"
    },
    {
      "name": "List discussions",
      "enabledForApps": true,
      "method": "GET",
      "path": "/teams/:team_id/discussions",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "direction",
          "type": "string",
          "description": "Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.",
          "default": "desc",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      "idName": "list-discussions",
      "documentationUrl": "https://developer.github.com/v3/teams/discussions/#list-discussions"
    },
    {
      "name": "Get a single discussion",
      "enabledForApps": true,
      "method": "GET",
      "path": "/teams/:team_id/discussions/:discussion_number",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "discussion_number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      "idName": "get-discussion",
      "documentationUrl": "https://developer.github.com/v3/teams/discussions/#get-a-single-discussion"
    },
    {
      "name": "Create a discussion",
      "enabledForApps": true,
      "method": "POST",
      "path": "/teams/:team_id/discussions",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "title",
          "type": "string",
          "description": "The discussion post's title.",
          "required": true,
          "location": "body"
        },
        {
          "name": "body",
          "type": "string",
          "description": "The discussion post's body text.",
          "required": true,
          "location": "body"
        },
        {
          "name": "private",
          "type": "boolean",
          "description": "Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.",
          "default": false,
          "required": false,
          "location": "body"
        }
      ],
      "description": "Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      "idName": "create-discussion",
      "documentationUrl": "https://developer.github.com/v3/teams/discussions/#create-a-discussion"
    },
    {
      "name": "Edit a discussion",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/teams/:team_id/discussions/:discussion_number",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "discussion_number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "title",
          "type": "string",
          "description": "The discussion post's title.",
          "required": false,
          "location": "body"
        },
        {
          "name": "body",
          "type": "string",
          "description": "The discussion post's body text.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      "idName": "edit-discussion",
      "documentationUrl": "https://developer.github.com/v3/teams/discussions/#edit-a-discussion"
    },
    {
      "name": "Delete a discussion",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/teams/:team_id/discussions/:discussion_number",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "discussion_number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      "idName": "delete-discussion",
      "documentationUrl": "https://developer.github.com/v3/teams/discussions/#delete-a-discussion"
    },
    {
      "name": "List comments",
      "enabledForApps": true,
      "method": "GET",
      "path": "/teams/:team_id/discussions/:discussion_number/comments",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "discussion_number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "direction",
          "type": "string",
          "description": "Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.",
          "default": "desc",
          "required": false,
          "enum": [
            "asc",
            "desc"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      "idName": "list-comments",
      "documentationUrl": "https://developer.github.com/v3/teams/discussion_comments/#list-comments"
    },
    {
      "name": "Get a single comment",
      "enabledForApps": true,
      "method": "GET",
      "path": "/teams/:team_id/discussions/:discussion_number/comments/:comment_number",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "discussion_number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      "idName": "get-comment",
      "documentationUrl": "https://developer.github.com/v3/teams/discussion_comments/#get-a-single-comment"
    },
    {
      "name": "Create a comment",
      "enabledForApps": true,
      "method": "POST",
      "path": "/teams/:team_id/discussions/:discussion_number/comments",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "discussion_number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "body",
          "type": "string",
          "description": "The discussion comment's body text.",
          "required": true,
          "location": "body"
        }
      ],
      "description": "Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      "idName": "create-comment",
      "documentationUrl": "https://developer.github.com/v3/teams/discussion_comments/#create-a-comment"
    },
    {
      "name": "Edit a comment",
      "enabledForApps": true,
      "method": "PATCH",
      "path": "/teams/:team_id/discussions/:discussion_number/comments/:comment_number",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "discussion_number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "body",
          "type": "string",
          "description": "The discussion comment's body text.",
          "required": true,
          "location": "body"
        }
      ],
      "description": "Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      "idName": "edit-comment",
      "documentationUrl": "https://developer.github.com/v3/teams/discussion_comments/#edit-a-comment"
    },
    {
      "name": "Delete a comment",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/teams/:team_id/discussions/:discussion_number/comments/:comment_number",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "discussion_number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "comment_number",
          "type": "integer",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      "idName": "delete-comment",
      "documentationUrl": "https://developer.github.com/v3/teams/discussion_comments/#delete-a-comment"
    },
    {
      "name": "List team members",
      "enabledForApps": true,
      "method": "GET",
      "path": "/teams/:team_id/members",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "role",
          "type": "string",
          "description": "Filters members returned by their role in the team. Can be one of:  \n\\* `member` \\- normal members of the team.  \n\\* `maintainer` \\- team maintainers.  \n\\* `all` \\- all members of the team.",
          "default": "all",
          "required": false,
          "enum": [
            "member",
            "maintainer",
            "all"
          ],
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "If you pass the `hellcat-preview` media type, team members will include the members of child teams.",
      "idName": "list-members",
      "documentationUrl": "https://developer.github.com/v3/teams/members/#list-team-members"
    },
    {
      "name": "Get team member",
      "enabledForApps": true,
      "method": "GET",
      "path": "/teams/:team_id/members/:username",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "The \"Get team member\" API (described below) is deprecated.\n\nWe recommend using the [Get team membership API](https://developer.github.com/v3/teams/members/#get-team-membership) instead. It allows you to get both active and pending memberships.\n\nTo list members in a team, the team must be visible to the authenticated user.",
      "idName": "get-member",
      "documentationUrl": "https://developer.github.com/v3/teams/members/#get-team-member"
    },
    {
      "name": "Add team member",
      "enabledForApps": true,
      "method": "PUT",
      "path": "/teams/:team_id/members/:username",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "The \"Add team member\" API (described below) is deprecated.\n\nWe recommend using the [Add team membership API](https://developer.github.com/v3/teams/members/#add-or-update-team-membership) instead. It allows you to invite new organization members to your teams.\n\nTo add a user to a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with, and the user being added must already be a member of at least one other team on the same organization.\n\nNote that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"\n\nIf you attempt to add an organization to a team, you will get this:\n\nIf you attempt to add a user to a team and that user is not a member of at least one other team on the same organization, you will get this:",
      "idName": "add-member",
      "documentationUrl": "https://developer.github.com/v3/teams/members/#add-team-member"
    },
    {
      "name": "Remove team member",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/teams/:team_id/members/:username",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "The \"Remove team member\" API (described below) is deprecated.\n\nWe recommend using the [Remove team membership API](https://developer.github.com/v3/teams/members/#remove-team-membership) instead. It allows you to remove both active and pending memberships.\n\nTo remove a user from a team, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. NOTE: This does not delete the user, it just removes them from the team.",
      "idName": "remove-member",
      "documentationUrl": "https://developer.github.com/v3/teams/members/#remove-team-member"
    },
    {
      "name": "Get team membership",
      "enabledForApps": true,
      "method": "GET",
      "path": "/teams/:team_id/memberships/:username",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "If you pass the `hellcat-preview` media type, team members will include the members of child teams.\n\nTo get a user's membership with a team, the team must be visible to the authenticated user.\n\n**Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create team](https://developer.github.com/v3/teams#create-team).",
      "idName": "get-membership",
      "documentationUrl": "https://developer.github.com/v3/teams/members/#get-team-membership"
    },
    {
      "name": "Add or update team membership",
      "enabledForApps": true,
      "method": "PUT",
      "path": "/teams/:team_id/memberships/:username",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "role",
          "type": "string",
          "description": "The role that this user should have in the team. Can be one of:  \n\\* `member` \\- a normal member of the team.  \n\\* `maintainer` \\- a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.",
          "default": "member",
          "required": false,
          "enum": [
            "member",
            "maintainer"
          ],
          "location": "body"
        }
      ],
      "description": "If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a maintainer of the team.\n\nIf the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \"pending\" state until the user accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.\n\nIf the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a maintainer of the team.\n\nIf you attempt to add an organization to a team, you will get this:",
      "idName": "add-or-update-membership",
      "documentationUrl": "https://developer.github.com/v3/teams/members/#add-or-update-team-membership"
    },
    {
      "name": "Remove team membership",
      "enabledForApps": true,
      "method": "DELETE",
      "path": "/teams/:team_id/memberships/:username",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. NOTE: This does not delete the user, it just removes their membership from the team.",
      "idName": "remove-membership",
      "documentationUrl": "https://developer.github.com/v3/teams/members/#remove-team-membership"
    },
    {
      "name": "List pending team invitations",
      "enabledForApps": true,
      "method": "GET",
      "path": "/teams/:team_id/invitations",
      "params": [
        {
          "name": "team_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.",
      "idName": "list-pending-invitations",
      "documentationUrl": "https://developer.github.com/v3/teams/members/#list-pending-team-invitations"
    }
  ],
  "scim": [
    {
      "name": "Get a list of provisioned identities",
      "enabledForApps": false,
      "method": "GET",
      "path": "/scim/v2/organizations/:organization/Users",
      "params": [
        {
          "name": "organization",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "startIndex",
          "type": "integer",
          "description": "Used for pagination: the index of the first result to return",
          "required": false,
          "location": "query"
        },
        {
          "name": "count",
          "type": "integer",
          "description": "Used for pagination: the number of results to return",
          "required": false,
          "location": "query"
        },
        {
          "name": "filter",
          "type": "string",
          "description": "Only `eq` type filters are supported",
          "required": false,
          "location": "query"
        }
      ],
      "description": "**Filter parameter**\n\nYou can filter results with the `id`, `userName`, `emails` and `external_id` query parameters.\n\n```\nGET /scim/v2/organizations/:organization/Users?filter=userName\n```\n\nRetrieves a paginated list of all provisioned organization members, including pending invitations.",
      "idName": "get-provisioned-identities-list",
      "documentationUrl": "https://developer.github.com/v3/scim/#get-a-list-of-provisioned-identities"
    },
    {
      "name": "Get provisioning details for a single user",
      "enabledForApps": false,
      "method": "GET",
      "path": "/scim/v2/organizations/:organization/users/:user_id",
      "params": [
        {
          "name": "organization",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "user_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "get-provisioning-details-for-user",
      "documentationUrl": "https://developer.github.com/v3/scim/#get-provisioning-details-for-a-single-user"
    },
    {
      "name": "Provision and invite users",
      "enabledForApps": false,
      "method": "POST",
      "path": "/scim/v2/organizations/:organization/Users",
      "params": [
        {
          "name": "organization",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Provision organization membership for and send activation emails to a list of email addresses.",
      "idName": "provision-invite-users",
      "documentationUrl": "https://developer.github.com/v3/scim/#provision-and-invite-users"
    },
    {
      "name": "Update a provisioned organization membership",
      "enabledForApps": false,
      "method": "PUT",
      "path": "/scim/v2/organizations/:organization/users/:user_id",
      "params": [
        {
          "name": "organization",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "user_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "**Note:** Setting `active: false` removes the user from the organization, deletes the external identity, and deletes the associated `:id`.",
      "idName": "update-provisioned-org-membership",
      "documentationUrl": "https://developer.github.com/v3/scim/#update-a-provisioned-organization-membership"
    },
    {
      "name": "Update a user attribute",
      "enabledForApps": false,
      "method": "PATCH",
      "path": "/scim/v2/organizations/:organization/users/:user_id",
      "params": [
        {
          "name": "organization",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "user_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "**Note:** Setting `active: false` removes the user from the organization, deletes the external identity, and deletes the associated `:id`.",
      "idName": "update-user-attribute",
      "documentationUrl": "https://developer.github.com/v3/scim/#update-a-user-attribute"
    },
    {
      "name": "Remove a user from the organization",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/scim/v2/organizations/:organization/users/:user_id",
      "params": [
        {
          "name": "organization",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "user_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "remove-user-from-org",
      "documentationUrl": "https://developer.github.com/v3/scim/#remove-a-user-from-the-organization"
    }
  ],
  "users": [
    {
      "name": "Get a single user",
      "enabledForApps": true,
      "method": "GET",
      "path": "/users/:username",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Provides publicly available information about someone with a GitHub account.\n\nThe `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://developer.github.com/v3/#authentication).\n\nThe Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see \"[Emails API](https://developer.github.com/v3/users/emails/)\".",
      "idName": "get",
      "documentationUrl": "https://developer.github.com/v3/users/#get-a-single-user"
    },
    {
      "name": "Get the authenticated user",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user",
      "params": [],
      "description": "Lists public and private profile information when authenticated through basic auth or OAuth with the `user` scope.\n\nLists public profile information when authenticated through OAuth without the `user` scope.",
      "idName": "get",
      "documentationUrl": "https://developer.github.com/v3/users/#get-the-authenticated-user"
    },
    {
      "name": "Update the authenticated user",
      "enabledForApps": false,
      "method": "PATCH",
      "path": "/user",
      "params": [
        {
          "name": "name",
          "type": "string",
          "description": "The new name of the user.",
          "required": false,
          "location": "body"
        },
        {
          "name": "email",
          "type": "string",
          "description": "The publicly visible email address of the user.",
          "required": false,
          "location": "body"
        },
        {
          "name": "blog",
          "type": "string",
          "description": "The new blog URL of the user.",
          "required": false,
          "location": "body"
        },
        {
          "name": "company",
          "type": "string",
          "description": "The new company of the user.",
          "required": false,
          "location": "body"
        },
        {
          "name": "location",
          "type": "string",
          "description": "The new location of the user.",
          "required": false,
          "location": "body"
        },
        {
          "name": "hireable",
          "type": "boolean",
          "description": "The new hiring availability of the user.",
          "required": false,
          "location": "body"
        },
        {
          "name": "bio",
          "type": "string",
          "description": "The new short biography of the user.",
          "required": false,
          "location": "body"
        }
      ],
      "description": "**Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.",
      "idName": "update",
      "documentationUrl": "https://developer.github.com/v3/users/#update-the-authenticated-user"
    },
    {
      "name": "Get contextual information about a user",
      "enabledForApps": false,
      "method": "GET",
      "path": "/users/:username/hovercard",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "subject_type",
          "type": "string",
          "description": "Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.",
          "required": false,
          "enum": [
            "organization",
            "repository",
            "issue",
            "pull_request"
          ],
          "location": "query"
        },
        {
          "name": "subject_id",
          "type": "string",
          "description": "Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.",
          "required": false,
          "location": "query"
        }
      ],
      "description": "Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.\n\nThe `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:",
      "idName": "get-context-for-user",
      "documentationUrl": "https://developer.github.com/v3/users/#get-contextual-information-about-a-user"
    },
    {
      "name": "Get all users",
      "enabledForApps": true,
      "method": "GET",
      "path": "/users",
      "params": [
        {
          "name": "since",
          "type": "string",
          "description": "The integer ID of the last User that you've seen.",
          "required": false,
          "location": "query"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.\n\nNote: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of users.",
      "idName": "get",
      "documentationUrl": "https://developer.github.com/v3/users/#get-all-users"
    },
    {
      "name": "List blocked users",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/blocks",
      "params": [],
      "description": "List the users you've blocked on your personal account.",
      "idName": "list-blocked",
      "documentationUrl": "https://developer.github.com/v3/users/blocking/#list-blocked-users"
    },
    {
      "name": "Check whether you've blocked a user",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/blocks/:username",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "If the user is blocked:\n\nIf the user is not blocked:",
      "idName": "check-whether-youve-blocked",
      "documentationUrl": "https://developer.github.com/v3/users/blocking/#check-whether-youve-blocked-a-user"
    },
    {
      "name": "Block a user",
      "enabledForApps": false,
      "method": "PUT",
      "path": "/user/blocks/:username",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "block",
      "documentationUrl": "https://developer.github.com/v3/users/blocking/#block-a-user"
    },
    {
      "name": "Unblock a user",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/user/blocks/:username",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "unblock",
      "documentationUrl": "https://developer.github.com/v3/users/blocking/#unblock-a-user"
    },
    {
      "name": "List email addresses for a user",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/emails",
      "params": [
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.",
      "idName": "list-emails",
      "documentationUrl": "https://developer.github.com/v3/users/emails/#list-email-addresses-for-a-user"
    },
    {
      "name": "List public email addresses for a user",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/public_emails",
      "params": [
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Lists your publicly visible email address, which you can set with the [Toggle primary email visibility](#toggle-primary-email-visibility) endpoint. This endpoint is accessible with the `user:email` scope.",
      "idName": "list-public-emails",
      "documentationUrl": "https://developer.github.com/v3/users/emails/#list-public-email-addresses-for-a-user"
    },
    {
      "name": "Add email address(es)",
      "enabledForApps": false,
      "method": "POST",
      "path": "/user/emails",
      "params": [],
      "description": "You can post a single email address or an array of addresses:",
      "idName": "add-emails",
      "documentationUrl": "https://developer.github.com/v3/users/emails/#add-email-addresses"
    },
    {
      "name": "Delete email address(es)",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/user/emails",
      "params": [],
      "description": "You can include a single email address or an array of addresses:",
      "idName": "delete-emails",
      "documentationUrl": "https://developer.github.com/v3/users/emails/#delete-email-addresses"
    },
    {
      "name": "Toggle primary email visibility",
      "enabledForApps": false,
      "method": "PATCH",
      "path": "/user/email/visibility",
      "params": [
        {
          "name": "email",
          "type": "string",
          "description": "Specify the _primary_ email address that needs a visibility change.",
          "required": true,
          "location": "body"
        },
        {
          "name": "visibility",
          "type": "string",
          "description": "Use `public` to enable an authenticated user to view the specified email address, or use `private` so this primary email address cannot be seen publicly.",
          "required": true,
          "location": "body"
        }
      ],
      "description": "Sets the visibility for your primary email addresses.",
      "idName": "toggle-primary-email-visibility",
      "documentationUrl": "https://developer.github.com/v3/users/emails/#toggle-primary-email-visibility"
    },
    {
      "method": "GET",
      "path": "/users/:username/followers",
      "enabledForApps": true,
      "name": "List a user's followers",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-followers-for-user",
      "documentationUrl": "https://developer.github.com/v3/users/followers/#list-followers-of-a-user"
    },
    {
      "method": "GET",
      "path": "/user/followers",
      "enabledForApps": true,
      "name": "List the authenticated user's followers",
      "params": [
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-followers",
      "documentationUrl": "https://developer.github.com/v3/users/followers/#list-followers-of-a-user"
    },
    {
      "method": "GET",
      "path": "/users/:username/following",
      "enabledForApps": true,
      "name": "List who a user is following",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-who-is-following-for-user",
      "documentationUrl": "https://developer.github.com/v3/users/followers/#list-users-followed-by-another-user"
    },
    {
      "method": "GET",
      "path": "/user/following",
      "enabledForApps": true,
      "name": "List who the authenticated user is following",
      "params": [
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "",
      "idName": "list-who-is-following",
      "documentationUrl": "https://developer.github.com/v3/users/followers/#list-users-followed-by-another-user"
    },
    {
      "name": "Check if you are following a user",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/following/:username",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "check-following",
      "documentationUrl": "https://developer.github.com/v3/users/followers/#check-if-you-are-following-a-user"
    },
    {
      "name": "Check if one user follows another",
      "enabledForApps": true,
      "method": "GET",
      "path": "/users/:username/following/:target_user",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "target_user",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "",
      "idName": "check-one-follows-another-for-user",
      "documentationUrl": "https://developer.github.com/v3/users/followers/#check-if-one-user-follows-another"
    },
    {
      "name": "Follow a user",
      "enabledForApps": false,
      "method": "PUT",
      "path": "/user/following/:username",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"\n\nFollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.",
      "idName": "follow",
      "documentationUrl": "https://developer.github.com/v3/users/followers/#follow-a-user"
    },
    {
      "name": "Unfollow a user",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/user/following/:username",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.",
      "idName": "unfollow",
      "documentationUrl": "https://developer.github.com/v3/users/followers/#unfollow-a-user"
    },
    {
      "name": "List public keys for a user",
      "enabledForApps": true,
      "method": "GET",
      "path": "/users/:username/keys",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Lists the _verified_ public keys for a user. This is accessible by anyone.",
      "idName": "list-public-keys-for-user",
      "documentationUrl": "https://developer.github.com/v3/users/keys/#list-public-keys-for-a-user"
    },
    {
      "name": "List your public keys",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/keys",
      "params": [
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Lists the current user's keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      "idName": "list-public-keys",
      "documentationUrl": "https://developer.github.com/v3/users/keys/#list-your-public-keys"
    },
    {
      "name": "Get a single public key",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/keys/:key_id",
      "params": [
        {
          "name": "key_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "View extended details for a single public key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      "idName": "get-public-key",
      "documentationUrl": "https://developer.github.com/v3/users/keys/#get-a-single-public-key"
    },
    {
      "name": "Create a public key",
      "enabledForApps": false,
      "method": "POST",
      "path": "/user/keys",
      "params": [],
      "description": "Creates a public key. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      "idName": "create-public-key",
      "documentationUrl": "https://developer.github.com/v3/users/keys/#create-a-public-key"
    },
    {
      "name": "Delete a public key",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/user/keys/:key_id",
      "params": [
        {
          "name": "key_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Removes a public key. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      "idName": "delete-public-key",
      "documentationUrl": "https://developer.github.com/v3/users/keys/#delete-a-public-key"
    },
    {
      "name": "List GPG keys for a user",
      "enabledForApps": true,
      "method": "GET",
      "path": "/users/:username/gpg_keys",
      "params": [
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        },
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Lists the GPG keys for a user. This information is accessible by anyone.",
      "idName": "list-gpg-keys-for-user",
      "documentationUrl": "https://developer.github.com/v3/users/gpg_keys/#list-gpg-keys-for-a-user"
    },
    {
      "name": "List your GPG keys",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/gpg_keys",
      "params": [
        {
          "name": "per_page",
          "type": "integer",
          "required": false,
          "description": "Results per page (max 100)",
          "default": 30,
          "location": "query"
        },
        {
          "name": "page",
          "type": "integer",
          "required": false,
          "description": "Page number of the results to fetch.",
          "default": 1,
          "location": "query"
        }
      ],
      "description": "Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      "idName": "list-gpg-keys",
      "documentationUrl": "https://developer.github.com/v3/users/gpg_keys/#list-your-gpg-keys"
    },
    {
      "name": "Get a single GPG key",
      "enabledForApps": false,
      "method": "GET",
      "path": "/user/gpg_keys/:gpg_key_id",
      "params": [
        {
          "name": "gpg_key_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      "idName": "get-gpg-key",
      "documentationUrl": "https://developer.github.com/v3/users/gpg_keys/#get-a-single-gpg-key"
    },
    {
      "name": "Create a GPG key",
      "enabledForApps": false,
      "method": "POST",
      "path": "/user/gpg_keys",
      "params": [],
      "description": "Creates a GPG key. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      "idName": "create-gpg-key",
      "documentationUrl": "https://developer.github.com/v3/users/gpg_keys/#create-a-gpg-key"
    },
    {
      "name": "Delete a GPG key",
      "enabledForApps": false,
      "method": "DELETE",
      "path": "/user/gpg_keys/:gpg_key_id",
      "params": [
        {
          "name": "gpg_key_id",
          "type": "string",
          "required": true,
          "description": "",
          "location": "url"
        }
      ],
      "description": "Removes a GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      "idName": "delete-gpg-key",
      "documentationUrl": "https://developer.github.com/v3/users/gpg_keys/#delete-a-gpg-key"
    }
  ]
}